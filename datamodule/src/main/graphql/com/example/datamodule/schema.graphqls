#
directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
) on FIELD_DEFINITION | OBJECT | INTERFACE

#
type Query {
  # A user's information to pull back org roles, etc. - Complete
  me(userId: String): Me

  # Gets a masked identity for an email, for booking - Not started
  getIdentityForEmail(emailAddress: EmailAddress!): MaskedIdentity

  #
  getPatronForEmployeeId(employeeId: String!): MaskedPatron

  # Gets available onboarding options for a user
  getUserOnboardingOptions: UserOnboardingOptions

  # Can an organization be created from the logged in user?
  canOrganizationBeCreated: OrganizationCreationStatus!

  # Gets organization for settings page
  organizationSettings: OrganizationSettings

  # Gets all favourite properties of active organization
  getActiveOrganizationFavouriteProperties: [Property]

  # Claims a token, returns it with a payload, or without a payload if secure - Complete
  claimToken(tokenId: String): Token

  # Resend invite for expired token
  resendInviteForToken(tokenId: String): InviteUsersResponse

  # Gets back a credit application
  getCreditApplication(applicationId: String): CreditApplication

  #
  getCreditApplicationsForOrganization: [CreditApplication]

  # Gets back property details for PDP - Complete
  property(slug: String, numberRooms: Int, dates: CheckinCheckout): Property

  # Gets all amenities back for filtering - Complete
  amenities: [Amenity]

  # Get all locations
  locations: [LodgeLinkLocation]

  # Get all locales
  getLocales: [Locale]

  # get locale based on localeId or OrgId
  getLocaleById(params: GetLocaleByIdInput): Locale

  # Get all Affiliations
  getAffiliations: [Affiliation]

  # Get all room templates for a Supplier
  getRoomTemplates(supplierId: Int): [RoomTemplate]

  # Get all room types
  getRoomTypes: [RoomType]

  # Gets all layers back for the map - Complete
  layers: [Layer]

  # Gets back suggested patterns and locations - Complete
  suggestedPattern(inputString: String): SearchSuggestions

  # Gets back Properties and PointsOfInterests for map area - Feature Complete
  mapSearch(
    searchParameters: PropertySearchInput!
    options: SearchQueryOptions!
  ): SearchResult

  # Directions between two points, or properties, or strings - Complete
  directions(
    from: DirectionsInput
    to: DirectionsInput
    distanceType: DistanceType
  ): Directions

  # Gets availability / rates for Connected Properties
  getConnectedProperties(
    propertyIds: [Int!]
    numberRooms: Int
    checkin: String!
    checkout: String!
  ): [ConnectedAvailability!]

  # Gets a booking by its UDID - Not Started
  getBookingByBookingNumber(bookingNumber: String, draftEdit: Boolean): Booking

  #
  getBookingByToken(token: String): Booking

  #
  getNotificationsContentPayload(token: String): NotificationContent

  #
  getPaymentCode(paymentCodeId: Int!): PaymentCode

  # Gets Payment Codes for Organization - Not started
  getOrganizationPaymentCodes: [PaymentCode!]

  # Gets Payment Codes that user has access to
  getUserPaymentCodes: [PaymentCode!]

  # Gets bookings associated with a payment code
  getBookingsForPaymentCode(paymentCodeId: Int!): [Booking!]

  # Gets all my bookings
  getUserBookings(option: BookingSort): [Booking!]

  # Get all bookings for my active org
  getBookingsForActiveOrg(
    option: BookingSort
    bookingStatusType: BookingStatusType
  ): [Booking!]

  # Get all bookings of my active org with pagination
  getPaginatedBookingsForActiveOrg(
    bookingStatusType: BookingStatusType
    top: Int
    skip: Int
    searchText: String
    viewBy: String
    sortBy: String
    startDateTimeStamp: String
  ): BookingsWrapper

  # Get card sources and publishable key
  getPaymentKeyAndSources(country: String!): CardSourcesAndKey

  # Get card sources - this will be phased out soon
  cardSources: [CardSource!]

  # Get all bookings the current user is apart of
  getBookingsUserIsAttending(option: BookingSort): [Booking!]

  # Get paginated bookings the current user is apart of
  getPaginatedBookingsUserIsAttending(
    top: Int
    skip: Int
    searchText: String
    viewBy: String
    sortBy: String
    startDateTimeStamp: String
  ): BookingsWrapper

  # Get all bookings the current user is apart of
  getBookingsUserIsAttendingInActiveOrg(option: BookingSort): [Booking!]

  # Get all the bookings subcontractors have used
  getBookingsForSubcontractors: [Booking!]

  # Get paginated bookings subcontractors have used
  getPaginatedBookingsForSubcontractors(
    top: Int
    skip: Int
    searchText: String
    viewBy: String
    sortBy: String
    startDateTimeStamp: String
  ): BookingsWrapper

  # Get all bookings within a date range for guest schedule search
  getBookingsForGuestSchedule(
    startDate: LodgeLinkDate!
    endDate: LodgeLinkDate!
  ): [Booking!]

  # Get an organizations crew
  getCrew(bookingId: Int): Crew

  # Get an organizations paginated crew data
  getCrewMembers(
    bookingId: Int
    top: Int
    skip: Int
    searchText: String
    viewBy: String
    sortBy: String
    orderBy: String
    custom: String
    filters: [String!]
  ): CrewWrapper

  # Get an associated booking with crew member exist or not
  getAssociatedBookingWithCrewMemberExist(
    patronIds: [Int!]!
  ): AssociatedBookingWithCrewMemberExistResponse

  # Get duplicate guest days from guest names
  getDuplicateGuestDaysByGuestNames(
    bookingNumber: String!
    dateRange: CheckinCheckout!
    guestNames: [CrewMemberInput]!
  ): BookingGuestDayDuplicateResponse

  # Determines if booking can autoconfirm
  getCanBookingAutoConfirm(booking: BookingInput!): Boolean

  # Gets Cost Tracking Codes for Organization - Not started
  getOrganizationCostTrackingCodes: [CostTrackingCode!]

  #
  getCostTrackingCode(costTrackingCodeId: Int!): CostTrackingCode

  # Returns a list of our customers - Complete
  ourCustomers: [Featured]

  # Returns a list of our partners - Incomplete
  ourPartners: [Featured]

  #
  getMasterServiceAgreement(version: String): GetMASResponse

  #
  getCancellationPolicy(version: String): CancellationPolicy

  #
  SupplierQueries: SupplierQueries

  #
  AdminQueries: AdminQueries

  #
  PartnerHubQueries: PartnerHubQueries

  #
  getPendingOrganizatons(
    status: String
    top: Int
    skip: Int
  ): OrganizationRequestResponse

  #
  getPendingUserJoinRequests(
    status: String
    top: Int
    skip: Int
  ): UserJoinResponse

  #
  getPendingCreditApplications(
    status: String
    top: Int
    skip: Int
  ): PendingCreditApplicationsResponse

  #
  getPendingRequestsCount(
    organizationRequestStatus: String
    userRequestStatus: String
    creditApplicationStatus: String
  ): PendingRequestsCount

  #
  getOrganizationPendingUserJoinRequests: [UserJoinRequest]

  #
  generateOTP(
    token: String!
    bookingNumber: String!
    serviceName: String!
  ): OTPResponse

  #
  getOrganizationFeatureFlag(
    organizationId: Int!
    top: Int
    skip: Int
  ): OrganizationFeatureFlagResponse

  #
  getBookingBypassReasonsByType(
    bypassType: [BookingBypassTypes!]!
  ): [BookingBypassReasonResponse]

  #
  getCustomCategories(
    customCategoryId: Int
    active: Boolean
  ): GetCustomCategoriesResponse

  #
  getCrewCSVUploadHistory: CrewCSVUploadHistoryResponse

  #
  getBookingFeeEventTypes: GetBookingFeeEventTypesResponse
}

# Me typedef
# based off
type Me {
  # String representation of the id of the user
  userId: String!

  # Username string of the user, which is typically an email
  emailAddress: String!

  # The first name of the user
  firstName: String!

  # whether the user can log into their account
  active: Boolean!

  # The last name of the user
  lastName: String!

  # The company of the user
  company: String

  # The position of the user
  position: String

  # The phoneNumber of the user
  phoneNumber: String

  # Organizations a user is part of
  organizations: [Organization!]!

  # Current Organization ID Selected
  activeOrganization: Organization!

  # A users receiveMarketingEmails preference
  receiveMarketingEmails: Boolean

  #
  accountCreated: DateTime

  #
  admin: Boolean

  # Admin token to act as
  adminToken: AdminToken

  #
  organizationFeatureFlags: [FeatureFlagMapping!]

  #
  userJoinRequests: [UserJoinRequest!]

  #
  identityId: Int
}

# Organization typedef
# Defines an Organization and their information.
type Organization {
  #
  id: Int!

  # Domain suffix of organization
  domainSuffix: String!

  # Name of the Organization.
  name: String!

  # Unique Organization Slug
  slug: String!

  #
  primaryBusinessAddress: Address

  #
  billingAddress: Address

  # Is this organization a stub?
  stub: Boolean!

  #
  masterServiceAgreed: Boolean!

  #
  masterServiceAgreementVersion: String

  #
  customMSA: Boolean

  #
  creditApplications: [CreditApplication]

  #
  emailAddress: EmailAddress!

  #
  numberOfAdmins: Int!

  #
  supplier: Supplier

  #
  customer: Customer

  #
  industry: Industry

  #
  annualAccommodationExpense: AnnualAccommodationExpense

  #
  companySize: CompanySize

  #
  bookings: Booking

  #
  favourites: [Property]

  #
  dutyOfCareSettings: OrganizationDutyOfCareSettings

  #
  status: OrganizationStatus

  #
  leadSource: String

  #
  autoApproveMembers: Boolean

  #
  deactivationReason: String

  #
  trackingCodesRequired: Boolean

  #
  adminRole: String

  #
  featureFlagMapping: [FeatureFlagMapping!]

  #
  riskRating: RiskRating

  #
  tier: Tier

  #
  locale: Locale

  #
  notes: [Note!]

  #
  uniqueCrewIdentifier: UniqueCrewIdentifier

  #
  masterServiceAgreement: MasterServiceAgreement

  #
  users: OrganizationUsers

  #
  apEmailAddress: String

  #
  apPhoneNumber: String

  #
  membershipType: MembershipType

  #
  roles: [RoleName!]

  #
  permissions: [String!]

  #
  creditApplicationStatus: OrganizationCreditAppStatus

  #
  masterServiceAgreementNeedsUpdate: Boolean!

  #
  members: [OrganizationMember!]
}

# Address typedef
type Address {
  # Written address
  address: String

  # City of the address
  city: String

  # County
  county: String

  # Region this place is located
  region: String

  # Postal Code or ZIP
  postalCode: String

  # Country
  country: String
}

#
type CreditApplication {
  #
  creditApplicationId: String

  #
  legalCompanyName: String

  #
  tradeName: String

  #
  dunsNum: String

  #
  parentCompany: String

  #
  organization: OrganizationCondensed

  #
  lineOfBusiness: String

  #
  primaryBusinessAddress: Address

  #
  billingAddress: Address

  #
  phone: String

  #
  emailAddress: EmailAddress

  #
  apName: String

  #
  apPhoneNumber: String

  #
  signatureFullName: String

  #
  signatureTitle: String

  #
  authorizedOrganizationBehalf: Boolean

  #
  state: CreditApplicationStatus!

  #
  active: Boolean!

  #
  creditLimit: Currency

  #
  submittedDate: LodgeLinkDate
}

# OrganizationCondensed typedef
# The id, slug, name of an organization
type OrganizationCondensed {
  #
  id: Int!

  #
  slug: String!

  #
  name: String!
}

# Email Address
scalar EmailAddress

#
enum CreditApplicationStatus {
  #
  Draft

  #
  Pending

  #
  Approved

  #
  Rejected

  #
  Expired
}

# Currency typedef
type Currency {
  # Symbol of currency
  symbol: String!

  # Position of the symbol
  position: CurrencyPosition!

  # Value
  value: Float!

  # Formatted string of value including symbol
  formatted: String!

  # Currency Name, e.g. CAD, USD
  name: String!

  # Optional currency value type, e.g LNR, KNR
  type: String
}

#
enum CurrencyPosition {
  #
  Before

  #
  After
}

# Date with format YYYY-MM-DD
scalar LodgeLinkDate

# Supplier typedef
# Defines a Supplier and their information.
type Supplier {
  #
  id: Int!

  #
  name: String!

  #
  brand: String!

  #
  organization: Organization

  #
  properties: [Property!]

  #
  defaultMarkup: Int
}

# Property typedef
# Defines a Property and all information it contains
type Property {
  #
  id: Int

  # Name of the property
  name: String

  # Property slug, hyphenated name
  slug: String

  #
  emailAddress: EmailAddress!

  # Location of the property
  location: LodgeLinkLocation

  # Top amenities for a property
  topAmenities: [Amenity]

  # All amenities a property provides
  allAmenities: [Amenity]

  # Property Type
  type: PropertyType

  #
  countryCode: String

  #
  locale: Locale

  # Property Images
  propertyImages: [PropertyImage]

  # The main image of the property
  cardImage: PropertyImage

  # Rooms inside Property
  rooms: [Room!]

  # Address of the Property
  address: Address

  # Availability of Property
  availability: AvailabilityType

  # Link to video tour
  tourLink: String

  # Similar properties
  similar: [Property]

  # Description of the Property
  description: String

  # Short description of the Property
  shortDescription: String

  # Affiliations of a Property
  affiliations: [Affiliation]

  # Latitude and longitude coordinates of a location
  geo: Geo

  # Starting price of lowest priced room
  startingPrice: Currency

  # Starting ceiling price of lowest priced room
  startingCeilingPrice: Currency

  # Extra params relating to ceiling price
  startingCeilingParams: CeilingParams

  # Distance of a property from a user provided coordinate
  distance: Float

  # Currency used at this Property
  currency: String

  # Flag if the Property is published
  published: Boolean

  # Last Updated Date
  lastUpdated: LodgeLinkDate

  # Can a property book rooms in Standby
  standBy: Boolean

  # Current Status of Property
  status: PropertyStatus

  # Description of the status
  statusDescription: String

  #
  phoneNumber: String

  #
  totalCapacity: Int

  #
  supplierName: String

  #
  supplierId: Int

  #
  callForPricing: Boolean!

  #
  folioFormat: FolioFormat

  #
  allFolioFormat: [FolioFormat!]

  #
  timeZone: String

  #
  connected: Boolean!

  #
  propertyPolicy: PropertyPolicy

  #
  createdBy: Identity

  #
  lastUpdatedBy: Identity

  # Payment method that applies for this property
  propertyPaymentMethod: PropertyPaymentMethod

  #
  isPartnerHubEnabled: Boolean

  #
  sapSupplier: SAPSupplier

  #
  masterServiceAgreement: MasterServiceAgreement

  #
  masterServiceAgreed: LodgeLinkDate

  #
  county: County

  #
  propertyAddress: PropertyAddress

  #
  lowestCalculatedRoomRate: LowestCalculatedRoomRate

  #
  isPreferred: Boolean

  # Rate engine toggle for this property
  isRateEngineEnabled: Boolean

  #
  organizationId: Int

  #
  taxFeeTemplate: TaxFeeTemplate
}

# Location typedef
# A location used somewhere in Lodgelink
type LodgeLinkLocation {
  #
  id: Int!

  # Name of the location
  name: String!

  # The type that a location is
  type: String!

  # Latitude and longitude coordinates of a location
  geo: Geo!

  # Region the location is located
  region: String

  # Country the location is located
  country: String

  # Abbreviation of Region
  regionAbbreviation: String

  # Abbreviation of Country
  countryAbbreviation: String

  #
  active: Boolean
}

# Geo typedef
type Geo {
  # Lattitude of Geo
  lat: Float!

  # Longitude of Geo
  lng: Float!
}

# Amenities typedef
# Amenities for properties
type Amenity {
  # Unique identifier
  id: Int!

  # Name of the amenity
  name: String!

  # The font code for the icon
  iconCode: String!

  # A short description of the amenity
  description: String

  # Shorthand code of the amenity
  code: String!

  # Order in which to display the amenity
  order: Int!

  # Is this amenity something you can filter by
  filterable: Boolean!
}

# PropertyType typedef
# Types of properties, e.g. Hotels, Lodges
type PropertyType {
  #
  id: Int!

  # Name of PropertyType
  name: String!

  # Description of PropertyType
  description: String
}

# Locale typedef
type Locale {
  #
  id: Int!

  #
  name: String!

  #
  currencyName: String!

  #
  symbol: String!

  #
  publishablePaymentKey: String

  #
  currencyPositionBefore: Boolean!

  #
  phoneCode: Int!
}

# Property Image
type PropertyImage {
  #
  id: Int!

  # href of Property Image
  href: String

  # Order of Property Image
  priorityOrder: Int!

  # This image is a card image
  card: Boolean!

  #
  title: String!

  #
  description: String
}

# Room Typedef
type Room {
  #
  id: Int!

  # Name of Room
  name: String!

  # Description of Room
  description: String

  # Rate of Room
  rate: Currency

  # Ceiling Rate of Room
  ceilingRate: Currency

  # Params relating to ceiling rate if available
  ceilingRateParams: CeilingParams

  # Availabile Rooms
  availableRooms: Int!

  # Guests per Room
  guestsPerRoom: Int!

  # Availability of Rooms
  available: Boolean!

  # Number of bathrooms in the room
  bathrooms: Int!

  # Room Type
  roomType: RoomType!

  #
  active: Boolean!

  #
  strikeoutRate: Currency

  #
  nightlyRates: [NightlyRate!]

  #
  availability: ConnectedAvailabilityType

  #
  rateKey: String

  #
  gdsPaymentType: String

  #
  connectionRoomTypeCode: String

  #
  numRoomsAvail: Int

  #
  averageRateAfterCalculations: Currency!
}

# CeilingParams typedef
# Defines the extra params that relates to the starting ceiling rate returned with a property
type CeilingParams {
  #
  percentageMaxMarkup: Float!

  #
  percentageToTriggerMax: Float!

  #
  percentageOnGDS: Float!
}

# Room Type typedef
type RoomType {
  #
  id: Int

  # Name of the room type
  name: String
}

# NightlyRate Typedef
type NightlyRate {
  #
  date: LodgeLinkDate!

  #
  price: String!

  #
  value: Float!

  #
  rateCategory: RateCategory
}

#
enum RateCategory {
  #
  KNR

  #
  LNR

  #
  GDS

  #
  CEILING
}

#
enum ConnectedAvailabilityType {
  #
  AVAILABLE

  #
  LIMITED

  #
  SOLD_OUT

  #
  DEFAULT
}

#
enum AvailabilityType {
  #
  Available

  #
  Request

  #
  Unavailable
}

# Affiliation typedef
type Affiliation {
  #
  id: Int

  # User-facing identifier
  affiliationId: String

  # Name of the affiliation
  name: String

  # Description of the affiliation
  description: String

  # Href of the affiliation
  href: String
}

#
enum PropertyStatus {
  #
  Draft

  #
  Pending

  #
  Approved

  #
  Rejected

  #
  Archived

  #
  Published
}

#
type FolioFormat {
  #
  id: Int

  #
  name: String

  #
  label: String
}

# PropertyPolicy Typedef
# Defines a property policy and all that it contains
type PropertyPolicy {
  #
  id: Int!

  #
  checkin: String!

  #
  checkout: String!

  #
  hoursToCancel: Int!
}

#
type Identity {
  #
  id: Int

  #
  emailAddress: EmailAddress!

  #
  user: User

  #
  organizationRoles: [OrganizationRole!]
}

#
type User {
  #
  id: Int!

  #
  userName: EmailAddress!

  #
  currentOrganization: Organization

  #
  identity: Identity
}

#
type OrganizationRole {
  #
  role: Role!

  #
  organization: Organization

  #
  membershipType: MembershipType
}

#
type Role {
  #
  id: Int!

  #
  title: String!

  #
  permissions: [Permission!]

  #
  organizationRoles: [OrganizationRole!]
}

# Permission typedef
type Permission {
  #
  id: Int!

  #
  roles: [Role!]

  #
  title: String!

  #
  description: String!
}

#
enum MembershipType {
  #
  Invited

  #
  Request

  #
  Member
}

#
enum PropertyPaymentMethod {
  #
  DirectBill

  #
  VirtualCreditCard
}

# SAPSupplier typedef
# Supplier information mapping from SAP
type SAPSupplier {
  #
  id: Int!

  #
  warehouseCode: String

  #
  projectNumber: String

  #
  vendorNumber: String

  #
  property: Property
}

#
type MasterServiceAgreement {
  #
  version: String!

  #
  content: String!

  #
  active: Boolean!

  #
  customMSA: Boolean!

  #
  uploadLink: String

  #
  signed: LodgeLinkDate
}

# County typedef
type County {
  #
  id: Int!

  #
  name: String!

  #
  properties: [Property]!

  #
  region: String

  #
  country: String
}

# PropertyAddress typedef
type PropertyAddress {
  #
  locationId: Int

  #
  locationName: String

  #
  countyId: Int

  #
  countyName: String

  #
  regionId: Int

  #
  regionName: String

  #
  countryId: Int

  #
  countryName: String

  #
  countryAbbreviation: String
}

# LowestCalculatedRoomRate typedef
type LowestCalculatedRoomRate {
  # Symbol of currency
  symbol: String!

  # Position of the symbol
  position: CurrencyPosition!

  # Value
  value: Float!

  # Formatted string of value including symbol
  formatted: String!

  # Currency Name, e.g. CAD, USD
  name: String!

  # Optional currency value type, e.g LNR, KNR
  type: String

  # Room ID associated with rate
  roomId: Int
}

# TaxFeeTemplate typedef
type TaxFeeTemplate {
  #
  id: Int

  # Name of template
  name: String!

  #
  description: String

  # Taxes and Fees associated to a template in order
  taxesFees: [TaxesFeesInTemplate!]

  # The properties this template has been applied to
  properties: [Property!]

  # Number of properties this template is applied to
  propertiesCount: Int

  #
  propertyAddress: PropertyAddress
}

# TaxesFeesInTemplate typedef
type TaxesFeesInTemplate {
  # Order that taxes and fees apply in - 0 is first
  order: Int!

  #
  createdAt: LodgeLinkDate

  #
  createdBy: Identity

  #
  updatedAt: LodgeLinkDate

  #
  updatedBy: Identity

  #
  deletedAt: LodgeLinkDate

  #
  deletedBy: Identity

  #
  taxFee: TaxFee!
}

# TaxFee typedef
type TaxFee {
  #
  id: Int!

  # Name of tax or fee
  name: String!

  # The tax/fee amount
  amount: Float!

  # Percent or Flat
  taxFeeType: TaxFeeType!

  # Tax vs Fee
  category: TaxFeeCategory!

  #
  appliedTo: TaxFeeAppliedTo!

  #
  calculatedOn: TaxFeeCalculatedOn!

  #
  maxDays: Int

  #
  description: String

  # A boolean to indicate if a taxfee is currently on a template
  isAppliedToTemplate: Boolean

  #
  taxFeeCode: String

  #
  itemCodes: [SAPItemCode!]

  #
  jurisdiction: LocationJurisdiction

  #
  country: LodgeLinkCountry

  #
  region: LodgeLinkRegion

  #
  county: County

  #
  location: LodgeLinkLocation

  #
  property: Property

  #
  effectiveDate: LodgeLinkDate

  #
  expiryDate: LodgeLinkDate
}

#
enum TaxFeeType {
  #
  Percent

  #
  Flat
}

#
enum TaxFeeCategory {
  #
  Tax

  #
  FlatFee

  #
  CreditCardFee

  #
  PerDayFee
}

#
enum TaxFeeAppliedTo {
  #
  Cost

  #
  Revenue

  #
  Both
}

#
enum TaxFeeCalculatedOn {
  #
  RoomRateTotal

  #
  RunningTotal

  #
  RoomRateFees
}

# SAPItemCode Typedef
type SAPItemCode {
  #
  id: Int!

  #
  country: String

  #
  propertyType: PropertyType

  #
  itemType: LineItemType

  #
  property: Property

  #
  taxFee: TaxFee

  #
  itemCode: String

  #
  taxExempt: Boolean

  #
  updatedAt: DateTime

  #
  createdAt: DateTime

  #
  updatedBy: Identity

  #
  createdBy: Identity
}

#
enum LineItemType {
  #
  RoomCharge

  #
  Tax

  #
  Fee

  #
  Miscellaneous

  #
  BankCharge

  #
  VccCharge
}

#
scalar DateTime

#
enum LocationJurisdiction {
  #
  Federal

  #
  StateProvincial

  #
  County

  #
  City

  #
  Property
}

#
type LodgeLinkCountry {
  #
  id: Int!

  #
  name: String!

  #
  abbreviation: String
}

# Region typedef
# A Region used somewhere in Lodgelink
type LodgeLinkRegion {
  #
  id: Int!

  # Name of the Region
  name: String!

  # Country the region is located
  country: String

  # Abbreviation of Region
  regionAbbreviation: String

  # Abbreviation of Country
  countryAbbreviation: String
}

# Customer typedef
# Defines a Customer and their information.
type Customer {
  #
  id: Int!

  #
  industry: String!

  #
  annualAccommodationExpense: String!
}

#
enum Industry {
  #
  AGRICULTURE

  #
  CONSTRUCTION_COMMERCIAL_INDUSTRIAL

  #
  CONSTRUCTION_RESIDENTIAL

  #
  CONSUMER_SERVICES_DISCRETIONARY_EXCL_TRAVEL_MGMT

  #
  CONSUMER_SERVICES_STAPLES

  #
  DEFENSE_NAVAL_BASES_AIR_FORCE_BASES_ARMY_BASES

  #
  EDUCATION_PRIVATE

  #
  EDUCATION_PUBLIC

  #
  ENERGY_CLEAN_AND_RENEWABLE

  #
  HEALTHCARE_EMERGENCY_RESPONSE_AND_SOCIAL_SERVICES

  #
  INDIGENOUS

  #
  INFORMATION_AND_PROFESSIONAL_SERVICES_EXCL_TRAVEL_MGMT

  #
  INTERNAL_PROJECT

  #
  MANUFACTURING

  #
  MINING_COAL

  #
  MINING_METALS_GOLD_COPPER_SILVER_IRON

  #
  MINING_NON_METALS_EXCL_COAL

  #
  OIL_AND_GAS_DOWNSTREAM_REFINERIES_PETROCHEMICALS

  #
  OIL_AND_GAS_MIDSTREAM_INFRASTRUCTURE_PIPELINES_FACILITIES

  #
  OIL_AND_GAS_UPSTREAM_DRILLING_AND_COMPLETIONS

  #
  OTHER_GOVERNMENT_EXCL_EDUCATION_HEALTHCARE_INDIGENOUS

  #
  OTHER_MINING

  #
  TRANSPORTATION_AND_WAREHOUSING

  #
  TRAVEL_MANAGEMENT

  #
  UTILITIES

  #
  OTHER
}

#
enum AnnualAccommodationExpense {
  #
  UNDER_ONEHUNDREDTHOUSAND

  #
  ONEHUNDREDTHOUSAND_TO_TWOHUNDREDFIFTYTHOUSAND

  #
  TWOHUNDREDFIFTYTHOUSAND_TO_FIVEHUNDREDTHOUSAND

  #
  FIVEHUNDREDTHOUSAND_TO_SEVENHUNDREDFIFTYTHOUSAND

  #
  SEVENHUNDREDFIFTYTHOUSAND_TO_ONEMILLION

  #
  ONEMILLION
}

#
enum CompanySize {
  #
  ONE_TO_FOUR

  #
  FIVE_TO_NINE

  #
  TEN_TO_NINETEEN

  #
  TWENTY_TO_FOURTYNINE

  #
  FIFTY_TO_NINETYNINE

  #
  ONEHUNDRED_TO_TWOFOURTYNINE

  #
  TWOHUNDREDFIFTY_TO_FOURNINETYNINE

  #
  FIVEHUNDRED_TO_NINENINETYNINE

  #
  OVER_ONETHOUSAND
}

# Booking typedef
# Bookings
type Booking {
  # ID of Booking
  id: Int!

  # Booking Number, 10 alphanumeric characters, unique
  bookingNumber: String!

  # Property booking is under
  property: Property!

  # Summary of booking by room type
  summaryByRoomType: [BookingRoomSummary]

  # Taxes and fees
  taxesAndFees: [BookingFee!]

  #
  estimatedSubtotal: Currency

  #
  estimatedTaxesFees: Currency

  # Estimated total
  estimatedTotal: Currency

  # Estimated savings will be est rac - est inbound
  estimatedSavings: Currency

  #
  actualSubtotal: Currency

  #
  actualTaxesFees: Currency

  # Actual total
  actualTotal: Currency

  # Check-in date
  checkin: LodgeLinkDate!

  # Check-out date
  checkout: LodgeLinkDate!

  #
  guests: [BookingGuest!]

  # Special requests
  specialRequests: String

  # Confirmation number of booking
  confirmationNumber: String

  # Payment Method - Credit, LodgeLink Code, etc.
  paymentMethod: PaymentMethod

  # Status of booking from LodgeLinks POV
  bookingStatus: BookingStatus!

  # Confirmation Message
  confirmationMessage: String

  # PNR/GNR Message
  pnrLocator: String

  # Cancellation status
  cancellationStatus: BookingCancellationStatus

  # Cancellation Message
  cancellationMessage: String

  # Cancellation Date
  cancellationDate: LodgeLinkDate

  # Rejection Reason
  rejectionReason: RejectionReason

  # This is the code that's used if this booking is paid by a Payment Code
  paymentCode: PaymentCode

  #
  cardSource: CardSource

  # Is the user a supervisor?
  supervisor: Boolean

  #
  guestCount: Int

  #
  maxGuest: Int

  #
  crewSwapOccupancy: Int

  #
  maxDays: Int

  #
  guestDayCount: Int

  #
  roomCount: Int

  #
  owner: MaskedIdentity

  # For a booking, what permissions does the user have at current moment
  permissions: [BookingPermission!]

  #
  organization: OrganizationCondensed

  #
  canBeConnected: Boolean

  #
  connected: Boolean!

  #
  bookingOrigin: String

  #
  isLNROverrideActive: Boolean!

  # To be able to denote admin created booking when impersonating a user
  createdBy: Identity

  # Tax Template applied on Booking
  taxTemplate: String

  #
  travelRequestType: String

  #
  folio: [Folio]

  #
  folioCount: Int

  #
  previousBookingId: Int

  #
  bookingBypassReason: BookingBypassReasonResponse

  # To be able to filter out supported providers for adding card MCC
  vccProvider: VccProvider

  # Used to flag time zone conversion for booking props in customer portal
  timeZoneFlag: Boolean

  # Category of booking
  bookingCategory: BookingCategory
}

# BookingRoomSummary typedef
# Summary by room types
type BookingRoomSummary {
  #
  id: Int!

  #
  numberOfNights: Int!

  #
  numberOfRooms: Int!

  #
  roomName: String!

  #
  roomTypePrice: Currency

  #
  dates: [BookingRoomDate!]
}

# BookingRoomDate typedef
# Date from BookingRoom
type BookingRoomDate {
  #
  date: LodgeLinkDate!

  #
  breakdown: BookingRoomDateBreakdown!
}

# BookingRoomDateBreakdown typedef
# A day from a guest of the booking
type BookingRoomDateBreakdown {
  #
  totalRooms: Int!

  #
  bookedRooms: Int!

  #
  bookedRate: Currency!

  #
  standByRooms: Int!

  #
  standByRate: Currency!

  #
  allRatesForThisDate: [Float!]
}

# BookingFee typedef
# Taxes and Fees for BookingFee
type BookingFee {
  #
  currency: Currency!

  #
  name: String!

  #
  percentage: Float!
}

# BookingGuest typedef
# A guest of a booking
type BookingGuest {
  #
  id: Int!

  #
  identityId: Int

  # Has the guest been assigned?
  assigned: Boolean!

  #
  firstName: String

  #
  lastName: String

  #
  fullName: String

  #
  supervisor: Boolean

  # Required if guest is a supervisor
  phone: String

  # Required if guest is a supervisor
  emailAddress: EmailAddress

  #
  room: Room!

  #
  guestDays: [BookingGuestDay!]

  #
  nightShift: Boolean!

  #
  company: String

  #
  position: String

  #
  referenceNumber: String

  #
  complete: Boolean!

  #
  comments: String

  #
  roomIndex: Int

  #
  organization: Organization

  #
  booking: Booking

  #
  isCrewSwap: Boolean
}

# BookingGuestDay typedef
# A day from a guest of the booking
type BookingGuestDay {
  #
  id: Int!

  #
  date: LodgeLinkDate!

  #
  inboundRate: Currency!

  #
  markup: Currency!

  #
  taxes: Currency

  #
  fees: Currency

  #
  margin: Int!

  # Estimated savings will be rac - inbound
  estimatedSavings: Currency

  #
  costTrackingCodeId: Int

  #
  costTrackingCode: CostTrackingCode

  #
  status: BookingGuestDayStatus!

  #
  state: BookingGuestDayState

  #
  cancellationState: CancellationState

  #
  cancellationReason: String

  #
  reconciledBy: Identity

  #
  reconciledAt: LodgeLinkDate

  #
  bookingGuest: BookingGuest

  #
  exceptionDescription: String

  #
  chargesheet: Chargesheet

  #
  outboundRate: Currency
}

# CostTrackingCode typedef
# LodgeLink Cost Tracking Codes
type CostTrackingCode {
  #
  id: Int!

  #
  code: String!

  #
  createdAt: LodgeLinkDate!

  #
  description: String

  #
  active: Boolean!

  #
  expiryDate: LodgeLinkDate

  #
  organization: OrganizationCondensed
}

#
enum BookingGuestDayStatus {
  #
  Booked

  #
  Vacant

  #
  Expected

  #
  EarlyCheckIn

  #
  BeforeExpected

  #
  LateCheckIn

  #
  EarlyLastDay

  #
  PastExpected

  #
  LateLastDay

  #
  NoShow

  #
  StandBy
}

#
enum BookingGuestDayState {
  #
  Draft

  #
  Rejected

  #
  Removed

  #
  Unconfirmed

  #
  Unreconciled

  #
  ReconciledCheckpoint

  #
  Reconciled

  #
  ReconciledNoShow

  #
  ReconciledLoss

  #
  ReconciledCancelled

  #
  ReconciledException

  #
  ChargeReady

  #
  ChargeSent

  #
  ChargeApproved

  #
  ChargeDisputed

  #
  InvoiceReady

  #
  InvoiceSent

  #
  InvoicePaid

  #
  InvoiceDisputed

  #
  BookingRejected
}

#
enum CancellationState {
  #
  Duplicates

  #
  EarlyCheckOut

  #
  LateCheckIn

  #
  CustomerCardCharged

  #
  Other
}

# Chargesheet typedef
# Defines a Chargesheet and their information.
type Chargesheet {
  #
  id: Int!

  #
  createdAt: DateTime

  #
  chargeSheetNumber: String

  #
  creditCardLastFourDigits: String

  #
  paymentCode: String

  #
  paymentId: String

  #
  payingClient: ChargesheetPayingClient

  #
  property: Property

  #
  dates: [LodgeLinkDate!]

  #
  totals: ChargesheetTotals

  #
  roomsPerDay: [ChargesheetRoomPerDay!]

  #
  contractors: [ChargesheetContractor!]

  #
  status: ChargesheetStatus

  #
  chargesheetNotes: String

  #
  creditCard: Boolean

  #
  bookingOwners: String

  #
  costTrackingCodes: [ChargesheetCostTrackingCode!]

  #
  invoice: Invoice

  #
  exportedAt: DateTime

  #
  exportedBy: SystemUser

  #
  incidentals: [Incidental]
}

# ChargesheetPayingClient typedef
type ChargesheetPayingClient {
  #
  address: String

  #
  name: String

  #
  emailAddress: EmailAddress
}

# ChargesheetTotals typedef
type ChargesheetTotals {
  #
  roomNightCount: Int

  #
  lineItemsCount: Int

  #
  totalCredit: Currency

  #
  totalDebit: Currency

  #
  subtotal: Currency

  #
  gst: Currency

  #
  ccFee: Currency

  #
  otherFees: Currency

  #
  total: Currency
}

# ChargesheetRoomPerDay typedef
type ChargesheetRoomPerDay {
  #
  date: LodgeLinkDate!

  #
  rooms: Int!
}

# ChargesheetContractor typedef
type ChargesheetContractor {
  #
  orgId: Int!

  #
  name: String

  #
  roomTypes: [ChargesheetRoomType!]

  #
  roomsPerDay: [ChargesheetRoomPerDay!]
}

# ChargesheetRoomType typedef
type ChargesheetRoomType {
  #
  type: String

  #
  days: Int

  #
  customerDays: Int

  #
  internalDays: Int

  #
  rooms: [ChargesheetRoom!]
}

# ChargesheetRoom typedef
type ChargesheetRoom {
  #
  id: Int

  #
  displayName: String

  #
  state: BookingGuestDayState

  #
  company: String

  #
  days: Int

  #
  sharedId: String!

  #
  ratesPerDay: [ChargesheetDateRate!]

  #
  guests: [ChargesheetGuest!]

  #
  roomIndex: Int
}

# ChargesheetDateRate typedef
type ChargesheetDateRate {
  #
  date: LodgeLinkDate!

  #
  state: BookingGuestDayState

  #
  rate: Currency
}

# ChargesheetGuest typedef
type ChargesheetGuest {
  #
  id: Int

  #
  firstName: String

  #
  lastName: String

  #
  guestDays: [LodgeLinkDate!]

  #
  roomIndex: Int
}

#
enum ChargesheetStatus {
  #
  Draft

  #
  Sent

  #
  Approved

  #
  Cancelled

  #
  Archived

  #
  Invoiced

  #
  Paid

  #
  ReadyToInvoice

  #
  Disputed

  #
  Exception
}

# ChargesheetCostTrackingCode typedef
type ChargesheetCostTrackingCode {
  #
  date: LodgeLinkDate!

  #
  id: Int

  #
  code: String
}

# Invoice typedef
# An Invoice
type Invoice {
  #
  id: Int!

  #
  invoiceNumber: String

  #
  createdAt: DateTime

  #
  updatedAt: DateTime

  #
  deleatedAt: DateTime

  #
  chargesheets: [Chargesheet!]
}

# SystemUser typedef
# Defines a SystemUser for admins
type SystemUser {
  # Identity id
  id: Int

  #
  firstName: String

  #
  lastName: String

  #
  emailAddress: EmailAddress

  #
  phoneNumber: String

  #
  company: String

  #
  position: String

  # Date the user joined
  dateJoined: DateTime

  #
  lastLogin: DateTime

  #
  customers: [CustomerInfo!]

  #
  suppliers: [SupplierInfo!]

  #
  currentOrganizationName: String
}

# CustomerInfo typedef
# Defines a Customer and their information.
type CustomerInfo {
  #
  id: Int!

  #
  name: String!

  #
  domainSuffix: String!

  #
  primaryEmailAddress: String!

  #
  bookingCount: Int

  #
  adminCount: Int

  #
  status: String

  #
  autoApproveMembers: Boolean

  #
  riskRating: RiskRating
}

#
enum RiskRating {
  #
  LOW

  #
  MEDIUM

  #
  HIGH
}

# Supplier typedef
# Defines an Supplier and their information.
type SupplierInfo {
  #
  id: Int!

  #
  name: String!

  #
  domainSuffix: String!

  #
  primaryEmailAddress: String!

  #
  brand: String

  #
  properties: [Property!]

  #
  propertyCount: Int

  #
  adminCount: Int

  #
  defaultMarkup: Int
}

#
type Incidental {
  #
  lineItem: LineItem

  #
  date: LodgeLinkDate!

  #
  guestName: String

  #
  description: IncidentalCategory

  #
  inbound: Currency!

  #
  outbound: Currency!

  #
  markup: Currency!

  #
  tax: Currency!

  #
  fees: Currency!

  #
  state: String
}

#
type LineItem {
  #
  id: Int

  #
  group: LineItemGroup

  #
  parent: LineItem

  #
  children: [LineItem!]

  #
  guestDays: [BookingGuestDay!]

  #
  order: Int

  #
  bookingGuestIds: [Int!]!

  #
  date: LodgeLinkDate!

  #
  type: LineItemType!

  #
  description: String

  #
  debit: Float

  #
  credit: Float

  #
  currencyCode: CurrencyCode!

  #
  taxFee: TaxFee
}

#
type LineItemGroup {
  #
  id: Int!

  #
  folio: Folio

  #
  lineItems: [LineItem!]

  #
  vcc: VCC
}

#
type Folio {
  #
  id: Int

  #
  amount: String

  #
  cardNumber: String

  #
  checkin: LodgeLinkDate

  #
  checkout: LodgeLinkDate

  #
  booking: Booking

  #
  bookingGuests: [BookingGuest!]

  #
  fileName: String

  #
  filePath: String

  #
  fileExt: String

  #
  status: FolioStatus

  #
  source: String

  #
  sourceEmail: String

  #
  description: String

  #
  createdBy: Identity

  #
  createdAt: DateTime

  #
  updatedBy: Identity

  #
  updatedAt: DateTime

  #
  deletedBy: Identity

  #
  deletedAt: DateTime

  #
  metadata: String

  #
  folioCharges: [FolioCharge!]

  #
  lineItemGroup: LineItemGroup

  #
  lockedForEditing: Boolean
}

#
enum FolioStatus {
  #
  NeedsReview

  #
  New

  #
  Processing

  #
  ReadyToReconcile

  #
  Reconciled

  #
  Rejected

  #
  ReconciledException
}

#
type FolioCharge {
  #
  id: Int

  #
  folio: Folio

  #
  date: LodgeLinkDate!

  #
  cardNumber: String!

  #
  amount: Currency!

  #
  provider: String
}

# Virtual Credit Card typedef
type VCC {
  # id
  id: Int

  # Booking ID
  bookingId: Int

  # VCC provider's card ID
  providerCardId: Int

  # VCC Status
  blocked: Boolean

  # Amount
  amount: Currency

  # Card Number
  cardNumber: String

  # Last Four Digits of Virtual Card
  lastFour: String

  # CVCs
  cvc2: String

  # Expiration Date
  expirationMMYY: String

  # First Name
  firstName: String

  # Last Name
  lastName: String

  # Number of Transactions
  numberOfTransactions: Int

  # Created Date
  createdDate: LodgeLinkDate

  # Available Balance
  availableBalance: Currency

  # Provider
  provider: VccProvider

  # Incidentals
  acceptsIncidentals: Boolean

  # Currency
  currency: CurrencyCode

  # Azure Key Name
  keyName: String

  # Card Delivery Status
  cardDeliveryStatus: CardDeliveryStatus

  # Booking Number
  bookingNumber: String
}

#
enum VccProvider {
  #
  CSI

  #
  DC_BANK

  #
  CONFERMA
}

#
enum CurrencyCode {
  #
  ADP

  #
  AED

  #
  AFA

  #
  AFN

  #
  ALK

  #
  ALL

  #
  AMD

  #
  ANG

  #
  AOA

  #
  AOK

  #
  AON

  #
  AOR

  #
  ARA

  #
  ARP

  #
  ARS

  #
  ARY

  #
  ATS

  #
  AUD

  #
  AWG

  #
  AYM

  #
  AZM

  #
  AZN

  #
  BAD

  #
  BAM

  #
  BBD

  #
  BDT

  #
  BEC

  #
  BEF

  #
  BEL

  #
  BGJ

  #
  BGK

  #
  BGL

  #
  BGN

  #
  BHD

  #
  BIF

  #
  BMD

  #
  BND

  #
  BOB

  #
  BOP

  #
  BOV

  #
  BRB

  #
  BRC

  #
  BRE

  #
  BRL

  #
  BRN

  #
  BRR

  #
  BSD

  #
  BTN

  #
  BUK

  #
  BWP

  #
  BYB

  #
  BYN

  #
  BYR

  #
  BZD

  #
  CAD

  #
  CDF

  #
  CHC

  #
  CHE

  #
  CHF

  #
  CHW

  #
  CLF

  #
  CLP

  #
  CNY

  #
  COP

  #
  COU

  #
  CRC

  #
  CSD

  #
  CSJ

  #
  CSK

  #
  CUC

  #
  CUP

  #
  CVE

  #
  CYP

  #
  CZK

  #
  DDM

  #
  DEM

  #
  DJF

  #
  DKK

  #
  DOP

  #
  DZD

  #
  ECS

  #
  ECV

  #
  EEK

  #
  EGP

  #
  ERN

  #
  ESA

  #
  ESB

  #
  ESP

  #
  ETB

  #
  EUR

  #
  FIM

  #
  FJD

  #
  FKP

  #
  FRF

  #
  GBP

  #
  GEK

  #
  GEL

  #
  GHC

  #
  GHP

  #
  GHS

  #
  GIP

  #
  GMD

  #
  GNE

  #
  GNF

  #
  GNS

  #
  GQE

  #
  GRD

  #
  GTQ

  #
  GWE

  #
  GWP

  #
  GYD

  #
  HKD

  #
  HNL

  #
  HRD

  #
  HRK

  #
  HTG

  #
  HUF

  #
  IDR

  #
  IEP

  #
  ILP

  #
  ILR

  #
  ILS

  #
  INR

  #
  IQD

  #
  IRR

  #
  ISJ

  #
  ISK

  #
  ITL

  #
  JMD

  #
  JOD

  #
  JPY

  #
  KES

  #
  KGS

  #
  KHR

  #
  KMF

  #
  KPW

  #
  KRW

  #
  KWD

  #
  KYD

  #
  KZT

  #
  LAJ

  #
  LAK

  #
  LBP

  #
  LKR

  #
  LRD

  #
  LSL

  #
  LSM

  #
  LTL

  #
  LTT

  #
  LUC

  #
  LUF

  #
  LUL

  #
  LVL

  #
  LVR

  #
  LYD

  #
  MAD

  #
  MDL

  #
  MGA

  #
  MGF

  #
  MKD

  #
  MLF

  #
  MMK

  #
  MNT

  #
  MOP

  #
  MRO

  #
  MRU

  #
  MTL

  #
  MTP

  #
  MUR

  #
  MVQ

  #
  MVR

  #
  MWK

  #
  MXN

  #
  MXP

  #
  MXV

  #
  MYR

  #
  MZE

  #
  MZM

  #
  MZN

  #
  NAD

  #
  NGN

  #
  NIC

  #
  NIO

  #
  NLG

  #
  NOK

  #
  NPR

  #
  NZD

  #
  OMR

  #
  PAB

  #
  PEH

  #
  PEI

  #
  PEN

  #
  PES

  #
  PGK

  #
  PHP

  #
  PKR

  #
  PLN

  #
  PLZ

  #
  PTE

  #
  PYG

  #
  QAR

  #
  RHD

  #
  ROK

  #
  ROL

  #
  RON

  #
  RSD

  #
  RUB

  #
  RUR

  #
  RWF

  #
  SAR

  #
  SBD

  #
  SCR

  #
  SDD

  #
  SDG

  #
  SDP

  #
  SEK

  #
  SGD

  #
  SIT

  #
  SKK

  #
  SLL

  #
  SOS

  #
  SRD

  #
  SRG

  #
  SSP

  #
  STD

  #
  STN

  #
  SUR

  #
  SVC

  #
  SYP

  #
  SZL

  #
  THB

  #
  TJR

  #
  TJS

  #
  TMM

  #
  TMT

  #
  TND

  #
  TOP

  #
  TPE

  #
  TRL

  #
  TRY

  #
  TTD

  #
  TWD

  #
  UAH

  #
  UAK

  #
  UGS

  #
  UGW

  #
  UGX

  #
  USD

  #
  USN

  #
  USS

  #
  UYI

  #
  UYN

  #
  UYP

  #
  UYU

  #
  UYW

  #
  UZS

  #
  VEB

  #
  VEF

  #
  VES

  #
  VNC

  #
  VND

  #
  VUV

  #
  WST

  #
  YER

  #
  YUD

  #
  YUM

  #
  YUN

  #
  ZAL

  #
  ZAR

  #
  ZMK

  #
  ZMW

  #
  ZRN

  #
  ZRZ

  #
  ZWC

  #
  ZWD

  #
  ZWL

  #
  ZWN

  #
  ZWR
}

#
enum CardDeliveryStatus {
  #
  available

  #
  utilized
}

#
enum IncidentalCategory {
  #
  AdditionalCleaningCharges

  #
  BookingChangeFee

  #
  CasesOfWater

  #
  DataInternetFee

  #
  EarlyCheckInFee

  #
  EarlyCheckOutFee

  #
  LateCheckOutFee

  #
  Laundry

  #
  MealsAndEntertainment

  #
  MeetingRoom

  #
  Other

  #
  Parking

  #
  PetFee

  #
  PropertyDamage

  #
  UtilityFee
}

#
enum PaymentMethod {
  #
  CreditCard

  #
  PaymentCode
}

#
enum BookingStatus {
  #
  Incomplete

  #
  Draft

  #
  Pending

  #
  Confirmed

  #
  DraftEdit

  #
  EditedAfterConfirmed

  #
  CancelledAfterEdited

  #
  Error

  #
  BookingInProgress

  #
  BookingComplete

  #
  Cancelled

  #
  Reconciled

  #
  Rejected

  #
  Expired
}

# BookingCancellationStatus typedef
type BookingCancellationStatus {
  #
  cancellationMessage: String!

  #
  cancelledBy: String!
}

#
enum RejectionReason {
  #
  SOLD_OUT

  #
  ROOMS_UNAVAILABLE

  #
  BOOKING_RESTRICTIONS_NOT_MET

  #
  BLACKED_OUT

  #
  OTHER
}

# PaymentCode typedef
# LodgeLink Payment Codes
type PaymentCode {
  #
  id: Int!

  #
  code: String!

  #
  createdAt: LodgeLinkDate!

  #
  description: String

  #
  active: Boolean!

  #
  expiryDate: LodgeLinkDate

  #
  lastUsed: LodgeLinkDate

  #
  sharedCount: Int!

  #
  identities: [PaymentCodeSharedIdentity!]

  #
  organization: OrganizationCondensed

  #
  isInActiveBookings: Boolean

  #
  activeBookingsCount: Int
}

# PaymentCodeSharedIdentity typedef
type PaymentCodeSharedIdentity {
  #
  id: Int!

  #
  firstName: String

  #
  lastName: String

  #
  company: String

  #
  position: String

  #
  phone: String

  #
  emailAddress: EmailAddress

  # This user is currently using a Payment Code
  isInActiveBooking: Boolean
}

# CardSource typedef
type CardSource {
  #
  source: String!

  #
  cardNickname: String

  #
  cardholderName: String

  #
  lastFourDigits: String!

  #
  expiry: String!

  #
  address: String

  #
  unitNumber: String

  #
  city: String

  #
  province: String

  #
  postalCode: String

  #
  expired: Boolean
}

# MaskedIdentity typedef
# For getting an identity by email
type MaskedIdentity {
  #
  id: Int!

  #
  firstName: String

  #
  lastName: String

  #
  company: String

  #
  position: String

  #
  phone: String

  #
  emailAddress: EmailAddress

  #
  active: Boolean
}

#
enum BookingPermission {
  #
  ADD_GUEST

  #
  EDIT_GUEST_CHANGE_ROOM

  #
  SET_GUEST_UNKNOWN

  #
  EDIT_GUEST_CHANGE_SHARE

  #
  EDIT_GUEST_INFORMATION

  #
  FINALIZE_BOOKING

  #
  REMOVE_GUEST

  #
  SELECT_BOOKING_DATES

  #
  SET_CREW_SCHEDULE

  #
  SET_GUEST_SCHEDULE

  #
  SUBMIT_PAYMENT

  #
  SPECIAL_REQUEST

  #
  CANCEL_BOOKING

  #
  ADMIN_NO_DATE_RESTRICTIONS
}

# BookingBypassReasonResponse typedef
type BookingBypassReasonResponse {
  #
  id: Int!

  #
  bypassReason: String!
}

#
enum BookingCategory {
  #
  Block

  #
  Standard
}

# OrganizationDutyOfCareSettings typedef
type OrganizationDutyOfCareSettings {
  #
  subscriptionStatus: Boolean!

  #
  primaryContactName: String

  #
  primaryContactEmail: EmailAddress
}

#
enum OrganizationStatus {
  #
  PendingApproval

  #
  Declined

  #
  Active

  #
  Disabled

  #
  Inactive
}

# FeatureFlagMapping typedef
# FeatureFlagMappings
type FeatureFlagMapping {
  # Flag Id
  id: Int!

  # Feature Flag
  featureFlag: FeatureFlag

  # Feature status (Active[true]/Inactive[false])
  active: Boolean!

  # Organization
  organization: Organization
}

# FeatureFlag typedef
# FeatureFlags
type FeatureFlag {
  # Flag Id
  id: Int!

  # Feature name
  featureName: String!

  # Feature Description
  description: String

  # Feature status (Active[true]/Inactive[false])
  active: Boolean!

  # Organizations
  organizationMappings: [FeatureFlagMapping]

  # Unique Feature name
  featureIdentifier: FeatureFlagEnum!
}

#
enum FeatureFlagEnum {
  #
  FLAG_DATE_SNAKE

  #
  FLAG_BOOK_MGMT

  #
  FLAG_DEMO_ONE

  #
  FLAG_CREW_SWAP

  #
  FLAG_PAG_BOOKINGS

  #
  FLAG_TIME_ZONE_MGMT

  #
  FLAG_CREW_MGMT

  #
  FLAG_RATE_MGMT

  #
  FLAG_CREW_ROLE_MGMT
}

#
enum Tier {
  #
  TIER_1

  #
  TIER_2

  #
  TIER_3
}

#
type Note {
  #
  id: Int

  # The title of the Note
  name: String

  # The HTML body of the Note
  body: String

  # The Customer that this Note applies to
  organization: Organization

  #
  createdBy: Identity!

  #
  createdAt: LodgeLinkDate!

  #
  updatedBy: Identity

  #
  updatedAt: LodgeLinkDate
}

#
enum UniqueCrewIdentifier {
  #
  EmailAddress

  #
  EmployeeID
}

# OrganizationUsers typedef
type OrganizationUsers {
  #
  primaryContacts: [OrganizationMember!]

  #
  members: [OrganizationMember!]

  #
  invites: [OrganizationMember!]
}

# OrganizationMember typedef
# Defines an OrganizationMember
type OrganizationMember {
  # The org role id
  id: Int!

  # If this user has an identity
  identityId: Int

  #
  patronId: Int

  #
  primaryContact: Boolean!

  #
  firstName: String

  #
  lastName: String

  #
  emailAddress: EmailAddress

  #
  active: Boolean

  #
  phoneNumber: String

  #
  company: String

  #
  position: String

  #
  supervisor: Boolean

  # Member vs Invited
  membershipType: MembershipType

  #
  role: [RoleName!]

  # Can work as the invited date if membershipType = Invited
  dateInvited: LodgeLinkDate
}

#
enum RoleName {
  #
  OrganizationAdmin

  #
  BookingManager

  #
  CustomerAdmin

  #
  CustomerManager

  #
  CrewMember

  #
  CrewSelfBooker

  #
  CrewBooker
}

#
enum OrganizationCreditAppStatus {
  #
  ACTIVE

  #
  PENDING

  #
  NONE
}

# AdminToken typedef
type AdminToken {
  # Action to take
  action: String

  # Specialized Admin token
  tokenId: String

  #
  expiry: LodgeLinkDate

  # Target Organization to act as
  organization: Organization

  #
  identityOnBehalf: Identity
}

# UserJoinRequest typedef
type UserJoinRequest {
  # id of the user
  userId: Int!

  #
  user: MaskedIdentity

  #
  requestStatus: UserRequestStatus!

  # Name of the organization provided by user in a free text
  userRequestedOrganizationName: String

  #
  requestedOrganizationId: Int

  #
  requestedOrganization: Organization
}

#
enum UserRequestStatus {
  #
  PendingOrgAssign

  #
  PendingApproval

  #
  DeclineByOrganizationAdmin

  #
  DeclineByLodgeLinkAdmin

  #
  Approved

  #
  AutoApproved
}

# MaskedPatron typedef
# For getting a patron by employee id
type MaskedPatron {
  #
  id: Int

  #
  firstName: String

  #
  lastName: String

  #
  employeeId: String

  #
  phone: String
}

# UserOnboardingOptions typedef
type UserOnboardingOptions {
  #
  isPrivateDomain: Boolean

  #
  suggestedOrganizations: [OrganizationSettings!]
}

# Organization typedef
# Defines an Organization and their information.
type OrganizationSettings {
  #
  id: Int!

  # Domain suffix of organization
  domainSuffix: String!

  # Name of the Organization.
  name: String!

  #
  primaryBusinessAddress: Address

  #
  billingAddress: Address

  #
  slug: String!

  # Is this property a stub?
  stub: Boolean!

  #
  masterServiceAgreement: MasterServiceAgreement

  #
  creditApplication: CreditApplication

  #
  emailAddress: EmailAddress!

  #
  invites: [OrganizationMember!]

  #
  administrators: [OrganizationMember!]

  #
  members: [OrganizationMember!]

  # Size of the Organization
  companySize: CompanySize

  # Industry of the Customer
  industry: Industry

  # Customer Annual Accommodation Expense
  annualAccommodationExpense: AnnualAccommodationExpense

  #
  dutyOfCareSettings: OrganizationDutyOfCareSettings

  #
  status: OrganizationStatus

  #
  autoApproveMembers: Boolean

  #
  trackingCodesRequired: Boolean

  # Unique Crew Identifier of the Organization
  uniqueCrewIdentifier: String
}

# OrganizationCreationStatus typedef
type OrganizationCreationStatus {
  #
  canOrganizationBeCreated: Boolean!

  #
  domainSuffix: String!

  #
  organizationName: String
}

# Token typedef
# Tokens generated from requests that need it
type Token {
  # ID of the token
  tokenId: String

  # Does this token need 2FA?
  secured: Boolean!

  # The action the token is doing, e.g. CreditApplication, ResetPassword
  action: TokenAction

  # The id of whatever they're hitting - e.g. the IdentityId for ResetPassword, or the CreditApplicationId
  payload: String

  # When this token expires
  expiration: DateTime

  # Has this token been claimed already
  claimed: Boolean!

  # The identity this token was sent to
  targetIdentity: Identity

  # A 2FA session Id
  sessionId: String
}

#
enum TokenAction {
  #
  CreditApplication

  #
  CreateOrganization

  #
  InviteUsers

  #
  CreateBooking

  #
  ModifyBooking

  #
  ShareDirections

  #
  ResetPassword

  #
  VerifyPasscode

  #
  CreateAccount

  #
  AdminAction
}

#
type InviteUsersResponse implements MutationResponse {
  #
  message: String!

  # These users are now invited to the organization
  usersInvited: [EmailAddress]

  # These users were already members
  userErrors: [EmailAddress]

  # These users had requested to join, so are now members
  userMembers: [EmailAddress]
}

# MutationResponse - An interface for what a mutation response should look like
interface MutationResponse {
  # The outcome of the mutation
  message: String!
}

# CheckinCheckout input
input CheckinCheckout {
  #
  checkin: LodgeLinkDate!

  #
  checkout: LodgeLinkDate!
}

# GetLocaleByIdInput typedef
input GetLocaleByIdInput {
  #
  orgId: Int

  #
  localeId: Int
}

# Room Template typedef
type RoomTemplate {
  #
  id: Int

  # Name of the room template
  name: String

  # Currency information
  currency: String

  # Max capacity of a room
  maxOccupancy: Int

  # Description of the template
  description: String
}

# Layer typedef
type Layer {
  #
  id: Int!

  # Name of Layer
  name: String!

  # Description of Layer
  description: String

  # Icon of Layer
  icon: String

  # Is this layer active on Map
  active: Boolean
}

# Search Suggestions Typedef
type SearchSuggestions {
  # Suggested Patterns of Search Suggestions
  suggestedPatterns: [SuggestedPattern]

  # Suggested Locations of Search Suggestions
  suggestedLocations: [SuggestedLocation]
}

# Suggested Pattern Typedef
type SuggestedPattern {
  # Name of Suggested Pattern
  patternName: String!

  # Description of Suggested Pattern
  patternDescription: String!

  # Type of Suggested Pattern
  locationType: SearchLocationType!
}

#
enum SearchLocationType {
  #
  Address

  #
  Location

  #
  LatLng

  #
  Property

  #
  LSD

  #
  NTS

  #
  UWI

  #
  Tag

  #
  PointOfInterest

  #
  ZipOrPostalCode
}

# Suggested Location Typedef
type SuggestedLocation {
  # Text of Suggested Location
  locationText: String!

  # Type of Suggested Location
  locationType: SearchLocationType!

  # Value of Suggested Location
  locationValue: String!
}

# PropertySearchInput input
input PropertySearchInput {
  # Checkin search parameter of the PropertySearchInput
  checkin: String

  # Checkout search parameter of the PropertySearchInput
  checkout: String

  # Number of Rooms search parameter of the PropertySearchInput
  numberRooms: Int

  # SearchLocationType of search
  searchType: SearchLocationType

  # Value of search, e.g. name of Property, or coordinates
  searchValue: String!
}

# Query Options input
input SearchQueryOptions {
  # Top QueryOption
  top: Int

  # Skip a QueryOption
  skip: Int

  # Column to order by
  orderby: Orderby

  # Order ASC or DESC
  order: SortOrder

  # Filter a QueryOption
  filter: SearchFilters!
}

#
enum Orderby {
  #
  Alphabetical

  #
  Distance

  #
  Price
}

#
enum SortOrder {
  #
  ASC

  #
  DESC
}

# SearchFilters input
input SearchFilters {
  # Minimum rate SearchFilter
  minRates: Int!

  # Maximimum rate SearchFilter
  maxRates: Int

  # Minimum available rooms SearchFilter
  minRoomsAvailable: Int!

  # Distance from SearchFilter
  distanceFrom: Int

  #
  distanceType: DistanceType

  # Amenities to include
  amenity: [String]

  # Property types to include
  propertyTypes: [Int]!

  # Map layers to include
  layers: [Int]!
}

#
enum DistanceType {
  #
  Kilometers

  #
  Miles
}

# SearchResult
type SearchResult {
  # Value of the search, e.g. name of Property or Coordinate
  searchValue: String!

  # Type of search
  searchType: SearchLocationType!

  # Properties yielded from search
  properties: [Property]

  # Organization Favourite Properties
  favouriteProperties: [Property]

  # Points of Interest yielded from search
  pointsOfInterest: [PointOfInterest]

  # How many properties are returned
  propertyCount: Int

  # Lowest price of all properties returned
  lowestPrice: Float
}

# PointOfInterest typedef
type PointOfInterest {
  #
  id: Int!

  # Layer of a pointOfInterest
  layer: Layer!

  # Name of a pointOfInterest
  name: String!

  # Description of a pointOfInterest
  description: String

  # Address of a pointOfInterest
  address: String

  # Geo location of a pointOfInterest
  geo: Geo!

  # Metadata in JSON
  metadata: JSONString
}

#
scalar JSONString

# DirectionsInput input
# Can be one of multiple things - a Property, Point of Interest, or LatLng, a PropertySlug, or plain TextInput
input DirectionsInput {
  #
  property: PropertyDirectionsInput

  #
  propertySlug: String

  #
  pointOfInterest: PointOfInterestDirectionsInput

  #
  geo: GeoInput

  #
  textInput: String
}

# PropertyDirectionsInput typedef
input PropertyDirectionsInput {
  #
  id: Int

  #
  name: String

  #
  geo: GeoInput!
}

# GeoInput input
input GeoInput {
  #
  lat: Float!

  #
  lng: Float!
}

# PointOfInterestDirectionsInput typedef
input PointOfInterestDirectionsInput {
  #
  id: Int

  #
  name: String

  #
  geo: GeoInput!
}

# Directions typedef
type Directions {
  # Id for sharing Directions
  directionsId: String

  # Where to for Directions
  to: DirectionsPoint!

  # Where from for Directions
  from: DirectionsPoint!

  # Distance for Directions
  distance: Float

  # Time to complete Route in minutes
  routeTime: Int

  # DistanceType for Directions
  distanceType: DistanceType

  # Directions for Directions
  directions: [String]

  # Directions as an encoded Polyline
  directionsPoly: String
}

# DirectionsPoint typedef
type DirectionsPoint {
  #
  id: Int

  #
  name: String

  #
  geo: Geo!
}

# ConnectedAvailability Typedef
# For connected properties, the rates returned
type ConnectedAvailability {
  # Id of Property in our database
  propertyId: Int!

  # Hotel Code in connection
  hotelCode: String!

  # Is the availability limited? Display <5 rooms
  availability: ConnectedAvailabilityType!

  # Lowest rate from availability endpoint
  lowestRate: Currency

  # Lowest RAC rate available for this property
  lowestRacRate: Currency

  # Room has ceiling rate
  ceilingRateAvailabile: Boolean
}

#
type NotificationContent {
  #
  content: String
}

#
enum BookingSort {
  #
  Upcoming

  #
  Ongoing

  #
  UpcomingOngoing

  #
  Latest

  #
  Created

  #
  Checkin

  #
  Checkout

  #
  PropertyName

  #
  BookingOrg
}

#
enum BookingStatusType {
  #
  ActiveBookings

  #
  PastBookings
}

# BookingsWrapper typedef
type BookingsWrapper {
  # number of Bookings
  bookingCount: Int

  # Returned Bookings
  bookings: [Booking!]

  # Total number of Bookings
  totalBookingCount: Int
}

# CardSourcesAndKey typedef
type CardSourcesAndKey {
  #
  sources: [CardSource!]

  #
  publishableKey: String
}

# Crew typedef
type Crew {
  # Id number of Crew
  id: Int

  # Name of Crew
  name: String!

  # Members of Crew
  crewMembers: [CrewMember!]

  # Parent organization of Crew
  organization: Organization
}

# CrewPatron typedef
type CrewMember {
  # Id number of CrewMember
  id: Int

  # Is this person allowed to be a supervisor?
  supervisorEligible: Boolean!

  #
  firstName: String

  #
  lastName: String

  #
  company: String

  #
  position: String

  #
  referenceNumber: String

  #
  phoneNumber: String

  #
  emailAddress: EmailAddress

  #
  employeeId: String

  # Shows up true or false if a booking id had been passed in to getCrew
  inBooking: Boolean

  #
  memberId: String

  #
  active: Boolean

  #
  sendEmail: Boolean

  #
  organizationRoles: [OrganizationRole!]

  #
  crewMemberCategories: [JSONString]

  #
  employeeID: String
}

# CrewWrapper typedef
type CrewWrapper {
  # number of Crew members
  crewCount: Int

  # number of Results from Query
  totalResults: Int

  # number of Active Crew members
  activeCrewCount: Int

  # number of InActive Crew members
  inActiveCrewCount: Int

  # Crew object
  crew: Crew
}

#
type AssociatedBookingWithCrewMemberExistResponse {
  # Return the counts of associated bookings with crew member
  associatedBookingCount: Int!
}

# CrewMemberInput input
# A crew member
input CrewMemberInput {
  # Crew Patron ID - Optional, present when editing, not when creating
  id: Int

  # First name of the crew member - Min 1, Max 100 Chars
  firstName: String

  # Last name of the crew member - Min 1, Max 100 Chars
  lastName: String

  # Company of the crew member - Max 100 Chars
  company: String

  # Position of the crew member - Max 100 Chars
  position: String

  # Reference Number of the crew member - Max 100 Chars
  referenceNumber: String

  # Phone number of the crew member
  phoneNumber: String

  # Email address of the crew member
  emailAddress: EmailAddress

  # Status of the crew member
  active: Boolean

  # Employee ID of the crew member
  employeeID: String

  # Role of crew member
  role: RoleName

  #
  query: String

  #
  memberId: String

  #
  supervisorEligible: Boolean

  #
  inBooking: Boolean

  #
  value: String

  #
  sendEmail: Boolean

  #
  customCategories: [CustomCategoryInput]
}

# Input for a crew member's custom category.
input CustomCategoryInput {
  # Header of the custom category for the crew member.
  customCategoryHeader: String

  # Value of the custom category for the crew member.
  customCategoryValue: String

  # Header of the custom category for the crew member.
  customCategoryId: Int

  # Value of the custom category for the crew member.
  customSubCategoryId: Int
}

#
type BookingGuestDayDuplicateResponse {
  #
  duplicateCount: Int!

  #
  duplicateGuestDays: [BookingGuestDayDuplicate]
}

# BookingGuestDayDuplicate typedef
type BookingGuestDayDuplicate {
  #
  bookingId: Int!

  #
  bookingNumber: String!

  #
  bookingStatus: BookingStatus!

  #
  guestName: String!

  #
  checkin: LodgeLinkDate!

  #
  checkout: LodgeLinkDate!

  #
  payingOrg: String

  #
  bookingOrg: String

  #
  reason: String

  #
  propertyName: String

  #
  roomIndex: Int
}

# The booking input to create a new booking or booking edit
input BookingInput {
  # ID of Booking
  id: Int!

  # Booking Number, 10 alphanumeric characters, unique
  bookingNumber: String!

  # Property booking is under
  property: BookingPropertyTypeInput!

  # Taxes and fees
  taxesAndFees: [BookingFeeInput!]

  #
  estimatedSubtotal: CurrencyInput

  #
  estimatedTaxesFees: CurrencyInput

  # Estimated total
  estimatedTotal: CurrencyInput

  # Estimated savings will be est rac - est inbound
  estimatedSavings: CurrencyInput

  #
  actualSubtotal: CurrencyInput

  #
  actualTaxesFees: CurrencyInput

  # Actual total
  actualTotal: CurrencyInput

  # Check-in date
  checkin: LodgeLinkDate!

  # Check-out date
  checkout: LodgeLinkDate!

  #
  guests: [EditBookingGuestInput!]!

  # Special requests
  specialRequests: String

  # Confirmation number of booking
  confirmationNumber: String

  # Payment Method - Credit, LodgeLink Code, etc.
  paymentMethod: PaymentMethod

  # Status of booking from LodgeLinks POV
  bookingStatus: BookingStatus!

  # Category of booking from LodgeLinks POV
  bookingCategory: BookingCategory

  # Confirmation Message
  confirmationMessage: String

  # PNR/GNR Message
  pnrLocator: String

  # Cancellation status
  cancellationStatus: BookingCancellationStatusInput

  # Cancellation Message
  cancellationMessage: String

  # Cancellation Date
  cancellationDate: LodgeLinkDate

  # Rejection Reason
  rejectionReason: RejectionReason

  # This is the code that's used if this booking is paid by a Payment Code
  paymentCode: PaymentCodeInputType

  #
  cardSource: CardSourceInput

  # Is the user a supervisor?
  supervisor: Boolean

  #
  guestCount: Int

  #
  maxGuest: Int

  #
  crewSwapOccupancy: Int

  #
  maxDays: Int

  #
  guestDayCount: Int

  #
  roomCount: Int

  #
  owner: MaskedIdentityInput

  # For a booking, what permissions does the user have at current moment
  permissions: [BookingPermission!]

  #
  organization: OrganizationCondensedInput

  #
  canBeConnected: Boolean

  #
  connected: Boolean!

  #
  bookingOrigin: String

  #
  isLNROverrideActive: Boolean!

  # To be able to denote admin created booking when impersonating a user
  createdBy: IdentityInput

  # Tax Template applied on Booking
  taxTemplate: String

  #
  travelRequestType: String

  #
  confirmedPastDates: [LodgeLinkDate]

  #
  formattedDateRange: String

  #
  confirmedDates: [LodgeLinkDate]

  #
  totalNumberOfRooms: Int

  #
  folio: [FolioInput]

  #
  folioCount: Int

  #
  expectedFolios: Int

  #
  previousBookingId: Int

  #
  summaryByRoomType: [SummaryByRoomTypeInput]

  #
  summary: SummaryInput

  #
  bookingFeeEvent: BookingFeeEventInput

  #
  preferences: EmailPreferenceInput

  #
  datesUpdated: Boolean

  #
  paymentVars: BookingPaymentInput

  #
  saveCTCs: [BookingSaveCtcInput!]
}

# BookingPropertyTypeInput input
input BookingPropertyTypeInput {
  #
  id: Int!

  # Property Type - Min 1, Max 100 Chars
  name: String

  #
  slug: String

  #
  rooms: [RoomInput]

  #
  address: AddressInput

  #
  geo: GeoInput

  #
  cardImage: CardImageInput

  #
  countryCode: String

  #
  connected: Boolean

  #
  standBy: Boolean

  # Description of the property type - Min 1, Max 255 Chars
  description: String
}

# RoomInput input
# Defines a RoomInput information.
input RoomInput {
  #
  id: Int!

  #
  rate: CurrencyInput

  #
  active: Boolean

  #
  availableRooms: Int

  #
  description: String

  #
  guestsPerRoom: Int

  #
  name: String

  #
  roomType: RoomTypeInput

  #
  availability: String

  #
  strikeoutRate: String
}

# Currency typedef
input CurrencyInput {
  # Value
  value: Float!

  #
  symbol: String

  # Formatted string of value including symbol
  formatted: String!

  # Currency Name, e.g. CAD, USD
  name: String!
}

# Room Type input
input RoomTypeInput {
  #
  id: Int

  # Name of the room type - Min 1, Max 100 Chars
  name: String
}

# Address input
input AddressInput {
  # Written address - Max 255 Chars
  address: String

  # City of the address - Max 100 Chars
  city: String

  # Region this place is located in - Max 100 Chars
  region: String

  # Postal Code or ZIP - Max 10 Chars
  postalCode: String

  # Country - Max 100 Chars
  country: String
}

# CardImageInput input
input CardImageInput {
  #
  href: String

  #
  id: Int
}

# BookingFee input
# Taxes and Fees for BookingFee
input BookingFeeInput {
  #
  currency: CurrencyInput!

  #
  name: String!

  #
  percentage: Float!
}

# The guests in a booking
input EditBookingGuestInput {
  #
  assigned: Boolean!

  #
  added: Boolean

  #
  complete: Boolean

  #
  removed: Boolean

  # Only filled in when editing a guest
  id: Int

  # First name of guest - Min 1, Max 100 Chars
  firstName: String

  # Last name of guest - Min 1, Max 100 Chars
  lastName: String

  # Company guest is affiliated with - Max 100 Chars
  company: String

  # Position of the guest - Max 100 Chars
  position: String

  # Reference Number of the crew member - Max 100 Chars
  referenceNumber: String

  # Whether the guest is a supervisor
  supervisor: Boolean!

  # Phone number of guest
  phone: String

  # Email address of guest
  emailAddress: EmailAddress

  # Room Id of booking
  roomId: Int

  # The Type of Room guest is in
  room: RoomInput

  # Guest days of the Guest
  guestDays: [EditGuestDayInput!]

  # Whether the guest is working a nightshift
  nightShift: Boolean!

  # Comments around the booking - Max 255 Chars
  comments: String

  # Room index - shouldn't be changed
  roomIndex: Int

  #
  identityId: Int

  #
  dirty: Boolean

  #
  query: String

  #
  memberId: String

  #
  phoneNumber: String

  #
  supervisorEligible: Boolean

  #
  inBooking: Boolean

  #
  active: Boolean

  #
  value: String

  #
  crewMemberName: CrewMemberInput

  #
  addGuestToCrewList: Boolean

  #
  isCrewSwap: Boolean

  # Checkin/out can be provided to generate guest days when creating bookings from admin
  checkin: LodgeLinkDate

  #
  checkout: LodgeLinkDate
}

#
input EditGuestDayInput {
  # Date formatted in YYYY-MM-DD
  date: LodgeLinkDate!

  #
  bookingGuestId: Int

  #
  state: BookingGuestDayState

  #
  costTrackingCodeId: Int

  # Status of the Booking Guest Day
  status: BookingGuestDayStatus!

  #
  dirty: Boolean

  #
  inboundRate: Float

  #
  markup: Float

  #
  taxes: Float

  #
  fees: Float

  #
  racRate: Float
}

# BookingCancellationStatus input
input BookingCancellationStatusInput {
  #
  cancellationMessage: String!

  #
  cancelledBy: String!
}

# PaymentCodeInputType input
# Creating LodgeLink Payment Codes
input PaymentCodeInputType {
  # Id of the payment code
  id: Int

  # Payment of the payment code - Min 1, Max 255 Chars
  code: String!

  # Description - Max 255 Chars
  description: String

  # Whether the payment code is active
  organization: OrganizationCondensedInput
}

# OrganizationCondensed typedef
# The id, slug, name of an organization
input OrganizationCondensedInput {
  #
  id: Int!

  #
  slug: String!

  #
  name: String!
}

# CardSource typedef
input CardSourceInput {
  #
  source: String!

  #
  cardNickname: String

  #
  cardholderName: String

  #
  lastFourDigits: String!

  #
  expiry: String!

  #
  address: String

  #
  unitNumber: String

  #
  city: String

  #
  province: String

  #
  postalCode: String

  #
  expired: Boolean
}

# MaskedIdentity typedef
# For getting an identity by email
input MaskedIdentityInput {
  #
  id: Int!

  #
  firstName: String

  #
  lastName: String

  #
  company: String

  #
  position: String

  #
  phone: String

  #
  emailAddress: EmailAddress

  #
  active: Boolean
}

#
input IdentityInput {
  #
  id: Int

  #
  emailAddress: EmailAddress!

  #
  user: UserInput

  #
  organizationRoles: [OrganizationRoleInput!]
}

#
input UserInput {
  #
  id: Int!

  #
  userName: EmailAddress!

  #
  currentOrganization: OrganizationInput
}

# Organization input
# Defines an Organization and their information.
input OrganizationInput {
  #
  id: Int!

  # Domain suffix of organization
  domainSuffix: String!

  # Name of the Organization.
  name: String!

  # Unique Organization Slug
  slug: String!

  # Is this organization a stub?
  stub: Boolean!

  #
  emailAddress: EmailAddress!

  #
  supplier: SupplierInput

  #
  bookings: BookingInput
}

# Supplier input
# Defines a Supplier and their information.
input SupplierInput {
  #
  id: Int!

  #
  name: String!

  #
  brand: String!

  #
  properties: [BookingPropertyTypeInput!]

  #
  defaultMarkup: Int
}

#
input OrganizationRoleInput {
  #
  role: RoleInput!

  #
  organization: OrganizationInput

  #
  membershipType: MembershipType
}

# Role input
input RoleInput {
  # Title of the role
  title: String

  # Type of the role - LodgeLink, LodgeLinkAdmin
  type: String
}

# The input needed to upload or edit a folio
input FolioInput {
  #
  id: Int

  #
  checkin: LodgeLinkDate

  #
  checkout: LodgeLinkDate

  #
  fileName: String

  #
  bookingId: Int

  #
  bookingGuests: [FolioGuestInput!]

  #
  cardNumber: String

  #
  amount: String
}

#
input FolioGuestInput {
  #
  id: Int!

  #
  firstName: String

  #
  lastName: String
}

# SummaryByRoomTypeInput input
input SummaryByRoomTypeInput {
  #
  dates: [SummaryTypeDatesInput]

  #
  id: Int

  #
  numberOfNights: Int

  #
  numberOfRooms: Int

  #
  roomIndices: [Int]

  #
  roomName: String

  #
  roomTypePrice: CurrencyInput
}

# SummaryTypeDatesInput input
input SummaryTypeDatesInput {
  #
  date: LodgeLinkDate

  #
  breakdown: SummaryBreakDownInput

  #
  roomIndices: [Int]
}

# SummaryBreakDownInput input
input SummaryBreakDownInput {
  #
  bookedRate: CurrencyInput

  #
  bookedRooms: Int

  #
  totalRooms: Int

  #
  standByRate: CurrencyInput

  #
  standByRooms: Int
}

# Summary input
input SummaryInput {
  #
  estimatedTotal: String

  #
  guestCount: Int

  #
  propertyCity: String

  #
  propertyImg: String

  #
  propertyName: String

  #
  propertyRegion: String

  #
  roomCount: Int

  #
  maxGuest: Int

  #
  crewSwapOccupancy: Int

  #
  maxDays: Int
}

# BookingFeeEventInput typedef
input BookingFeeEventInput {
  #
  feeEventNotes: String

  #
  feeEligible: Boolean

  #
  feeEventType: Int
}

# EmailPreferenceInput typedef
input EmailPreferenceInput {
  #
  admin: Boolean

  #
  crew: Boolean

  #
  supervisor: Boolean
}

# Payment information for a booking
input BookingPaymentInput {
  # Booking payment method
  method: PaymentMethod!

  # Booking Payment Code ID
  paymentCodeId: Int

  # Booking payment stripe token - Max 50 Chars
  stripeToken: String

  # Booking payment nickname of card - Max 100 Chars
  cardNickname: String

  # Whether the card is new to the system
  newCard: Boolean
}

# BookingSaveCtcInput input
# Creating LodgeLink Cost Tracking Codes
input BookingSaveCtcInput {
  # Id of the cost tracking code
  costTrackingCodeId: Int

  # Expiry date of the cost tracking code
  date: String
}

# Featured typedef
type Featured {
  #
  id: Int!

  # Location of the thumbnail image
  thumbnail: String

  # Link to the property. If no value, no link will display.
  link: String

  # Name of featured
  name: String!

  # Order of featured
  order: Int
}

#
type GetMASResponse {
  #
  version: String

  #
  content: String

  #
  active: Boolean

  #
  customMSA: Boolean
}

#
type CancellationPolicy {
  #
  version: String!

  #
  content: String!

  #
  active: Boolean!
}

# Supplier typedef
type SupplierQueries {
  #
  getSupplierInfo: SupplierInfoFull

  # Get all properties for the Supplier of Current User
  getPropertiesForMySupplier: [Property!]

  # Search for a range of properties for the current Supplier
  searchProperties(search: SearchPropertiesInput!): SearchPropertiesResponse

  # Gets templates for logged in supplier
  taxFeeTemplates: [TaxFeeTemplate!]

  # Gets all rates for a room type within a property
  propertyRoomTypesRate(propertyId: Int!, roomTypeId: Int!): [InboundRate!]

  #
  locationTypeahead(locationName: String!): [LodgeLinkLocation!]

  #
  countyTypeahead(countyName: String!): [County!]

  # Get all connectors available
  getConnectors: [Connector!]

  # Get connections for property
  getConnectionsForProperty(propertyId: Int!): [Connection!]

  #
  getConnectedRates(propertyId: Int!): [ConnectedRate!]

  #
  getConnectedRoomTypeCodes(
    getCodesInput: GetConnectedRoomTypeCodeInput!
  ): [ConnectedRoomCode!]

  # Get property policy
  getPropertyPolicy(propertyId: Int!): PropertyPolicy

  #
  regionTypeahead(regionName: String!): [LodgeLinkRegion!]

  #
  countryTypeahead(countryName: String!): [LodgeLinkCountry!]

  #
  chainCodeTypeahead(chainName: String!): [ChainCode!]

  #
  getChainName(chainCode: String!): ChainCode!

  # Get a log of all changes made to a propertys rates/markups
  getPropertyRateAndMarkupLogs(
    searchInput: SearchPropertyRateChangelogsInput
  ): RateAndMarkupLogResponse
}

# Supplier typedef
# Defines an Supplier and their information.
type SupplierInfoFull {
  #
  id: Int!

  #
  name: String!

  #
  domainSuffix: String!

  #
  brand: String

  #
  primaryEmailAddress: String

  #
  companySize: CompanySize

  #
  users: OrganizationUsers

  #
  properties: [Property!]

  #
  locale: Locale

  #
  primaryBusinessAddress: Address

  #
  billingAddress: Address

  #
  masterServiceAgreementVersion: String

  #
  customMSA: Boolean

  #
  defaultMarkup: Int
}

# SearchProperties input
# Searching for a range of properties
input SearchPropertiesInput {
  #
  top: Int!

  #
  skip: Int!

  #
  sort: PropertySort

  #
  filter: PropertyStatus

  #
  searchString: String
}

#
enum PropertySort {
  #
  propertyNameAsc

  #
  propertyNameDesc

  #
  recentlyUpdatedAsc

  #
  recentlyUpdatedDesc

  #
  cityAsc

  #
  cityDesc
}

# SearchPropertiesResponse typedef
# Results of property search
type SearchPropertiesResponse {
  #
  totalCount: Int

  #
  propertiesCount: Int

  #
  properties: [Property!]
}

# InboundRate typedef
type InboundRate {
  #
  id: StringOrInt!

  #
  planName: String!

  #
  active: Boolean!

  #
  startDate: DateTime!

  #
  endDate: DateTime!

  #
  property: Property

  #
  roomType: RoomType

  #
  value: Float!

  #
  rateType: RateType!

  #
  bestAvailableRate: Boolean!

  #
  organization: Organization

  #
  days: [InboundRateDay!]

  #
  restrictions: [RateRestriction!]
}

# Custom scalar type to accept either a string or an integer
scalar StringOrInt

#
enum RateType {
  #
  Flat

  #
  StandBy

  #
  PercentOff

  #
  FlatOff
}

# InboundRateDay typedef
type InboundRateDay {
  #
  dayOfWeek: Int!

  #
  difference: Float!
}

# RateRestriction typedef
type RateRestriction {
  #
  id: Int

  #
  restrictedDate: LodgeLinkDate!
}

# Connector typedef
# Defines a Connector and all information it contains
type Connector {
  #
  id: Int!

  # Name of the connector
  name: String!

  # URL of the connector
  url: String!

  # Connection Type ID for connector
  connectionTypeId: Int

  # Connection Type Name for connector
  connectionTypeName: String
}

# Connection Typedef
# Defines a connection and all that it contains
type Connection {
  #
  id: Int

  # Connector for connection
  connector: Connector

  # Property related to the connection
  property: Property

  # connection property code
  connectionPropertyCode: String

  # active status
  active: Boolean

  # chain code for this connection
  chainCode: String

  # Whether room codes are in primary or secondary format
  primaryRoomCode: Boolean
}

# Connected Rate typedef
# Defines the properties of a connected rate
type ConnectedRate {
  #
  id: Int!

  #
  rateCode: String

  #
  rateName: String!

  #
  connection: Connection

  #
  ratePlanType: String!

  #
  organization: Organization

  #
  active: Boolean!
}

# getConnectedRoomTypeCode Input
input GetConnectedRoomTypeCodeInput {
  # URL of the connector
  connectorUrl: String

  # Hotel code
  hotelCode: String!

  # Primary or Secondary Type connection
  primaryRoomCode: Boolean

  # Connected rate plans
  rates: [ConnectedRatePlanInput!]!
}

# Connected rate query input
input ConnectedRatePlanInput {
  #
  ratePlanCode: String!

  #
  ratePlanType: String!
}

#
type ConnectedRoomCode {
  # Room Code
  roomCode: String!

  # Dollar value
  amountBeforeTax: Float!

  #
  productCode: String

  #
  ratePlanCode: String!

  #
  descriptionName: String!

  # Description of the room code
  description: String!
}

# Chain Code typedef
type ChainCode {
  # Chain Code
  sabreChainCode: String!

  # Chain Name
  sabreChainName: String!
}

#
input SearchPropertyRateChangelogsInput {
  #
  propertyId: Int!

  #
  sortOrder: SortOrder

  #
  sort: PropertyRateChangeLogSort

  #
  top: Int!

  #
  skip: Int!
}

#
enum PropertyRateChangeLogSort {
  #
  timeStamp

  #
  username
}

# RateAndMarkupLogResponse typedef
# Results of Rate And Markup Log change
type RateAndMarkupLogResponse {
  #
  totalCount: Int

  #
  logCount: Int

  #
  logs: [RateAndMarkupLog!]
}

#
type RateAndMarkupLog {
  # Identity username
  username: String!

  # Log Message
  logMessage: String!

  # Time stamp
  timeStamp: String!
}

# Admin Query typedef
type AdminQueries {
  # Gets all organizations with a supplier
  getSuppliers: [SupplierInfo!]

  #
  getSupplierLimited(id: Int!): SupplierInfoLimited

  #
  searchSuppliers(searchInput: SearchSuppliersInput): SearchSuppliersResponse

  # Gets all customers
  getCustomers(search: CustomersSearchInput!): CustomersSearchResponse!

  #
  getCustomer(id: Int!): Organization!

  #
  getCustomerMembers(
    search: CustomerMemberSearchInput!
  ): CustomerMemberSearchResponse!

  #
  getCustomerPaymentOptions(customerId: Int!): CustomerPaymentOptionsResponse!

  #
  getCreditApplication(applicationId: String): CreditApplication

  #
  getCreditApplicationsForCustomer(orgId: Int!): [CreditApplication]

  #
  getPaymentKey(params: GetPaymentKeyInput!): GetPaymentKeyResponse!

  #
  getCardSources(params: GetCardSourcesInput!): GetCardSourcesResponse!

  #
  getSystemUsers(search: SystemUsersSearchInput!): SystemUsersSearchResponse!

  #
  getSystemUser(identityId: Int!): SystemUser

  # Get inbound rates for property
  propertyInboundRates(params: PropertyRatesInput): [PropertyInboundRate!]

  # Get markups for property
  propertyMarkups(params: PropertyRatesInput): [Markup!]

  # Get ceiling rates for property
  propertyCeilingRates(params: PropertyRatesInput): [PropertyCeilingRate!]

  # Get markups for supplier
  supplierMarkups(search: SupplierMarkupsSearchInput): [SupplierMarkup!]

  # Taxes and Fees
  systemTaxesAndFees: [TaxFee!]

  #
  propertyTaxesAndFees(propertyId: Int!): [TaxFee!]

  #
  taxFee(id: Int!): TaxFee

  #
  getTaxFeeTemplates: [TaxFeeTemplate!]

  #
  getTaxFeeTemplate(templateId: Int!): TaxFeeTemplate

  #
  generateTaxFeeTemplate(propertyId: Int!): TaxFeeTemplateResponse

  #
  reconciliationSearch(search: ReconciliationSearchInput!): BookingSearch

  #
  reconciliationErrors: [ReconciliationError!]

  #
  reconciliationErrorRoomTypeahead(room: String!): [ReconciliationError!]

  #
  reconciliationErrorEmployerTypeahead(
    employer: String!
  ): [ReconciliationError!]

  #
  reconciliationErrorSubcontractorTypeahead(
    subcontractor: String!
  ): [ReconciliationError!]

  #
  reconciliationErrorGuestTypeahead(guestName: String!): [ReconciliationError!]

  #
  reconciliationErrorSearch(
    search: ReconciliationErrorSearchInput!
  ): ReconciliationErrorSearch

  #
  getOrgCostTrackingCodes(
    params: TrackingCodesSearchInput!
  ): TrackingCodesResponse

  #
  getTrackingCode(trackingCodeId: Int!): CostTrackingCode

  #
  searchGuestDays(search: GuestDaySearchInput!): GuestDaySearch!

  #
  getSelectedGuestDayDetails(params: GuestDaySelectedInput): GuestDayDetails

  #
  getSelectedGuestDaysCount(params: GuestDaySelectedInput): Int

  #
  getRoomTypesForBooking(search: GuestDaySearchInput!): [Room!]

  #
  getDuplicateGuestDays(
    params: BulkCreateGuestDaysInput!
  ): BookingGuestDayDuplicateResponse

  #
  guestDaysExist(search: GuestDaysExistInput!): Boolean

  #
  getRoomNights(bookingId: Int!): DetailedBooking!

  #
  searchRoomNights(search: RoomNightSearchInput!): BookingSearch!

  #
  searchRoomNightDays(
    search: RoomNightDaySearchInput!
  ): RoomNightDaySearchResponse!

  #
  getSelectedRoomNightTotals(
    params: SelectRoomNightDaysInput
  ): RoomNightTotalsResponse

  #
  getSelectedRoomNightsCount(params: SelectRoomNightDaysInput): Int

  #
  getSelectedRoomNightLineItemsAverage(
    params: SelectRoomNightDaysInput
  ): LineItem

  #
  getSelectedIncidentalLineItemsSummary(
    params: SelectRoomNightDaysInput
  ): LineItemTotalIncidentals

  #
  getChargesheetLineItemsTotals(chargesheetId: Int!): LineItemTotalsResponse

  #
  getRooms(propertyId: Int!): [Room!]

  #
  getSelectedRoomNightLineItemsTotal(params: SelectRoomNightDaysInput): LineItem

  #
  getMarkupsForRoomNight(params: RoomNightSearchMarkupsInput): [Markup!]

  #
  findOrCreateLineItemGroup(folioId: Int!): LineItemGroup!

  #
  findOrCreateLineItems(
    params: LineItemFindOrCreateInput!
  ): LineItemFindOrCreateResponse!

  #
  searchIncidentals(search: IncidentalSearchInput!): IncidentalSearchResponse!

  #
  searchLineItemGroups(
    search: LineItemGroupSearchInput!
  ): LineItemGroupSearchResponse!

  #
  searchLineItems(search: LineItemSearchInput!): LineItemSearchResponse!

  #
  searchInvoices(search: InvoiceSearchInput!): InvoiceSearch!

  #
  invoiceNumberTypeahead(invoiceNumber: String): [Invoice!]

  #
  searchSAPCustomers(search: SAPCustomerSearchInput!): SAPCustomerSearch!

  #
  searchSAPSuppliers(search: SAPSupplierSearchInput!): SAPSupplierSearch!

  #
  getBookingsWithExceptions(input: PaginationInput!): BookingSearch

  #
  searchSAPGeneralLedgers(
    search: SAPGeneralLedgerSearchInput!
  ): SAPGeneralLedgerSearchResponse!

  #
  searchSAPItemCodes(
    search: SAPItemCodeSearchInput!
  ): SAPItemCodeSearchResponse!

  #
  searchSAPTaxCodes(search: TaxCodeSearchInput!): TaxCodeSearchResponse!

  #
  getBookingsByChargesheetId(chargesheetId: Int!): BookingSearch

  #
  getChargesheet(chargesheetId: Int!): Chargesheet

  #
  getChargesheetDetailedTotals(
    chargesheetId: Int!
  ): [DetailedChargesheetTotals!]

  #
  getSelectedChargesheetTotals(
    params: ChargesheetSelectedInput
  ): ChargesheetTotals

  #
  getSelectedChargesheetExportedInfo(
    params: ChargesheetSelectedInput
  ): ChargesheetExportedInfo

  #
  getSelectedChargesheetStatuses(
    search: ChargesheetSelectedInput
  ): [ChargesheetStatus!]

  #
  checkCreditCardChargesheetSelected(search: ChargesheetSelectedInput): Boolean

  #
  searchChargesheets(search: ChargesheetSearchInput!): ChargesheetSearch

  #
  chargesheetGuestNameTypeahead(guestName: String): [BookingGuest!]

  #
  getPaymentMethodWithBookings(
    search: ReconciliationSearchInput!
  ): [PaymentMethodWithBookingsResponse]

  #
  getSelectedGuestDayDetailsForChargesheet(
    search: RoomNightQueries!
  ): ChargesheetSelectionResponse

  #
  getBookingBreadcrumb(bookingId: Int!): DetailedBooking

  #
  getDetailedBooking(bookingNumber: String!): DetailedBooking

  #
  getDetailedBookingById(bookingId: Int!): DetailedBooking

  #
  getPropertyTimeZone(params: GetPropertyTimeZoneInput): String

  #
  getDetailedBookingByUniqueId(bookingUuid: String!): SupplierDetailedBooking

  #
  getAdminDashboard: AdminDashboard

  #
  getPaymentCodesForOrganization(organizationId: Int!): [PaymentCode]

  #
  getPaymentCodesForOrganizationAndIdentity(
    organizationId: Int!
    identityId: Int!
  ): [PaymentCode]

  #
  getBookingGuests(bookingId: Int!, dateRange: CheckinCheckout): [BookingGuest!]

  #
  getBookingGuestSample(organizationId: Int!): [BookingGuest!]

  #
  getPropertyDetails(propertyId: Int!): Property

  #
  queryPropertyTypes: [PropertyType]

  #
  getIdentitiesForOrganization(organizationId: Int!): [MaskedIdentity!]

  #
  getOrganization(organizationId: Int!): Organization!

  #
  supplierTypeahead(supplierName: String!): [OrganizationSupplierInfo!]

  #
  propertyTypeahead(propertyName: String!): [Property!]

  #
  bookingTypeahead(bookingNumber: String!, draftBooking: Boolean): [Booking!]

  #
  bookingGuestTypeahead(search: BookingGuestTypeaheadInput): [BookingGuest!]

  #
  costTrackingCodeTypeahead(
    search: CostTrackingTypeaheadInput
  ): [CostTrackingCode!]

  #
  roomTypeahead(propertyId: Int!, roomName: String!): [Room!]

  #
  bookingOwnerEmailTypeahead(bookingOwnerEmail: String!): [Booking!]

  #
  bookingConfirmationNumberTypeahead(confirmationNumber: String!): [Booking!]

  #
  bookingTypeaheadMCCSupported(bookingNumber: String!): [Booking!]

  #
  getCustomerPaymentCodesWithPagination(
    params: PaymentCodesSearchInput!
  ): PaymentOptionsResponse!

  # Search for a range of properties for the current Supplier
  adminSearchProperties(
    search: AdminSearchPropertiesInput
  ): SearchPropertiesResponse

  #
  searchPropertiesAdmin(
    search: AdminSearchPropertiesInput
  ): SearchPropertiesResponse

  # Returns organizations with customer attached to them
  customerTypeahead(customerName: String!): [Organization!]

  #
  paymentCodeTypeahead(paymentCode: String!): [PaymentCode!]

  #
  searchBookings(search: BookingSearchInput!): BookingSearch

  # Get lodgelink policy
  getLodgelinkPolicy: LodgeLinkPolicy!

  # Get property count by jurisdiction
  propertyCountByJurisdiction(
    jurisdiction: LocationJurisdiction
    locationId: Int
  ): Int

  #
  fileNameTypeahead(fileName: String!): [Folio!]

  #
  folioIdTypeahead(folioId: String!): [Folio]

  #
  folioSourceEmailTypeahead(sourceEmail: String!): [Folio!]

  #
  getFolio(folioId: Int!): Folio

  #
  querySearchFolioQueues(folioId: Int!): FolioQueueSearchResponse

  #
  searchFolioCharges(
    search: FolioChargeSearchInput!
  ): FolioChargeSearchResponse!

  #
  searchRelatedFolios(search: FolioSearchInput!): RelatedFolioSearch

  #
  queryBackdatedFolios(folioId: Int!): [BackdatedFolio]

  #
  queryFolioFormats: FolioFormatResponse

  #
  querySearchFolioResults(params: FolioResultSearchInput): FolioResultResponse

  #
  searchDetailedFolios(search: FolioSearchInput!): FolioSearch

  #
  searchSummarizedFolios(search: FolioSearchInput!): FolioSearch

  #
  fetchFolioSummary(folioId: Int!): FolioSummary

  #
  searchMissingFolioBookings(search: FolioMissingSearchInput): BookingSearch

  #
  searchIncidentalPreferences(
    search: IncidentalPreferencesSearchInput
  ): IncidentalPreferencesSearchResponse

  #
  searchInvoicePreferences(
    search: InvoicePreferencesSearchInput
  ): InvoicePreferencesSearchResponse

  #
  searchFeeSchedulePreferences(
    search: FeeSchedulePreferencesSearchInput
  ): FeeSchedulePreferencesSearchResponse

  #
  getPatronByIdentityId(identityId: Int!): Patron

  #
  getCrewList(organizationId: Int!): CrewWrapper

  # Get all support tickets
  queryGetTickets(search: TicketSearchInput!): TicketSearch

  #
  queryGetTicketById(id: Int!): Ticket

  #
  queryGetTicketResponses(id: Int!): TicketUpdates

  #
  ticketTypeahead(helpDeskId: String): [Ticket!]

  #
  queryGetMessage(
    params: NotificationMessageInput!
  ): NotificationMessageResponse

  #
  getFoliosForBooking(search: FoliosForBookingSearchInput!): BookingSearch

  #
  findFolioBookings(search: FolioBookingTypeAhead!): [Booking]

  #
  findFolioBookingGuests(search: FolioBookingGuestTypeAhead): [BookingGuest]

  # Getting folios for booking ids
  getFoliosForBookingIds(bookingId: [Int], top: Int!, skip: Int!): BookingSearch

  # VCC and VCC Activity
  getVCCActivityForId(
    providerCardId: Int
    bookingId: Int
    beginDate: String
    endDate: String
  ): [VCCActivity]

  #
  searchVCCActivity(search: VCCActivitySearchInput): VCCActivitySearchResponse

  #
  searchVCC(search: VccSearchInput!): VccSearchResponse

  #
  getUpdatedVirtualCardDetails(bookingId: Int!): VCC

  #
  getVirtualCardAudits(providerCardId: Int!): [VCCAudit]

  #
  getMainVirtualCardByBookingId(
    bookingId: Int
    isOTPValid: Boolean
  ): VccDetailsResponse

  #
  queryGetAdminDashboardVCCStats: AdminDashboardVccStats

  # All VCC Backups
  getAllVCCBackups: [VCCBackup]

  # Search for a range of automatic vccs
  searchVccs(search: SearchVccsInput!): SearchVccsResponse

  # Get connection connectors
  getConnectors: [Connector]

  # Get connector connection types
  getConnectorConnectionTypes: [ConnectorConnectionType]

  # Get connector entity types
  getConnectorEntityTypes: [ConnectorEntityType]

  # Get ALL connector connection details
  getConnectorConnectionDetails: [ConnectorConnection]

  # Get connection details for an entity
  getEntityConnectionDetails(
    entityId: Int!
    entityTypeId: Int!
  ): [ConnectorConnection]

  # Get property rate connection details for a connection
  getPropertyRateConnectionDetails(connectionId: Int!): [PropertyRateConnection]

  # Search for a range of connector connections
  adminSearchConnectorConnections(
    search: SearchConnectorConnectionsInput!
  ): SearchConnectorConnectionsResponse

  # Search for connectors
  connectorTypeahead(connectorName: String!): [Connector!]

  # Search for connector connection types
  connectorConnectionTypeTypeahead(
    connectionTypeName: String!
  ): [ConnectorConnectionType!]

  # Search for identities
  identityTypeahead(emailAddress: String!): [Identity!]

  # Search for permissions
  permissionTypeahead(title: String!): [Permission!]

  # Search for roles
  roleTypeahead(title: String!): [Role!]

  # Get role details (permissions)
  getRoleDetails(id: Int!): Role!

  # Get all available roles
  getRoles: [Role]

  # Get all available permissions
  getPermissions: [Permission]

  #
  querySearchPermissions(
    search: PermissionsSearchInput!
  ): PermissionsSearchResponse

  # Search for Role(s)
  querySearchRoles(search: RoleSearchInput!): RoleSearchResponse

  # Get organization Risk Rating
  getOrganizationRiskRating(organizationId: Int!): OrganizationRiskRating

  # Get admin Role
  getAdminRole(identityId: Int!): OrganizationRole

  # get Approval request
  getApproveVccRequest(id: Int): ApproveVccRequest

  # Search for a range of approval requests
  adminSearchApprovalRequests(
    search: SearchApprovalRequestInput!
  ): SearchApprovalRequestsResponse

  # get approval configurations
  getApprovalFlowConfig: ApprovalFlowConfig!

  # get approval configuration parameters
  getApprovalConfigParams: ApprovalConfigParams!

  # get approval details
  getApprovalDetails: [ApprovalDetails!]

  # get previous approvals
  getPreviousApprovals(bookingId: Int!): [ApprovalRequestInfo!]

  # get booking risk rating diff
  getBookingRiskRatingDiff(
    approvalId: Int!
    bookingId: Int!
  ): BookingRiskRatingDiffResponse

  # get dcb account information
  getDCBAccountInfo: [AccountInfo!]

  #
  getVccSettings: VccSettings!

  #
  getAllFeatureFlags: [FeatureFlag]

  #
  adminGetOrganizationFeatureFlag(
    organizationId: Int!
    top: Int
    skip: Int
  ): OrganizationFeatureFlagResponse

  #
  getFeatureFlagById(id: Int!): FeatureFlag

  #
  queryTaxFeeTemplateTypeahead(templateName: String!): [TaxFeeTemplate!]

  #
  querySearchTaxFeeTemplates(
    search: TaxFeeTemplateSearchInput!
  ): TaxFeeTemplateSearchResponse!

  #
  querySearchTaxFeeTemplatesForBulkUpdates(
    search: TaxFeeTemplateBulkUpdateSearchInput
  ): QuerySearchTaxFeeTemplatesForBulkUpdatesResponse

  #
  queryTaxFeeTypeahead(taxFeeName: String!): [TaxFee!]

  #
  querySearchTaxFees(search: TaxFeeSearchInput!): TaxFeeSearchResponse!

  #
  searchPropertyMCC(
    searchParameters: SearchPropertyMCCInput
  ): SearchPropertyMCCResponse

  #
  searchCardMCC(searchParameters: SearchCardMCCInput): [String]!

  #
  validateMCC(code: String!): ValidateMccResponse

  #
  getAllAmenities: [Amenity!]

  # get all rate card info for a property
  queryGetPropertyRateCard(
    propertyId: Int!
    payingOrgId: Int
    active: Boolean
    valid: Boolean
  ): PropertyRateCard

  #
  adminQuoteBooking: BookingPrice!
}

# Supplier typedef
# Defines a Supplier and its information without the properties.
type SupplierInfoLimited {
  #
  id: Int!

  #
  name: String!

  #
  domainSuffix: String!

  #
  brand: String

  #
  primaryEmailAddress: String

  #
  companySize: CompanySize

  #
  users: OrganizationUsers

  #
  locale: Locale

  #
  primaryBusinessAddress: Address

  #
  billingAddress: Address

  #
  masterServiceAgreementVersion: String

  #
  customMSA: Boolean

  #
  defaultMarkup: Int
}

#
input SearchSuppliersInput {
  #
  sortOrder: SortOrder

  #
  sort: SupplierSort

  #
  top: Int!

  #
  skip: Int!

  #
  supplierName: String

  #
  postalCode: String

  #
  status: [String]

  #
  propertyId: Int

  #
  propertyName: String

  #
  propertyStatus: [PropertyStatus!]

  #
  locationId: Int

  #
  regionId: Int

  #
  countryId: Int

  #
  countyId: Int
}

#
enum SupplierSort {
  #
  Name

  #
  EmailAddress

  #
  Brand
}

# SearchSuppliersResponse typedef
# Results of supplier search
type SearchSuppliersResponse {
  #
  totalCount: Int

  #
  suppliersCount: Int

  #
  suppliers: [SupplierInfo!]
}

#
input CustomersSearchInput {
  #
  sortOrder: SortOrder

  #
  sort: CustomerSort

  #
  top: Int!

  #
  skip: Int!

  #
  customerName: String

  #
  emailAddress: String

  #
  status: [String]

  #
  riskRating: [String]
}

#
enum CustomerSort {
  #
  Name

  #
  EmailAddress

  #
  RiskRating
}

#
type CustomersSearchResponse {
  #
  customersCount: Int!

  #
  customers: [CustomerInfo!]
}

#
input CustomerMemberSearchInput {
  #
  sortOrder: SortOrder

  #
  sort: CustomerMemberSort

  #
  top: Int!

  #
  skip: Int!

  #
  customerId: Int!

  #
  name: String

  #
  emailAddress: String

  #
  status: [String!]

  #
  identityId: Int
}

#
enum CustomerMemberSort {
  #
  Name

  #
  EmailAddress
}

#
type CustomerMemberSearchResponse {
  #
  membersCount: Int!

  #
  members: [OrganizationMember]
}

#
type CustomerPaymentOptionsResponse {
  #
  creditApplications: [CreditApplication!]

  #
  paymentCodes: [PaymentCode!]
}

#
input GetPaymentKeyInput {
  #
  countryCode: String!
}

#
type GetPaymentKeyResponse {
  #
  publishableKey: String
}

#
input GetCardSourcesInput {
  #
  bookingId: Int

  #
  ownerId: Int

  #
  countryCode: String!
}

#
type GetCardSourcesResponse {
  #
  emailAddress: String!

  #
  sources: [CardSource!]
}

#
input SystemUsersSearchInput {
  #
  sortOrder: SortOrder

  #
  sort: UserSort

  #
  top: Int!

  #
  skip: Int!

  #
  organizationId: Int

  #
  userName: String

  #
  emailAddress: String

  #
  phoneNumber: String

  #
  noOrganizations: Boolean

  #
  roleId: Int
}

#
enum UserSort {
  #
  Name

  #
  LastLogin

  #
  JoinedAt
}

#
type SystemUsersSearchResponse {
  #
  userCount: Int!

  #
  users: [SystemUser!]
}

# PropertyRatesInput typedef
# Parameters for the advance propertyInboundRates
input PropertyRatesInput {
  #
  propertyId: Int!

  #
  active: Boolean

  #
  valid: Boolean

  #
  OrganizationName: String

  #
  orgId: Int

  #
  payingOrgId: Int
}

# PropertyInboundRate typedef
type PropertyInboundRate {
  #
  propertyId: Int

  #
  roomType: RoomType!

  #
  rates: [InboundRate!]
}

# Markup typedef
type Markup {
  #
  id: StringOrInt!

  #
  active: Boolean!

  #
  startDate: DateTime!

  #
  endDate: DateTime!

  #
  property: Property

  #
  value: Float!

  #
  rateType: MarkupType!

  #
  organization: Organization
}

#
enum MarkupType {
  #
  Flat

  #
  Percent
}

# PropertyCeilingRate typedef
type PropertyCeilingRate {
  #
  propertyId: Int

  #
  roomType: RoomType!

  #
  ceilingRates: [CeilingRate!]
}

# CeilingRate typedef
type CeilingRate {
  #
  id: StringOrInt!

  #
  ceilingRateName: String!

  #
  active: Boolean!

  #
  property: Property

  #
  roomType: RoomType

  #
  startDate: DateTime!

  #
  endDate: DateTime!

  #
  value: Float!

  #
  percentageMaxMarkup: Float!

  #
  percentageToTriggerMax: Float!

  #
  percentageOnGDS: Float!

  #
  organization: Organization
}

#
input SupplierMarkupsSearchInput {
  #
  id: Int

  #
  supplierId: Int

  #
  orgId: Int

  #
  active: Boolean

  #
  checkin: String

  #
  checkout: String

  #
  rateType: MarkupType
}

# SupplierMarkup typedef
type SupplierMarkup {
  #
  id: StringOrInt!

  #
  active: Boolean!

  #
  startDate: DateTime!

  #
  endDate: DateTime!

  #
  supplier: Supplier!

  #
  value: Float!

  #
  rateType: MarkupType!

  #
  organization: Organization!
}

#
type TaxFeeTemplateResponse implements MutationResponse {
  #
  message: String!

  #
  template: TaxFeeTemplate
}

# ReconciliationErrorSearchInput typedef
# Parameters for the advance Reconciliation Error search
input ReconciliationSearchInput {
  #
  top: Int!

  #
  skip: Int!

  #
  bookingId: Int

  #
  costTrackingCode: String

  #
  costTrackingCodeId: Int

  #
  currency: String

  #
  dateRange: CheckinCheckout

  #
  guestName: String

  #
  hasFolio: Boolean

  #
  organizationId: Int

  #
  payingCompanyId: Int

  #
  payingCompanyName: String

  #
  paymentCodeId: Int

  #
  paymentMethod: PaymentMethod

  #
  propertyId: Int

  #
  propertyPaymentMethods: [AdvancedSearchPropertyPaymentMethod!]

  #
  sort: BookingSort

  #
  sortOrder: SortOrder

  #
  state: [BookingGuestDayState!]

  #
  status: [BookingStatus!]

  #
  jurisdiction: LocationJurisdiction

  #
  locationId: Int
}

#
enum AdvancedSearchPropertyPaymentMethod {
  #
  DirectBill

  #
  CSI

  #
  DC_BANK
}

# BookingSearch typedef
# Results of advanced booking search
type BookingSearch {
  #
  bookingCount: Int

  #
  bookings: [DetailedBooking!]
}

# Bookings from the admin perspective to include more info
# Bookings
type DetailedBooking {
  #
  id: Int!

  #
  actualSubtotal: Currency

  #
  actualTaxesFees: Currency

  #
  actualTotal: Currency

  # Booking Number, 10 alphanumeric characters, unique
  bookingNumber: String!

  #
  bookingOrganization: Organization

  #
  bookingOrigin: String

  #
  bookingStatus: BookingStatus!

  #
  cancellationDate: LodgeLinkDate

  #
  cancellationMessage: String

  #
  cancellationStatus: BookingCancellationStatus

  #
  checkin: LodgeLinkDate!

  #
  checkout: LodgeLinkDate!

  #
  confirmationMessage: String

  #
  confirmationNumber: String

  # PNR/GNR Message
  pnrLocator: String

  #
  connected: Boolean!

  #
  createdAt: DateTime

  #
  createdBy: Identity

  #
  emergencyContact: SystemUser

  #
  estimatedSubtotal: Currency

  #
  estimatedTaxesFees: Currency

  #
  estimatedTotal: Currency

  #
  folio: [Folio]

  #
  folioCount: Int

  #
  gdsFailureReason: String

  #
  unreconciledFolioCount: Int

  #
  guestCount: Int

  #
  guestDayCount: Int

  #
  guests: [BookingGuest!]

  #
  owner: SystemUser

  #
  payingOrganization: Organization

  #
  paymentCode: PaymentCode

  #
  paymentMethod: PaymentMethod

  #
  previousBooking: Booking

  #
  property: Property!

  #
  rejectionReason: RejectionReason

  #
  roomCount: Int

  #
  roomNights: [RoomNight!]

  #
  specialRequests: String

  #
  stripeToken: String

  #
  supervisors: [SystemUser!]

  #
  timeZone: String

  #
  vccFailureReason: String

  #
  byPassDetails: BookingByPassDetails

  # if booking has vcc then display yes otherwise no
  vcc: VCC

  #
  exceptions: [ERPException!]

  #
  roomNightsMissingFoliosCount: Int

  #
  providerType: String
}

#
type RoomNight {
  #
  name: String

  #
  bookingId: Int!

  #
  roomIndex: Int!

  # Dates formatted as YYYY-MM-DD in UTC-0
  dates: [String!]

  #
  guests: [BookingGuest!]

  #
  days: [RoomNightDay!]
}

#
type RoomNightDay {
  # Primary key for updating client cache
  id: ID!

  #
  guestDayIds: [Int!]

  #
  bookingGuestIds: [Int!]

  #
  bookingGuests: [BookingGuest!]

  # Date formatted as YYYY-MM-DD in UTC-0
  date: String!

  #
  inboundRate: Currency

  #
  markup: Currency

  #
  taxes: Currency

  #
  fees: Currency

  #
  racRate: Currency

  #
  state: BookingGuestDayState!

  #
  hasFolio: Boolean

  #
  hasLineItems: Boolean

  #
  folios: [Folio]

  #
  room: Room

  #
  company: [String!]

  #
  costTrackingCode: CostTrackingCode

  #
  exceptionDescription: String

  #
  hasIncidentals: Boolean

  #
  chargesheetId: Int

  #
  folioIds: [Int]
}

# BookingByPassDetails typedef
type BookingByPassDetails {
  #
  id: Int

  #
  bypassReason: String

  #
  bypassUser: String
}

#
enum ERPException {
  #
  MissingCustomerNumber

  #
  MissingProjectNumber

  #
  DirectBillMissingVendorNumber

  #
  GLCodeMissingInformation

  #
  MissingTaxCode

  #
  MissingRoomChargeItemCode

  #
  MissingTaxItemCode

  #
  MissingFeeItemCode

  #
  MissingMiscItemCode
}

#
type ReconciliationError {
  #
  id: Int

  #
  firstName: String

  #
  lastName: String

  #
  stayDate: String

  #
  employer: String

  #
  subcontractor: String

  #
  roomName: String

  #
  shift: String

  #
  checkin: String

  #
  checkout: String

  # This will not change when we resubmit the row
  propertyName: String

  #
  resNum: String

  #
  roomClass: String

  #
  paymentCode: String

  #
  onHold: String

  #
  errorCode: String

  #
  resolved: Boolean
}

# ReconciliationErrorSearchInput typedef
# Parameters for the advance Reconciliation Error search
input ReconciliationErrorSearchInput {
  #
  take: Int!

  #
  skip: Int!

  #
  guestName: String

  #
  room: String

  #
  subcontractor: String

  #
  employer: String

  #
  propertyId: Int

  #
  dateRange: CheckinCheckout
}

# ReconciliationErrorSearch typedef
# Results of advanced Reconciliation Error search
type ReconciliationErrorSearch {
  #
  errorCount: Int

  #
  errors: [ReconciliationError!]
}

#
input TrackingCodesSearchInput {
  #
  id: Int

  #
  organizationId: Int

  #
  expiryDateRange: StartDateEndDate

  #
  excludeArchived: Boolean

  #
  date: LodgeLinkDate

  #
  code: String

  #
  description: String

  #
  active: String

  #
  sortOrder: SortOrder

  #
  sort: TrackingCodesSort

  #
  top: Int

  #
  skip: Int
}

# StartDateEndDate input
input StartDateEndDate {
  #
  startDate: LodgeLinkDate!

  #
  endDate: LodgeLinkDate!
}

#
enum TrackingCodesSort {
  #
  code

  #
  description

  #
  lastUsed

  #
  expiryDate

  #
  active
}

#
type TrackingCodesResponse {
  #
  trackingCodes: [CostTrackingCode!]

  #
  trackingCodesCount: Int
}

# GuestDaySearchInput typedef
input GuestDaySearchInput {
  #
  bookingId: Int

  #
  guestDayIds: [Int!]

  #
  propertyId: Int

  #
  chargesheetIds: [Int!]

  #
  organizationId: Int

  #
  paymentCodeId: Int

  #
  guestIds: [Int!]

  #
  dates: [LodgeLinkDate!]

  #
  dateRange: CheckinCheckout

  #
  guestName: String

  #
  state: [BookingGuestDayState]

  #
  costTrackingCodeId: Int

  #
  roomIds: [Int!]

  #
  top: Int!

  #
  skip: Int!

  #
  sort: BookingGuestDaySort

  #
  sortOrder: SortOrder

  #
  excludeDaysAlreadyOnChargesheet: Boolean
}

#
enum BookingGuestDaySort {
  #
  State

  #
  GuestName

  #
  Company

  #
  Date

  #
  Room

  #
  InboundRate

  #
  Markup

  #
  Outbound

  #
  OtherFees

  #
  Taxes
}

# GuestDaySearch typedef
# List of guest days
type GuestDaySearch {
  #
  guestDayCount: Int!

  #
  guestDays: [BookingGuestDay!]
}

# GuestDaySelectedInput typedef
input GuestDaySelectedInput {
  #
  selected: [Int!]

  #
  excluded: [Int!]

  #
  selectedRooms: [Int!]

  #
  search: GuestDaySearchInput
}

# GuestDayDetails typedef
# Used for the AdjustPricesModal in the Admin Portal
type GuestDayDetails {
  #
  inbound: Currency

  #
  markup: Currency

  #
  otherFees: Currency

  #
  taxes: Currency

  #
  outbound: Currency

  #
  rooms: [Room]

  #
  states: [BookingGuestDayState]

  #
  costTrackingCodes: [CostTrackingCode]

  #
  hasInboundLineItems: Boolean

  #
  hasLineItems: Boolean
}

# BulkCreateGuestDaysInput typedef
input BulkCreateGuestDaysInput {
  #
  dateRange: CheckinCheckout!

  #
  bookingGuestIds: [Int!]!

  #
  inboundRate: Float

  #
  markup: Float

  #
  taxes: Float

  #
  fees: Float

  #
  status: BookingGuestDayStatus

  #
  state: BookingGuestDayState
}

#
input GuestDaysExistInput {
  #
  date: LodgeLinkDate

  #
  bookingGuestIds: [Int!]
}

# RoomNightSearchInput typedef
# Parameters for searching for room nights of a booking
input RoomNightSearchInput {
  #
  top: Int!

  #
  skip: Int!

  #
  bookingId: Int

  #
  bookingOwnerEmail: String

  #
  dateRange: CheckinCheckout

  #
  guestIds: [Int!]

  #
  guestNames: [String!]

  #
  hasFolio: Boolean

  #
  missingFolio: Boolean

  #
  organizationId: Int

  #
  payingCompanyId: Int

  #
  paymentCodeId: Int

  #
  paymentMethod: PaymentMethod

  #
  propertyId: Int

  #
  propertyPaymentMethods: [AdvancedSearchPropertyPaymentMethod]

  #
  sort: BookingSort

  #
  sortOrder: SortOrder

  #
  state: [BookingGuestDayState!]

  #
  status: [BookingStatus!]

  #
  folioStatus: [FolioStatus!]
}

#
input RoomNightDaySearchInput {
  #
  bookingId: Int!

  #
  propertyId: Int

  #
  organizationId: Int

  #
  guestIds: [Int!]

  #
  dateRange: CheckinCheckout

  #
  guestName: String

  #
  state: [BookingGuestDayState!]

  #
  chargesheetIds: [Int!]

  #
  costTrackingCodeId: Int

  #
  top: Int!

  #
  skip: Int!

  #
  sort: BookingGuestDaySort

  #
  sortOrder: SortOrder

  #
  excludeDaysAlreadyOnChargesheet: Boolean
}

#
type RoomNightDaySearchResponse {
  #
  roomNightDayCount: Int!

  #
  roomNightDays: [RoomNightDay!]!
}

#
input SelectRoomNightDaysInput {
  #
  search: GuestDaySearchInput

  #
  selected: [Int!]

  #
  excluded: [Int!]

  #
  selectedRooms: [Int!]

  #
  chargesheetId: Int
}

#
type RoomNightTotalsResponse {
  #
  roomNightsCount: Int!

  #
  guestsCount: Int!

  #
  inbound: Currency

  #
  markup: Currency

  #
  outbound: Currency

  #
  taxes: Currency

  #
  fees: Currency

  #
  total: Currency
}

#
type LineItemTotalIncidentals {
  #
  id: String

  #
  group: LineItemGroup

  #
  parent: LineItem

  #
  children: [LineItem!]

  #
  guestDays: [BookingGuestDay!]

  #
  order: Int

  #
  bookingGuestIds: [Int!]!

  #
  date: LodgeLinkDate!

  #
  type: LineItemType!

  #
  description: String

  #
  debit: Float

  #
  credit: Float

  #
  currencyCode: CurrencyCode!

  #
  taxFee: TaxFee
}

#
type LineItemTotalsResponse {
  #
  roomCharges: LineItem

  #
  incidentals: LineItem
}

# RoomNightSearchMarkupsInput typedef
# Parameters for searching for room night markups
input RoomNightSearchMarkupsInput {
  #
  bookingId: Int

  #
  date: LodgeLinkDate
}

#
input LineItemFindOrCreateInput {
  #
  guestIds: [Int!]

  #
  dateRange: CheckinCheckout
}

#
type LineItemFindOrCreateResponse {
  #
  message: String

  #
  lineItems: [LineItem!]
}

#
input IncidentalSearchInput {
  #
  bookingId: Int

  #
  take: Int

  #
  skip: Int
}

#
type IncidentalSearchResponse {
  #
  incidentalCount: Int

  #
  incidentals: [Incidental!]
}

#
input LineItemGroupSearchInput {
  #
  bookingId: Int

  #
  bookingNumber: String

  #
  dateRange: CheckinCheckout

  #
  folioId: Int

  #
  groupId: Int

  #
  take: Int

  #
  skip: Int
}

#
type LineItemGroupSearchResponse {
  #
  lineItemGroupCount: Int

  #
  lineItemGroups: [LineItemGroup!]
}

#
input LineItemSearchInput {
  #
  bookingGuestDayIds: [Int!]

  #
  bookingGuestIds: [Int!]

  #
  date: LodgeLinkDate

  #
  type: LineItemType

  #
  lineItemIds: [Int!]

  #
  groupIds: [Int!]

  #
  take: Int

  #
  skip: Int
}

#
type LineItemSearchResponse {
  #
  lineItemCount: Int

  #
  lineItems: [LineItem!]
}

# InvoiceSearchInput typedef
# Parameters for searching invoices
input InvoiceSearchInput {
  #
  top: Int

  #
  skip: Int

  #
  sort: InvoiceSort

  #
  sortOrder: SortOrder

  #
  chargesheetId: Int

  #
  invoiceNumber: String
}

#
enum InvoiceSort {
  #
  InvoiceNumber

  #
  ID
}

# InvoiceSearch typedef
# List of invoices
type InvoiceSearch {
  #
  invoiceCount: Int!

  #
  invoices: [Invoice!]
}

# SAPCustomerSearchInput typedef
# Parameters for searching sap customers
input SAPCustomerSearchInput {
  #
  top: Int

  #
  skip: Int

  #
  sortBy: SAPCustomerSortBy

  #
  sortOrder: SortOrder

  #
  customerNumber: String

  #
  paymentTerms: String

  #
  organizationId: Int

  #
  organizationName: String

  #
  countryCode: String
}

#
enum SAPCustomerSortBy {
  #
  Id

  #
  CustomerNumber

  #
  PaymentTerms

  #
  OrganizationName
}

# SAPCustomerSearch typedef
# List of sap customers
type SAPCustomerSearch {
  #
  count: Int!

  #
  sapCustomers: [SAPCustomer!]
}

# SAPCustomer typedef
# SAP Customer information
type SAPCustomer {
  #
  id: Int!

  #
  customerNumber: String

  #
  countryCode: CountryCode

  #
  paymentTerms: String

  #
  organization: Organization
}

#
enum CountryCode {
  #
  CA

  #
  US
}

# SAPSupplierSearchInput typedef
# Parameters for searching sap suppliers
input SAPSupplierSearchInput {
  #
  top: Int

  #
  skip: Int

  #
  sortBy: SAPSupplierSortBy

  #
  sortOrder: SortOrder

  #
  warehouseCode: String

  #
  projectNumber: String

  #
  vendorNumber: String

  #
  propertyId: Int

  #
  propertyName: String

  #
  supplierId: Int

  #
  supplierName: String
}

#
enum SAPSupplierSortBy {
  #
  Id

  #
  ProjectNumber

  #
  WarehouseCode

  #
  VendorNumber

  #
  PropertyName
}

# SAPSupplierSearch typedef
# List of sap suppliers
type SAPSupplierSearch {
  #
  count: Int!

  #
  sapSuppliers: [SAPSupplier!]
}

#
input PaginationInput {
  #
  take: Int!

  #
  skip: Int!
}

#
input SAPGeneralLedgerSearchInput {
  #
  sapGeneralLedgerIds: [Int!]

  #
  take: Int

  #
  skip: Int

  #
  sortBy: SAPGeneralLedgerSortBy

  #
  sortOrder: SortOrder

  #
  country: String

  #
  propertyType: String

  #
  paymentMethod: PropertyPaymentMethod

  #
  vccProvider: VccProvider

  #
  type: LineItemType

  #
  accountNumber: String

  #
  clearingAccountNumber: String

  #
  propertyName: String

  #
  taxFeeName: String
}

#
enum SAPGeneralLedgerSortBy {
  #
  Id
}

#
type SAPGeneralLedgerSearchResponse {
  #
  sapGeneralLedgerCount: Int

  #
  sapGeneralLedgers: [SAPGeneralLedger!]
}

# SAPGeneralLedger Typedef
type SAPGeneralLedger {
  #
  id: Int!

  #
  country: String

  #
  propertyType: PropertyType

  #
  propertyPaymentMethod: PropertyPaymentMethod

  #
  vccProvider: VccProvider

  #
  type: LineItemType

  #
  accountNumber: String

  #
  clearingAccountNumber: String

  #
  description: String

  #
  property: Property

  #
  taxFee: TaxFee

  #
  updatedAt: DateTime

  #
  createdAt: DateTime

  #
  updatedBy: Identity

  #
  createdBy: Identity
}

#
input SAPItemCodeSearchInput {
  #
  sapItemCodeIds: [Int!]

  #
  take: Int

  #
  skip: Int

  #
  sortBy: SAPItemCodeSortBy

  #
  sortOrder: SortOrder

  #
  country: String

  #
  propertyType: String

  #
  itemType: LineItemType

  #
  itemCode: String

  #
  propertyId: Int

  #
  taxFeeId: Int
}

#
enum SAPItemCodeSortBy {
  #
  Id
}

#
type SAPItemCodeSearchResponse {
  #
  sapItemCodeCount: Int

  #
  sapItemCodes: [SAPItemCode!]
}

#
input TaxCodeSearchInput {
  #
  taxCode: String

  #
  warehouseCode: String

  #
  top: Int

  #
  skip: Int

  #
  sort: TaxCodeSortBy

  #
  sortOrder: SortOrder
}

#
enum TaxCodeSortBy {
  #
  Id

  #
  TaxCode

  #
  WarehouseCode
}

#
type TaxCodeSearchResponse {
  #
  taxCodeCount: Int!

  #
  taxCodes: [TaxCode!]
}

#
type TaxCode {
  #
  id: Int!

  #
  taxCode: String!

  #
  warehouseCode: WarehouseCode!

  #
  description: String
}

#
enum WarehouseCode {
  #
  LLUS

  #
  LAB

  #
  LBC

  #
  LMB

  #
  LNB

  #
  LNF

  #
  LNT

  #
  LNS

  #
  LNU

  #
  LON

  #
  LPE

  #
  LQC

  #
  LSK

  #
  LYT
}

#
type DetailedChargesheetTotals {
  #
  name: String

  #
  charge: Currency
}

#
input ChargesheetSelectedInput {
  #
  selected: [Int!]

  #
  excluded: [Int!]

  #
  search: ChargesheetSearchInput
}

# ChargesheetSearchInput typedef
# Parameters for the advance chargesheet search
input ChargesheetSearchInput {
  #
  top: Int!

  #
  skip: Int!

  #
  bookingId: Int

  #
  chargesheetId: [Int]

  #
  invoiceId: Int

  #
  paymentMethod: PaymentMethod

  #
  propertyPaymentMethods: [AdvancedSearchPropertyPaymentMethod]

  #
  currency: String

  #
  propertyId: [Int]

  #
  payingClient: Int

  #
  paymentCodeId: Int

  #
  dateRange: CheckinCheckout

  #
  guestName: String

  #
  chargesheetStatus: [ChargesheetStatus]

  #
  orderBy: ChargesheetOrderBy

  #
  sortOrder: SortOrder
}

#
enum ChargesheetOrderBy {
  #
  CREATED

  #
  PAYING_CLIENT

  #
  PROPERTY_NAME

  #
  TOTAL
}

# ChargesheetExportedInfo typedef
type ChargesheetExportedInfo {
  #
  exportedAt: DateTime

  #
  exportedBy: Identity
}

# ChargesheetSearch typedef
# Results of an advance Chargesheet search
type ChargesheetSearch {
  #
  chargesheetCount: Int

  #
  chargesheets: [Chargesheet!]
}

#
type PaymentMethodWithBookingsResponse {
  #
  paymentMethod: String

  #
  bookings: [BookingWithDateOrgNamePropertyInfo]
}

#
type BookingWithDateOrgNamePropertyInfo {
  #
  id: Int!

  #
  bookingNumber: String

  #
  paymentMethod: String

  #
  guestDayCount: Int

  #
  roomNightsCount: Int

  #
  bookingOrganizationName: String

  #
  propertyName: String

  #
  propertyId: Int

  #
  payingOrganizationName: String

  #
  checkin: LodgeLinkDate

  #
  checkout: LodgeLinkDate
}

#
input RoomNightQueries {
  #
  selectionQueries: [ChargesheetCreateFromRoomNightsInput!]!
}

#
input ChargesheetCreateFromRoomNightsInput {
  #
  dateRange: CheckinCheckout!

  #
  bookingId: Int!

  #
  organizationId: Int

  #
  payingCompanyId: Int

  #
  propertyId: Int

  #
  paymentCodeId: Int

  #
  guestName: String

  #
  state: [BookingGuestDayState!]!

  #
  isAllSelected: Boolean!

  #
  selected: [Int!]!

  #
  excluded: [Int!]!
}

#
type ChargesheetSelectionResponse {
  #
  message: String

  #
  roomNightsCount: Int

  #
  paymentMethods: [String]
}

# GetPropertyTimeZoneInput typedef
input GetPropertyTimeZoneInput {
  #
  bookingId: Int

  #
  propertyId: Int
}

# Supplier Detailed Booking Request Response
type SupplierDetailedBooking {
  #
  bookingNumber: String!

  #
  bookingStatus: BookingStatus!

  #
  confirmationNumber: String
}

#
type AdminDashboard {
  #
  checkingInToday: Int!

  #
  checkingOutToday: Int!

  #
  createdToday: Int!

  #
  updatedToday: Int!
}

# Organization typedef
# Defines an Organization Supplier.
type OrganizationSupplierInfo {
  #
  id: Int!

  #
  name: String!
}

#
input BookingGuestTypeaheadInput {
  #
  guestName: String!

  #
  orgId: Int
}

#
input CostTrackingTypeaheadInput {
  #
  costTrackingCode: String!
}

#
input PaymentCodesSearchInput {
  #
  id: Int!

  #
  code: String

  #
  description: String

  #
  active: String

  #
  sortOrder: SortOrder

  #
  sort: PaymentOptionsSort

  #
  top: Int

  #
  skip: Int
}

#
enum PaymentOptionsSort {
  #
  code

  #
  description

  #
  lastUsed

  #
  expiryDate

  #
  active
}

#
type PaymentOptionsResponse {
  #
  paymentCodes: [PaymentCode!]

  #
  paymentCodesCount: Int
}

#
input AdminSearchPropertiesInput {
  #
  city: String

  #
  country: String

  #
  countryId: Int

  #
  countyId: Int

  #
  locationId: Int

  #
  locationName: String

  #
  payingOrganizationId: Int

  #
  postalCode: String

  #
  propertyId: Int

  #
  propertyName: String

  #
  regionId: Int

  #
  skip: Int

  #
  sort: PropertyColumnSort

  #
  sortOrder: SortOrder

  #
  status: [PropertyStatus!]

  #
  lat: Float

  #
  lng: Float

  #
  distance: Int

  #
  amenities: [Int!]

  #
  isOnlyPreferredProperties: Boolean

  #
  supplierId: Int

  #
  top: Int
}

#
enum PropertyColumnSort {
  #
  PropertyName

  #
  LastUpdated

  #
  PropertyStatus
}

# BookingSearchInput typedef
# Parameters for the Advanced Booking Search
input BookingSearchInput {
  #
  top: Int!

  #
  skip: Int!

  #
  bookingId: Int

  #
  bookingNumber: String

  #
  bookingOwnerEmail: String

  #
  bookingPropertyConnector: [AdvancedSearchBookingPropertyConnector]

  #
  currency: String

  #
  dateRange: CheckinCheckout

  #
  costTrackingCodeId: Int

  #
  guestId: Int

  #
  guestName: String

  #
  hasFolio: Boolean

  #
  missingFolio: Boolean

  #
  organizationId: Int

  #
  payingCompanyId: Int

  #
  payingCompanyName: String

  #
  paymentCodeId: Int

  #
  paymentMethod: PaymentMethod

  #
  propertyId: Int

  #
  propertyPaymentMethods: [AdvancedSearchPropertyPaymentMethod]

  #
  sort: BookingSort

  #
  sortOrder: SortOrder

  #
  state: [BookingGuestDayState!]

  #
  status: [BookingStatus!]

  #
  folioStatus: [FolioStatus!]

  #
  unreconciledFolioStatus: [FolioStatus!]

  #
  guestDayStates: [BookingGuestDayState!]

  #
  jurisdiction: LocationJurisdiction

  #
  locationId: Int
}

#
enum AdvancedSearchBookingPropertyConnector {
  #
  Sabre

  #
  Hilton

  #
  Unconnected
}

# LodgeLinkPolicy Typedef
# Defines a lodgelink policy and all that it contains
type LodgeLinkPolicy {
  #
  id: Int!

  #
  checkin: String!

  #
  checkout: String!

  #
  hoursToCancel: Int!
}

#
type FolioQueueSearchResponse {
  #
  folioQueueCount: Int!

  #
  folioQueues: [FolioQueue!]!
}

#
type FolioQueue {
  #
  id: Int

  #
  folioFormat: FolioFormat

  #
  createdAt: DateTime

  #
  createdBy: Identity

  #
  updatedAt: DateTime

  #
  updatedBy: Identity

  #
  deletedAt: DateTime

  #
  deletedBy: Identity
}

#
input FolioChargeSearchInput {
  #
  folioIds: [Int!]

  #
  take: Int

  #
  skip: Int
}

#
type FolioChargeSearchResponse {
  #
  folioChargeCount: Int!

  #
  folioCharges: [FolioCharge!]!
}

# FolioSearchInput typedef
# Parameters for folio search
input FolioSearchInput {
  #
  bookingId: Int

  #
  folioId: Int

  #
  propertyId: Int

  #
  organizationId: Int

  #
  payingCompanyId: Int

  #
  supplierId: Int

  #
  fileName: String

  #
  sourceEmail: String

  #
  dateRange: CheckinCheckout

  #
  status: [FolioStatus]

  #
  sort: FolioSort

  #
  sortOrder: SortOrder

  #
  country: String

  #
  top: Int!

  #
  skip: Int!
}

#
enum FolioSort {
  #
  Id

  #
  Checkin

  #
  Checkout

  #
  CreatedAt

  #
  CreatedBy

  #
  DateRange

  #
  FileName

  #
  Latest

  #
  PropertyName

  #
  Status
}

#
type RelatedFolioSearch {
  #
  folioCount: Int

  #
  folios: [RelatedFolio!]
}

#
type RelatedFolio {
  #
  id: Int

  #
  amount: String

  #
  checkin: LodgeLinkDate

  #
  checkout: LodgeLinkDate

  #
  fileName: String

  #
  filePath: String

  #
  sourceEmail: String

  #
  fileExt: String

  #
  status: FolioStatus

  #
  createdBy: Identity

  #
  createdAt: DateTime
}

#
type BackdatedFolio {
  #
  folioId: Int!

  #
  folioTotal: Float!

  #
  checkin: LodgeLinkDate!

  #
  checkout: LodgeLinkDate!

  #
  lineItemsTotal: Float!

  #
  chargesTotal: Float!
}

#
type FolioFormatResponse {
  #
  folioFormatCounts: Int!

  #
  folioFormatResult: [FolioFormat!]
}

# FolioResultSearchInput typedef
# Parameters for folio result search
input FolioResultSearchInput {
  #
  folioId: Int!

  #
  take: Int

  #
  skip: Int
}

#
type FolioResultResponse {
  #
  folioResultCount: Int!

  #
  folioResults: [FolioResult!]
}

#
type FolioResult {
  #
  id: Int

  #
  filePath: String

  #
  folio: Folio
}

# FolioSearch typedef
# Results of advanced Folio search
type FolioSearch {
  #
  folioCount: Int

  #
  folios: [Folio!]
}

# FolioSummary typedef
# Summary of Folio to display in the Folio Editor
type FolioSummary {
  #
  id: Int

  #
  lineItemsTotal: Float

  #
  vccChargesTotal: Float
}

#
input FolioMissingSearchInput {
  #
  dateRange: CheckinCheckout

  #
  bookingId: Int

  #
  propertyId: Int

  #
  propertyPaymentMethods: [AdvancedSearchPropertyPaymentMethod!]

  #
  guestName: String

  #
  sort: FolioMissingSort

  #
  sortOrder: SortOrder

  #
  top: Int!

  #
  skip: Int!
}

#
enum FolioMissingSort {
  #
  DateRange

  #
  RoomNightCount

  #
  BookingCreated
}

#
input IncidentalPreferencesSearchInput {
  #
  organizationId: Int!
}

#
type IncidentalPreferencesSearchResponse {
  #
  incidentalPreferences: IncidentalPreferences
}

#
type IncidentalPreferences {
  #
  acceptsIncidentals: Boolean!

  #
  markupFromProperty: Boolean

  #
  markupPercent: Float
}

#
input InvoicePreferencesSearchInput {
  #
  organizationId: Int!
}

#
type InvoicePreferencesSearchResponse {
  #
  invoicePreferences: InvoicePreferences
}

#
type InvoicePreferences {
  #
  invoiceType: InvoiceType

  #
  crewList: Boolean

  #
  jurisdiction: LocationJurisdiction
}

#
enum InvoiceType {
  #
  Consolidated

  #
  ConsolidatedByMonth

  #
  PaymentID

  #
  TrackingCode

  #
  Booking

  #
  Booker

  #
  ConsolidatedByRegion
}

#
input FeeSchedulePreferencesSearchInput {
  #
  organizationId: Int!
}

#
type FeeSchedulePreferencesSearchResponse {
  #
  feeSchedulePreferences: FeeSchedulePreferences
}

#
type FeeSchedulePreferences {
  #
  assistedBookings: Boolean

  #
  advancedOnboarding: Boolean

  #
  customReporting: Boolean
}

# Patron typedef
type Patron {
  #
  id: Int!

  #
  firstName: String!

  #
  lastName: String!

  #
  company: String

  #
  position: String

  #
  phoneNumber: String
}

# TicketSearchInput typedef
# Parameters for ticket search
input TicketSearchInput {
  #
  sortOrder: SortOrder

  #
  top: Int!

  #
  skip: Int!

  #
  status: [TicketStatus]

  #
  helpDeskId: String

  #
  category: [TicketCategory]

  #
  bookingNumber: String

  #
  sort: TicketSort

  #
  id: [Int]
}

#
enum TicketStatus {
  #
  New

  #
  InProgress

  #
  Closed

  #
  OpsTask

  #
  OnHold

  #
  Unassigned
}

#
enum TicketCategory {
  #
  Billing

  #
  Folios

  #
  Projects

  #
  Unassigned
}

#
enum TicketSort {
  #
  Updated

  #
  Created

  #
  HelpDeskId
}

# TicketSearch typedef
# Results of advanced Ticket search
type TicketSearch {
  #
  ticketCount: Int

  #
  tickets: [Ticket!]
}

# Ticket Typedef
type Ticket {
  #
  id: Int!

  # HelpDesk Id
  helpDeskId: Int

  # Status
  status: TicketStatus

  # Category
  category: TicketCategory

  # Subject
  subject: String

  # Ticketable
  ticketable: Ticketable

  # Updated at
  updatedAt: DateTime

  # Created at
  createdAt: DateTime

  # Updated by
  updatedBy: Identity

  # Created by
  createdBy: Identity
}

#
type Ticketable {
  #
  id: Int!

  #
  description: String

  #
  bookingNumberUrl: TicketableBookingDetails
}

# TicketableBookingDetails Typedef
type TicketableBookingDetails {
  # Booking Id
  bookingId: Int

  # Booking Number
  bookingNumber: String
}

# TicketUpdates typedef
# Results of ticket updates query
type TicketUpdates {
  #
  ticketUpdatesCount: Int

  #
  ticketUpdates: [TicketUpdate!]
}

# TicketUpdate typedef
# Results of Ticket Responses
type TicketUpdate {
  # Ticket Update Id
  id: Int!

  # Update Message
  message: TicketUpdateMessage

  # Update made by
  by: TicketUpdatedBy

  # Created at
  createdAt: DateTime

  # Updated at
  updatedAt: DateTime

  # Updated by
  updatedBy: Identity

  # Created by
  createdBy: Identity
}

# TicketUpdateMessage typedef
# Results of Ticket Message from Ticket Update
type TicketUpdateMessage {
  #
  text: String

  #
  html: String
}

# TicketUpdatedBy typedef
type TicketUpdatedBy {
  #
  id: Int

  #
  email: String

  #
  type: String

  #
  name: String
}

#
input NotificationMessageInput {
  #
  notificationId: Int!

  #
  channelMethod: ChannelMethods!
}

#
enum ChannelMethods {
  #
  toMandrill

  #
  toMandrillTest

  #
  toHappyFox
}

#
type NotificationMessageResponse {
  #
  id: Int

  #
  notifiableId: Int

  #
  notificationName: String

  #
  content: String

  #
  toMandrill: String

  #
  toMandrillTest: String

  #
  toHappyFox: String
}

#
input FoliosForBookingSearchInput {
  #
  propertyId: Int

  #
  bookingId: Int

  #
  dateRange: CheckinCheckout

  #
  status: [BookingStatus!]

  #
  country: String

  #
  organizationId: Int

  #
  payingCompanyId: Int

  #
  payingCompanyName: String

  #
  bookingsWithNoFolios: Boolean

  #
  sort: BookingSort

  #
  top: Int

  #
  skip: Int
}

# Optional inputs needed to search for a booking
input FolioBookingTypeAhead {
  #
  bookingNumber: String

  #
  confirmationNumber: String
}

# Inputs needed to search for booking guests
input FolioBookingGuestTypeAhead {
  #
  bookingId: Int!

  #
  guestName: String!
}

# Virtual Credit Card Activity typedef
type VCCActivity {
  # id
  id: String

  # VCC Activity ID
  vccActivityId: Int

  # Decline Code
  declineCode: String

  # Decline Message
  declineMessage: String

  # Last Four Digits of Virtual Card
  lastFour: String

  # Posted Amount
  postedAmount: Currency

  # Posted Date
  postedDate: DateTime

  # Preauth Amount
  preAuthAmount: Currency

  # Transaction Date
  transactionDate: DateTime

  # Transaction Status
  transactionStatus: String

  # Merchant Name
  merchantName: String

  # Merchant MCC
  mccNumber: String

  # Reference Number
  referenceNumber: String

  # Pre Auth Currency Code
  preAuthCurrencyCode: CurrencyCode

  # Posted Currency Code
  postedCurrencyCode: CurrencyCode
}

#
input VCCActivitySearchInput {
  #
  vccIdentifier: Int

  #
  transactionStatus: [String!]

  #
  take: Int

  #
  skip: Int
}

#
type VCCActivitySearchResponse {
  #
  vccActivityCount: Int

  #
  vccActivity: [VCCActivity!]
}

#
input VccSearchInput {
  #
  vccIds: [Int!]

  #
  bookingIds: [Int!]

  #
  propertyIds: [Int!]

  #
  cardNumber: String

  #
  dateRange: CheckinCheckout

  #
  currency: String

  #
  provider: String

  #
  cardDeliveryStatus: CardDeliveryStatus

  #
  cardBlockStatus: CardBlockStatus

  #
  take: Int

  #
  skip: Int
}

#
enum CardBlockStatus {
  #
  active

  #
  blocked
}

#
type VccSearchResponse {
  #
  vccs: [VCC]

  #
  vccCount: Int!
}

# Virtual Credit Card Audit typedef
type VCCAudit {
  # id
  id: Int

  # VCC ID
  providerCardId: Int

  # Created Date
  createdDate: DateTime

  # Updated Date
  updatedDate: DateTime

  # Total Amount
  totalAmount: Currency

  # Used Amount
  usedAmount: Currency

  # Balance Remaining
  balanceRemaining: Currency

  # Origin
  origin: VccAmountChangeOrigin

  # Currency Code
  currency: CurrencyCode
}

#
enum VccAmountChangeOrigin {
  #
  CARD_CREATION

  #
  CARD_SELECTED

  #
  INITIAL_CARD_APPROVAL

  #
  BOOKING_EDIT

  #
  UPDATED_GDS_TAXFEE
}

# VccDetailsResponse typedef
type VccDetailsResponse {
  #
  id: Int

  #
  cardNumber: String

  #
  cvc2: String
}

#
type AdminDashboardVccStats {
  #
  cardsUsedToday: Int!

  #
  availableCardsCAD: Int!

  #
  availableCardsUSD: Int!
}

# Virtual Credit Card Backup typedef
type VCCBackup {
  # id
  id: Int!

  # Booking ID
  bookingId: Int

  # Booking Number
  bookingNumber: String

  # VCC ID
  providerCardId: Int!

  # active
  active: Boolean!

  # Card Number
  cardNumber: String!

  # Last Four Digits of Virtual Card
  lastFour: String

  # CVCs
  cvc2: String!

  # Expiration Date
  expirationMMYY: String!

  # Amount
  amount: Currency!

  # Available Balance
  availableBalance: Currency!

  # Key Version
  keyVersion: String

  # Provider
  provider: VccProvider

  # Currency
  currency: CurrencyCode

  # Azure Key Name
  keyName: String
}

# SearchVccs input
# Searching for a range of automatic vccs
input SearchVccsInput {
  #
  top: Int

  #
  skip: Int

  #
  pageSize: Int!

  #
  pageNumber: Int!

  #
  filter: [VccFilter]

  #
  searchBookingNumber: String

  #
  searchCardNumber: String

  #
  searchPropertyName: String

  #
  searchCustomerOrgName: String

  #
  searchCreatedDateRange: String

  #
  searchExpiryDateRange: String

  #
  searchBalanceMin: String

  #
  searchBalanceMax: String
}

#
enum VccFilter {
  #
  cardStatusActive

  #
  cardStatusBlocked

  #
  cardStatusDeclined

  #
  currencyTypeUsd

  #
  currencyTypeCad

  #
  paymentStatusUnsettled

  #
  paymentStatusSettled

  #
  paymentStatusExpired

  #
  paymentStatusReversal

  #
  paymentStatusNonFinancial

  #
  paymentStatusDeclined

  #
  transactionStatusApproved

  #
  transactionStatusDeclined
}

# SearchVccsResponse typedef
# Results of automatic vcc search
type SearchVccsResponse {
  #
  vccNumberOfPage: Int

  #
  vccNumberOfRecord: Int

  #
  vccs: [AutomaticVcc!]
}

# Automatic Virtual Credit Card typedef
type AutomaticVcc {
  #
  id: Int!

  #
  name: String

  #
  cardLast4digit: String

  #
  cardNumber: String

  #
  cardCurrency: String

  #
  usageLimit: Float

  #
  usageAmount: Float

  #
  availableLimit: Float

  #
  cardStartDate: LodgeLinkDate

  #
  cardEndDate: LodgeLinkDate

  #
  cardExpiryDate: LodgeLinkDate

  #
  cardStatus: String

  #
  cardBalance: Float

  #
  clientReference: String

  #
  ref1: String

  #
  ref2: String

  #
  ref3: String

  #
  ref4: String

  #
  ref5: String

  #
  lastPaymentStatus: String

  #
  transactionCode: String

  #
  bookingId: Int
}

# Connector connection types typedef
type ConnectorConnectionType {
  #
  id: Int!

  #
  connectionType: ConnectionType!
}

#
enum ConnectionType {
  #
  PROPERTY_RATE

  #
  BOOKING_PAYMENT
}

# Connector entity types typedef
type ConnectorEntityType {
  #
  id: Int!

  #
  name: EntityType!
}

#
enum EntityType {
  #
  PROPERTY

  #
  LODGELINKUSER
}

# Connector Connection Typedef
# Defines a connector connection plus associated properties
type ConnectorConnection {
  #
  id: Int

  # active status
  active: Boolean

  # Connector for connection
  connector: Connector

  # Entity Type for connection
  entityType: ConnectorEntityType

  # Entity ID for connection
  entityId: Int

  # Entity Name for connection
  entityName: String

  # Entity Location for connection
  entityLocation: String

  # Connection Type for connection
  connectionType: ConnectorConnectionType

  #
  createdAt: LodgeLinkDate

  #
  createdBy: Identity

  #
  updatedAt: LodgeLinkDate

  #
  updatedBy: Identity
}

# Connector Connection Typedef
# Defines a connector connection plus associated properties
type PropertyRateConnection {
  #
  id: Int

  # chain code for this connection
  chainCode: String

  # connection property code
  connectionPropertyCode: String

  # Whether room codes are in primary or secondary format
  primaryRoomCode: Boolean

  # Connection for connector
  connection: ConnectorConnection

  #
  createdAt: LodgeLinkDate

  #
  createdBy: Identity

  #
  updatedAt: LodgeLinkDate

  #
  updatedBy: Identity

  #
  deletedAt: LodgeLinkDate

  #
  deletedBy: Identity
}

# SearchConnectorConnections input
# Searching for a range of connector connections
input SearchConnectorConnectionsInput {
  #
  top: Int!

  #
  skip: Int!

  #
  sort: ConnectorConnectionSort

  #
  filter: [ConnectorConnectionFilter]

  #
  searchString: String

  #
  connectorName: String

  #
  status: ConnectorConnectionStatus
}

#
enum ConnectorConnectionSort {
  #
  dateAsc

  #
  dateDesc

  #
  connectionTypeAsc

  #
  connectionTypeDesc

  #
  connectionProviderAsc

  #
  connectionProviderDesc

  #
  statusAsc

  #
  statusDesc
}

#
enum ConnectorConnectionFilter {
  #
  entityTypeProperty

  #
  connectionTypePropertyVcc

  #
  connectionTypeBookingPayment
}

#
enum ConnectorConnectionStatus {
  #
  active

  #
  inactive
}

# SearchConnectorConnectionsResponse typedef
# Results of connector connection search
type SearchConnectorConnectionsResponse {
  #
  totalCount: Int

  #
  connectionCount: Int

  #
  connections: [ConnectorConnection!]
}

# Permission search input
input PermissionsSearchInput {
  #
  title: String

  #
  description: String

  #
  top: Int

  #
  skip: Int

  #
  sort: PermissionSort

  #
  sortOrder: SortOrder
}

#
enum PermissionSort {
  #
  Title
}

#
type PermissionsSearchResponse {
  #
  permissionsCount: Int!

  #
  permissions: [Permission!]!
}

#
input RoleSearchInput {
  #
  top: Int!

  #
  skip: Int!

  #
  roleTitle: String

  #
  permissions: [String!]

  #
  identityId: Int
}

#
type RoleSearchResponse {
  #
  rolesCount: Int!

  #
  roles: [Role!]!
}

#
type OrganizationRiskRating {
  #
  id: Int!

  #
  organization: Organization!

  #
  riskRating: RiskRating!

  #
  logMessageAccount: String

  #
  logMessageBalance: String

  #
  logMessagePaymentDSO: String
}

# ApproveVccRequest typedef
type ApproveVccRequest {
  #
  id: Int!

  #
  bookingId: Int!

  #
  bookingNumber: String!

  #
  status: ApprovalRequestStatus!

  #
  companyName: String

  #
  firstName: String

  #
  lastName: String

  #
  hotelName: String!

  #
  emailAddress: String!

  #
  startDate: DateTime!

  #
  endDate: DateTime!

  #
  amount: Float!

  #
  actionedBy: String

  #
  comments: String

  #
  updatedAt: DateTime!

  #
  createdAt: DateTime!
}

#
enum ApprovalRequestStatus {
  #
  All

  #
  Approved

  #
  ApprovedActioned

  #
  Rejected

  #
  Pending

  #
  Cancelled

  #
  ApprovedCancelled
}

# SearchApprovalRequest input
# Searching for a range of approval request
input SearchApprovalRequestInput {
  #
  top: Int!

  #
  skip: Int!

  #
  sort: ApprovalRequestSort

  #
  filter: ApprovalRequestStatus

  #
  bookingId: Int

  #
  propertyId: Int

  #
  slab: Int

  #
  guestName: String

  #
  emailAddress: String

  #
  approvalId: Int

  #
  propertyType: PropertyPaymentMethod
}

#
enum ApprovalRequestSort {
  #
  statusAsc

  #
  statusDesc

  #
  pendingDurationAsc

  #
  pendingDurationDesc

  #
  amountAsc

  #
  amountDesc
}

# SearchApprovalRequestsResponse typedef
# Results of approval request search
type SearchApprovalRequestsResponse {
  #
  totalCount: Int

  #
  approvalCount: Int

  #
  approvals: [ApprovalRequestInfo!]
}

# Approval Request typedef
# Defines an Approval Request and their information.
type ApprovalRequestInfo {
  #
  id: Int!

  #
  status: String!

  #
  booking: DetailedBooking!

  #
  actionedBy: Identity

  #
  notes: String

  #
  createdAt: DateTime!

  #
  updatedAt: DateTime!

  #
  amount: Currency!

  #
  previousApprovals: String

  #
  isOld: Boolean

  #
  requestWorkflowId: String

  #
  startDate: DateTime!

  #
  endDate: DateTime!

  #
  actionedDate: DateTime
}

# ApprovalFlowConfig typedef
type ApprovalFlowConfig {
  #
  id: Int!

  #
  config: String!

  #
  configuredBy: Identity!

  #
  createdAt: LodgeLinkDate!

  #
  updatedAt: LodgeLinkDate!
}

# ApprovalConfigParams typedef
type ApprovalConfigParams {
  #
  id: Int!

  #
  params: String!

  #
  configuredBy: Identity!

  #
  createdAt: LodgeLinkDate!

  #
  updatedAt: LodgeLinkDate!
}

# ApprovalDetails typedef
type ApprovalDetails {
  #
  id: Int!

  #
  status: String!

  #
  createdAt: LodgeLinkDate!

  #
  updatedAt: LodgeLinkDate!
}

#
type BookingRiskRatingDiffResponse {
  #
  old: BookingRiskRatingForApproval

  #
  new: BookingRiskRatingForApproval
}

#
type BookingRiskRatingForApproval {
  #
  payingOrganization: OrganizationCondensed

  #
  creditLimit: Float

  #
  totalCreditUsage: Float

  #
  totalCreditUsagePercentage: Float

  #
  pastDue30DBalance: Float

  #
  paymentHistory90D: Boolean

  #
  withinDSO: Boolean

  #
  dso: Int

  #
  paymentTerms: String

  #
  bookingRiskRating: RiskRating

  #
  tier: String

  #
  currency: CurrencyCode

  #
  isOverCreditLimit: Boolean
}

# AccountInfo typedef
type AccountInfo {
  #
  id: Int!

  #
  accountName: String!

  #
  accountNumber: String!

  #
  balance: String!

  #
  availableBalance: String!

  #
  type: String!

  #
  accountStatus: String!

  #
  program: String!
}

# VccSettings typedef
type VccSettings {
  #
  id: Int!

  #
  createdAt: LodgeLinkDate

  #
  createdBy: Identity

  #
  updatedAt: LodgeLinkDate

  #
  updatedBy: Identity

  #
  bufferPercentage: Int!

  #
  roomDeposit: Int!

  #
  maxBackupVcc: Int!

  #
  vccReplenishmentOnGoing: Boolean!
}

#
type OrganizationFeatureFlagResponse implements MutationResponse {
  #
  message: String!

  #
  featureFlagMapping: [FeatureFlagMapping!]

  #
  featureFlagMappingCount: Int

  #
  featureFlags: [FeatureFlag]
}

#
input TaxFeeTemplateSearchInput {
  #
  propertyId: Int

  #
  propertyName: String

  #
  jurisdiction: String

  #
  locationId: Int

  #
  top: Int

  #
  skip: Int

  #
  sort: TaxFeeTemplateSort

  #
  sortOrder: SortOrder

  #
  taxFeeId: Int

  #
  taxFeeName: String
}

#
enum TaxFeeTemplateSort {
  #
  Name

  #
  Properties
}

#
type TaxFeeTemplateSearchResponse {
  #
  taxFeeTemplateCount: Int!

  #
  taxFeeTemplates: [TaxFeeTemplate!]!
}

#
input TaxFeeTemplateBulkUpdateSearchInput {
  #
  searchParameters: TaxFeeTemplateSearchInput!

  #
  selected: [Int!]

  #
  excluded: [Int!]
}

#
type QuerySearchTaxFeeTemplatesForBulkUpdatesResponse {
  #
  taxFeeTemplates: [TaxFeeTemplate!]!

  #
  jurisdictions: JurisdictionMap
}

#
type JurisdictionMap {
  #
  Federal: JurisdictionQuery!

  #
  StateProvincial: JurisdictionQuery

  #
  County: JurisdictionQuery

  #
  City: JurisdictionQuery
}

#
type JurisdictionQuery {
  #
  query: String!

  #
  value: Int!
}

#
input TaxFeeSearchInput {
  #
  taxFeeId: Int

  #
  taxFeeName: String

  #
  description: String

  #
  category: [TaxFeeCategory!]

  #
  appliedTo: [TaxFeeAppliedTo!]

  #
  calculatedOn: [TaxFeeCalculatedOn!]

  #
  jurisdiction: LocationJurisdiction

  #
  locationId: Int

  #
  top: Int

  #
  skip: Int

  #
  sort: TaxFeeSort

  #
  sortOrder: SortOrder

  #
  effectiveDateRange: StartDateEndDate

  #
  expiryDateRange: StartDateEndDate
}

#
enum TaxFeeSort {
  #
  Name

  #
  Category

  #
  Amount

  #
  CalculatedOn

  #
  AppliedTo

  #
  MaxDays
}

#
type TaxFeeSearchResponse {
  #
  taxFeeCount: Int!

  #
  taxFees: [TaxFee!]!
}

# SearchPropertyMCCInput typedef
input SearchPropertyMCCInput {
  #
  propertyId: Int

  #
  mcc: String

  #
  top: Int!

  #
  skip: Int!
}

# SearchPropertyMCCResponse typedef
# Results of MCC search
type SearchPropertyMCCResponse {
  #
  totalCount: Int

  #
  mccCount: Int

  #
  propertyMCCs: [PropertyMCC!]
}

# PropertyMCC typedef
type PropertyMCC {
  #
  property: Property!

  #
  location: String!

  #
  mcc: [String!]!
}

# SearchCardMCCInput typedef
input SearchCardMCCInput {
  #
  bookingId: Int!
}

# ValidateMccResponse typedef
# Results of MCC validation
type ValidateMccResponse {
  #
  validMcc: Boolean
}

# PropertyRateCard typedef
type PropertyRateCard {
  #
  inboundRates: [PropertyInboundRate!]

  #
  ceilingRates: [PropertyCeilingRate!]

  #
  propertyMarkups: [Markup!]

  #
  supplierMarkups: [SupplierMarkup!]

  #
  details: Property

  #
  connections: [Connection!]

  #
  connectedRatePlan: ConnectedRate
}

# BookingPrice typedef
type BookingPrice {
  #
  total: Currency!

  #
  inboundRate: Currency!

  #
  markup: Currency!

  #
  taxesAndFees: Currency!

  #
  subtotal: Currency!

  #
  daysWithRates: [JSONString]

  #
  roomIndexSummaries: [RoomIndexSummary]
}

# RoomIndexSummary typedef
# Summary by room types
type RoomIndexSummary {
  #
  roomIndex: Int!

  #
  roomTypeId: Int!

  #
  numberOfNights: Int!

  #
  roomName: String!

  #
  totalRoomPrice: Currency

  #
  guestSchedule: [PartnerGuestSchedule]

  #
  totalInboundRoomPrice: Currency
}

# PartnerGuestSchedule typedef
# PartnerHub Guest Schedule
type PartnerGuestSchedule {
  #
  id: Int!

  #
  guestName: String!

  #
  guestDaysByRange: [String]!
}

#
type PartnerHubQueries {
  #
  bookingNoticesAndInstructions(
    token: String!
    bookingNumber: String!
  ): PartnerBookingNoticesAndInstructions!

  #
  authenticatePartner(token: String!): PartnerAuthenticationResponse

  #
  partnerSearchBookings(
    token: String!
    searchInput: PartnerBookingSearchInput!
  ): PartnerBookingSearch!

  #
  partnerHubDashboardStats(token: String!): PartnerHubDashboardStats!

  #
  partnerGetVCCDetails(
    token: String!
    bookingNumber: String!
  ): PartnerVCCDetails

  #
  partnerBookingTypeahead(
    token: String!
    bookingNumber: String!
    draftBooking: Boolean
  ): [Booking!]

  #
  partnerConfirmationNumberTypeahead(
    token: String!
    confirmationNumber: String!
    draftBooking: Boolean
  ): [Booking!]

  #
  partnerGuestTypeahead(
    token: String!
    guestName: String!
    orgId: Int
  ): [BookingGuest!]

  #
  partnerCustomerTypeahead(
    token: String!
    customerName: String!
  ): [Organization!]

  #
  partnerGetBookingRoomSchedule(
    token: String!
    bookingId: Int!
  ): PartnerBookingRoomScheduleResponse
}

#
type PartnerBookingNoticesAndInstructions {
  #
  notices: [String]

  #
  instructions: [String]
}

# PartnerAuthenticationResponse
# Response for the authenticatePartner mutation
type PartnerAuthenticationResponse implements MutationResponse {
  #
  message: String!

  #
  token: String!
}

# PartnerBookingSearchInput typedef
# Parameters for the Advanced Booking Search
input PartnerBookingSearchInput {
  #
  top: Int!

  #
  skip: Int!

  #
  bookingId: Int

  #
  checkin: String

  #
  createdAt: String

  #
  guestName: String

  #
  organizationId: Int

  #
  todayOnly: Boolean
}

# PartnerBookingSearch typedef
# Results of advanced booking search
type PartnerBookingSearch {
  #
  bookingCount: Int

  #
  bookings: [PartnerMinimalBooking!]
}

# PartnerMinimalBooking typedef
# A minimal Booking Object
type PartnerMinimalBooking {
  #
  id: Int

  #
  guests: [BookingGuest]

  #
  customerName: String

  #
  bookingNumber: String

  #
  confirmationNumber: String

  #
  checkin: String

  #
  checkout: String

  #
  createdAt: String

  #
  hasVCC: Boolean!

  #
  hasTimeZoneFlag: Boolean

  #
  propertyTimeZone: String
}

# PartnerHubDashboardStats typedef
# PartnerHub Dashboard Information
type PartnerHubDashboardStats {
  #
  totalLodgelinkBookings: Int

  #
  pendingBookings: Int

  #
  checkInToday: Int

  #
  checkOutToday: Int
}

#
type PartnerVCCDetails {
  #
  guestName: String

  #
  confirmationNumber: String

  #
  customerName: String

  #
  bookingNumber: String

  #
  duration: String

  #
  cardholderName: String

  #
  cardNumber: String

  #
  expiry: String

  #
  cvv: String

  #
  incidentals: Boolean

  #
  provider: VccProvider

  #
  currency: CurrencyCode
}

# PartnerBookingRoomScheduleResponse
# PartnerHub Room Schedule Response
type PartnerBookingRoomScheduleResponse {
  #
  inboundRate: Currency!

  #
  roomIndexSummaries: [RoomIndexSummary]
}

#
type OrganizationRequestResponse {
  #
  organizations: [OrganizationSubRequestResponse]

  #
  organizationCount: Int
}

#
type OrganizationSubRequestResponse {
  #
  organization: Organization

  #
  notes: [Note]

  #
  patron: MaskedIdentity

  #
  paymentCodes: [PaymentCode]
}

# UserJoinResponse typedef
type UserJoinResponse {
  #
  userJoinRequests: [UserJoinRequest]

  #
  userJoinRequestCount: Int
}

# PendingCreditApplicationsResponse typedef
type PendingCreditApplicationsResponse {
  #
  creditApplications: [CreditApplication!]

  #
  pendingCreditApplicationsCount: Int
}

# PendingRequestsCount typedef
type PendingRequestsCount {
  #
  numberOfOrgRequests: Int!

  #
  numberOfUserRequests: Int!

  #
  numberOfCreditApplications: Int!
}

#
type OTPResponse implements MutationResponse {
  #
  message: String!

  # Encrypted details relevant to the otp
  verificationCode: String!

  # Initialization vector for the decryption
  iv: String!
}

#
enum BookingBypassTypes {
  #
  CX

  #
  SYSTEM
}

#
type GetCustomCategoriesResponse implements MutationResponse {
  #
  customCategories: [CustomCategory!]!

  #
  customSubCategories: [CustomSubCategory!]!

  #
  maxCustomCategories: Int

  #
  maxSubCustomCategories: Int

  #
  message: String!
}

# CustomCategory typedef
# CustomCategory
type CustomCategory {
  # ID of CustomCategory
  id: Int!

  # Title of CustomCategory
  title: String!

  #
  isRequired: Boolean

  #
  active: Boolean

  #
  customSubCategories: [CustomSubCategory]

  #
  createdAt: DateTime

  #
  createdBy: MaskedIdentity

  # Organizations
  organization: Organization
}

# CustomSubCategory typedef
# CustomSubCategory
type CustomSubCategory {
  # ID of CustomSubCategory
  id: Int!

  # Title of CustomSubCategory
  title: String!

  #
  createdAt: DateTime

  #
  createdBy: MaskedIdentity

  #
  customCategory: CustomCategory

  #
  active: Boolean
}

#
type CrewCSVUploadHistoryResponse implements MutationResponse {
  #
  message: String!

  #
  crewCSVUploadHistory: [CrewCSVUploadHistory]
}

# CrewCSVUploadHistory typedef
type CrewCSVUploadHistory {
  # Id number of CrewCSVUploadHistory
  id: Int

  # Number or errors in the CSV file
  csvErrorCount: Int

  # Number of crew members w/o change
  staticCrewCount: Int

  # Number of crew members updated
  updatedCrewCount: Int!

  # Number of crew members added
  addedCrewCount: Int!

  # Number of crew members submitted
  submittedCrewCount: Int!

  #
  totalCrewCount: Int!

  # Link to the uploaded CSV file in the storage
  csvURL: String!

  #
  csvUploadStatus: CrewCSVUploadStatus!

  # Parent organization of CrewCSVUploadHistory
  organization: Organization

  #
  createdBy: MaskedIdentity

  #
  createdAt: DateTime

  #
  updatedAt: DateTime
}

#
enum CrewCSVUploadStatus {
  #
  Error

  #
  ValidationSuccessful

  #
  UploadSuccessful
}

#
type GetBookingFeeEventTypesResponse implements MutationResponse {
  #
  feeEventTypes: [BookingFeeEventTypes]

  #
  message: String!
}

# BookingFeeEventTypes typedef
type BookingFeeEventTypes {
  #
  name: String!

  #
  id: Int!
}

#
type Mutation {
  # Create Account - Done
  createAccount(
    accountInformation: CreateAccountInput
    tokenPayload: TokenPayloadInput!
  ): AccountChangeResponse

  # Changes user's active organization - Done
  changeActiveOrganization(
    organizationId: Int!
  ): ChangeOrganizationMutationResponse

  # Initiate the flow for resetting a password - Needs finalized email templates
  initiateForgotPassword(
    emailAddress: EmailAddress!
    sendEmail: Boolean
    recaptchaToken: String!
  ): InitiateForgotPasswordResponse

  # Reset password - Done
  resetPassword(
    sessionPayload: SessionPayloadInput
    password: String!
  ): AccountChangeResponse

  # Login - Done
  login(emailAddress: EmailAddress!, password: String!): LoginMutationResponse

  # Edits an Org Member for role and primary contact
  editOrganizationMember(
    memberId: Int!
    memberDetails: OrganizationMemberInput!
  ): OrganizationMemberResponse

  # Sets primary contact for list of members
  setPrimaryContacts(contacts: [PrimaryContactsInput!]): PrimaryContactsResponse

  # Edits account, pass in organizationMemberId if an Organization Admin
  saveAccount(
    accountInput: AccountInput!
    organizationMemberId: Int
  ): SaveAccountResponse

  # Create Organization - Complete
  createOrganization(
    organization: CreateOrganizationInput
  ): OrganizationResponse

  # Invite Users to Organization - Complete
  inviteUsers(users: [UserInviteInput!]!): InviteUsersResponse

  # Change Organization settings
  updateOrganization(
    organization: UpdateOrganizationInput
  ): OrganizationResponse

  # Resend Invite
  resendInvite(organizationMemberId: Int!): InviteUsersResponse

  # Accept an MSA version or the latest MSA
  acceptMasterServiceAgreement(msaId: Int): OrganizationResponse

  # Add a property to active organization favourites
  addPropertyToOrganizationFavourites(propertyId: Int!): GenericMutationResponse

  # Remove a property from active organization favourites
  removePropertyFromOrganizationFavourites(
    propertyId: Int!
  ): GenericMutationResponse

  #
  selectUniqueCrewIdentifier(
    organizationId: Int!
    uniqueCrewIdentifier: UniqueCrewIdentifier!
  ): GenericMutationResponse

  # Create organization join request notificaiton for new user
  joinExistingOrganizationRequest(
    organizationName: String!
    firstName: String!
    lastName: String!
    emailAddress: String!
    recaptchaToken: String!
  ): OrganizationResponse

  # Edits an Organization - TBI
  removeOrganizationMember(memberId: Int!): GenericRemoveMutationResponse

  # This will re-send a token to an email with a different code - Done
  issueClaimCode(tokenId: String): Token

  # This will re-send a token to an email with a different code on Customer Portal
  issueCPClaimCode(
    tokenId: String
    emailAddress: String
    action: String
  ): ClaimCPTokenResponse

  # Verifies a two-factor session if code is correct - Implemented, but needs work for future token types
  verifyTokenClaim(sessionId: String, code: String!): Token

  # Claims a token from Customer Portal
  claimCPToken(
    tokenId: String
    emailAddress: String
    action: String
  ): ClaimCPTokenResponse

  # Verifies a two-factor session if code is correct without sessionId input - Done
  verifyCPTokenClaim(
    tokenId: String
    code: String!
    emailAddress: String
    action: String
  ): Token

  # Send a notification to a notifiable entity
  sendNotification(notifiableId: Int): NotificationResponse

  # Initiates a credit application - In Progress
  initiateCreditApplication(
    application: CreditApplicationInput
  ): CreditApplicationResponse

  # Generates a token for sharing a credit application - In Progress
  shareCreditApplication(applicationId: String): GenericMutationResponse

  # Modifies a credit application - In Progress
  modifyCreditApplication(
    application: CreditApplicationInput
  ): CreditApplicationResponse

  # Finalize a credit application - In Progress
  finalizeCreditApplication(
    application: CreditApplicationInput
  ): CreditApplicationResponse

  # Edit a Crew
  editCrew(crew: CrewInput!): CrewMutationResponse

  #
  mutationBulkActivateCrewMembers(
    patronIds: [Int!]!
    active: Boolean!
  ): GenericMutationResponse

  #
  mutationBulkDeleteCrewMembers(patronIds: [Int!]!): GenericMutationResponse

  # Create a CrewMember
  addCrewMember(crewMember: CrewMemberInput!): CrewMemberMutationResponse

  # Create a CrewMember New implementation with Custom Categories and different unique identifiers
  createCrewMember(crewMember: CrewMemberInput!): CrewMemberMutationResponse

  # Edit a CrewMember
  editCrewMember(crewMember: CrewMemberInput!): CrewMemberMutationResponse

  # Edit a CrewMember With Custom Categories
  updateCrewMember(crewMember: CrewMemberInput!): CrewMemberMutationResponse

  # Remove a CrewMember
  removeCrewMember(crewMemberId: Int!): GenericRemoveMutationResponse

  # Upload a CrewList
  uploadCrewList(
    crewListInput: [CrewMemberInput]
    preview: Boolean
  ): CrewListUploadMutationResponse

  # Upload a CrewList with Custom categories
  uploadCrewListWithCustomCategories(
    crewListInput: [CrewMemberInput]
  ): CrewListUploadMutationResponse

  # Upload and Submit crew member
  submitCrewMembers(
    submitCrewCsvInput: [CrewCsvInput!]!
    header: [CrewCsvHeader!]!
  ): SubmitCrewMembersResponse

  # Upload a CrewList CSV
  uploadCrewCSV(blob: String!): CrewListUploadMutationResponse

  # Initiates a booking with certain subfields - TBI
  initiateBooking(
    booking: BookingPrepInput!
    platformType: PlatformTypes
  ): BookingResponse

  #
  cancelBooking(
    bookingId: Int!
    preferences: EmailPreferenceInput!
    bookingFeeEvent: BookingFeeEventInput
  ): BookingResponse

  #
  addGuestToBooking(
    bookingId: Int!
    roomId: Int!
    roomIndex: Int
  ): BookingGuestResponse

  # Removes a guest from booking. If changeEmail is true, we will replace the guest with an unassigned one with a different id
  removeGuestFromBooking(
    bookingId: Int!
    guestIds: [Int!]
  ): RemoveBookingGuestResponse

  #
  editGuestForBooking(
    bookingId: Int!
    guestInfo: BookingGuestInput!
    sendNotifications: Boolean
    sendGDSUpdate: Boolean
  ): BookingGuestResponse

  #
  addCrewMembersToBookingRoom(
    bookingId: Int!
    crewMembers: [AddCrewMemberToBookingInput!]
    roomId: Int!
    roomIndex: Int
  ): BookingResponse

  #
  selectDateRangeForBooking(
    bookingId: Int!
    dates: CheckinCheckout!
  ): BookingResponse

  # Creates a Booking Snapshot
  createBookingSnapshot(bookingId: Int!): GenericMutationResponse

  # Bulk update for all days in a booking
  setAllGuestDaysForBooking(
    bookingId: Int!
    days: [BookingGuestDayInput!]!
  ): GenericMutationResponse

  #
  setGuestsForBooking(
    bookingId: Int!
    guests: [EditBookingGuestInput!]!
  ): GenericMutationResponse

  #
  changeCheckinCheckoutDateEdit(
    bookingId: Int!
    guestIds: [Int!]
    checkinDate: String
    checkoutDate: String
  ): BookingResponse

  #
  setCostTrackingCodesForBooking(
    bookingId: Int!
    costTrackingCodes: [BookingCostTrackingCodeInput!]
  ): BookingResponse

  #
  submitPaymentInformationForBooking(
    bookingId: Int!
    paymentInformation: BookingPaymentInput!
  ): BookingResponse

  #
  finalizeBooking(
    bookingId: Int!
    specialRequests: String
    preferences: EmailPreferenceInput!
    travelRequestType: TravelRequestType
    platformType: PlatformTypes
  ): BookingResponse

  #
  submitBooking(
    booking: BookingInput!
    isInitialFlow: Boolean
    platformType: PlatformTypes
  ): BookingResponse

  #
  calculateBookingPrice(bookingId: Int!): BookingPrice

  #
  calculateBookingPriceFromFullBooking(
    input: CalculateBookingPriceInput!
  ): BookingPrice

  #
  calculateBookingPriceWithRoomIndexPriceSummary(
    bookingId: Int!
    bookingGuests: [EditBookingGuestInput]
  ): BookingPrice

  #
  calculateRoomScheduleBookingEditRates(
    input: CalculateBookingPriceInput!
  ): BookingPrice

  #
  calculateRoomScheduleBookingInitialRates(
    input: CalculateBookingPriceInput!
  ): BookingPrice

  #
  makeSpecialRequest(bookingId: Int!, specialRequests: String): BookingResponse

  #
  startBookingEdit(bookingNumber: String!): BookingResponse

  #
  finalizeBookingEdit(
    bookingId: Int!
    specialRequests: String
    preferences: EmailPreferenceInput!
    platformType: PlatformTypes
  ): BookingResponse

  #
  updateBookingTravelRequest(
    bookingId: Int!
    travelRequestType: TravelRequestType
  ): BookingResponse

  #
  updateConfirmationNumber(
    bookingUuid: String!
    confirmationNumber: String
  ): BookingResponse

  # Saves a payment code, creates if no id, edits if id
  savePaymentCode(paymentCodeInput: PaymentCodeInput!): PaymentCodeResponse

  # Shares a payment code
  sharePaymentCode(
    userInvite: UserInviteInput
    sharedIdentities: [Int!]
    paymentCodeId: Int!
  ): PaymentCodeResponse

  # Rejects a payment code for an identity
  revokePaymentCode(
    paymentCodeId: Int!
    identityId: Int!
  ): GenericRemoveMutationResponse

  # Inactivates a payment code
  inactivatePaymentCode(paymentCodeId: Int!): PaymentCodeResponse

  #
  archivePaymentCode(paymentCodeId: Int!): PaymentCodeResponse

  # Saves a cost tracking code, creates if no id, edits if id
  saveCostTrackingCode(
    costTrackingCodeInput: CostTrackingCodeInput!
  ): CostTrackingCodeResponse

  # Inactivates a cost tracking code
  inactivateCostTrackingCode(costTrackingCodeId: Int!): CostTrackingCodeResponse

  #
  archiveCostTrackingCode(costTrackingCodeId: Int!): CostTrackingCodeResponse

  #
  AdminMutations: AdminMutations

  #
  SupplierMutations: SupplierMutations

  #
  acceptOganizationRequest(orgId: Int): OrganizationResponse

  #
  declineOganizationRequest(orgId: Int): OrganizationResponse

  #
  setOrganizationForUserJoinRequest(
    userId: Int
    requestedOrganizationId: Int
  ): UserJoinRequestResponse

  #
  declineUserJoinRequest(userId: Int): UserJoinRequestResponse

  #
  approveUserJoinRequest(userId: Int): UserJoinRequestResponse

  #
  PartnerHubMutations: PartnerHubMutations

  #
  authenticateOTP(input: AuthenticateOTPInput!): GenericMutationResponse

  # Remove a CreditCard
  removeCreditCard(cardId: String!, countryCode: String!): PaymentChangeResponse

  #
  mutationCreateCustomCategory(
    title: String!
    isRequired: Boolean
  ): CreateCustomCategoryResponse

  #
  mutationCreateCustomSubCategories(
    titles: [String!]!
    customCategoryId: Int!
  ): CreateSubCustomCategoriesResponse

  #
  mutationActivateOrDeactivateCustomCategory(
    customCategoryId: Int!
    active: Boolean!
  ): UpdateCustomCategoriesResponse

  #
  mutationActivateOrDeactivateCustomSubCategory(
    customSubCategoryId: Int!
    active: Boolean!
  ): UpdateCustomSubCategoriesResponse
}

# The input necessary for creating accounts
input CreateAccountInput {
  # First name of account holder - Min 1, Max 100 Chars
  firstName: String!

  # Last name of account holder - Min 1, Max 100 Chars
  lastName: String!

  # Phone number of account holder
  phoneNumber: String!

  # Password for the account holder - Requires a strong password
  password: String!

  # Does the account holder want to receive marketing emails?
  receiveMarketingEmails: Boolean!

  # Does the account holder agree to the terms of service?
  agreeWithTerms: Boolean!
}

# TokenPayloadInput typedef
input TokenPayloadInput {
  # ID of the Token
  tokenId: String!

  # UDID received from the Token Payload
  payload: String!
}

#
type AccountChangeResponse implements MutationResponse {
  #
  message: String!

  #
  accountToken: String

  #
  tokenExpiry: String
}

#
type ChangeOrganizationMutationResponse implements MutationResponse {
  #
  message: String!

  #
  me: Me
}

#
type InitiateForgotPasswordResponse implements MutationResponse {
  #
  message: String!

  #
  claimCodeLink: String

  #
  emailAddress: EmailAddress

  #
  tokenId: String
}

# SessionPayloadInput typedef
input SessionPayloadInput {
  # Session ID of the Two-Factor Authentication Session
  sessionId: String!

  # UDID received from the Token Payload
  payload: String!
}

#
type LoginMutationResponse implements MutationResponse {
  #
  message: String!

  #
  errorMessage: String

  #
  accountToken: String

  #
  tokenExpiry: String

  #
  me: Me
}

# The input necessary for setting a member's roles and primary contact
input OrganizationMemberInput {
  #
  roles: [RoleName!]

  #
  primaryContact: Boolean
}

#
type OrganizationMemberResponse implements MutationResponse {
  #
  message: String!

  #
  member: OrganizationMember
}

# The input necessary for setting an org's primary contacts
input PrimaryContactsInput {
  #
  memberId: Int!

  #
  primaryContact: Boolean!
}

#
type PrimaryContactsResponse implements MutationResponse {
  #
  message: String!

  #
  members: [OrganizationMember!]
}

# The input necessary for saving accounts
input AccountInput {
  # First name of the user - Min 1, Max 100 Chars
  firstName: String

  # Last name of the user - Min 1, Max 100 Chars
  lastName: String

  # Company of the user - Max 100 Chars
  company: String

  # Position of the user - Max 100 Chars
  position: String

  # Does the user want to receive marketing email?
  receiveMarketingEmails: Boolean

  # Phone number of the user
  phoneNumber: String

  # Is user primary contact
  primaryContact: Boolean
}

#
type SaveAccountResponse implements MutationResponse {
  #
  message: String!

  #
  account: Me
}

# CreateOrganizationInput input
# Form for creating an organization - not all the fields for Org, just the initial create
input CreateOrganizationInput {
  # Organization name - Min 1, Max 100 Chars
  name: String!

  # Primary address of the organization
  primaryAddress: AddressInput!

  #
  recaptchaToken: String!

  # Customer input
  customer: CreateCustomerInput

  #
  leadSource: String!

  # Billing address of the organization
  billingAddress: AddressInput!
}

# CreateCustomer input
# Form for creating a customer
input CreateCustomerInput {
  # Industry for a Customer
  industry: Industry

  # Annual Accommodation Expense
  annualAccommodationExpense: AnnualAccommodationExpense
}

#
type OrganizationResponse implements MutationResponse {
  #
  message: String!

  #
  organization: Organization
}

# The inputs for inviting users
input UserInviteInput {
  #
  emailAddress: EmailAddress!

  # One of the three roles - CustomerAdmin, CustomerTravelAdmin, CustomerMember
  roles: [RoleName!]

  # First name of invited user - Min 1, Max 100 Chars
  firstName: String

  # Last name of invited user - Min 1, Max 100 Chars
  lastName: String

  # Company of invited user - Max 100 Chars
  company: String

  # Position of invited user - Max 100 Chars
  position: String

  # Phone number invited user
  phoneNumber: String

  # Whether this user is a primary contact
  primaryContact: Boolean
}

# UpdateOrganizationInput input
# Updating the Organizations settings for an organization
input UpdateOrganizationInput {
  # ID of the org
  id: Int

  # Size of the Organization
  companySize: CompanySize

  # Primary address of the organization
  primaryAddress: AddressInput

  # Billing address of the organization
  billingAddress: AddressInput

  # Industry of the Organization
  industry: Industry

  # Customer Annual Accommodation Expense
  annualAccommodationExpense: AnnualAccommodationExpense

  # Phone number for the Organization
  phoneNumber: String

  # Auto approve preference for User Join Request
  autoApproveMembers: Boolean

  # Use of tracking codes is mandatory for new bookings
  trackingCodesRequired: Boolean

  # Unique crew identifier of the Organization
  uniqueCrewIdentifier: String
}

# GenericMutation response
# Response for mutations, includes an http code and a list of errors
type GenericMutationResponse implements MutationResponse {
  # Message returned from mutation
  message: String!
}

#
type GenericRemoveMutationResponse implements MutationResponse {
  #
  message: String!

  #
  removedId: StringOrInt!
}

#
type ClaimCPTokenResponse implements MutationResponse {
  #
  message: String!

  #
  action: TokenAction

  #
  payload: String
}

#
type NotificationResponse implements MutationResponse {
  #
  message: String!

  #
  notification: Notification
}

# Notification typedef
# Defines a Notification.
type Notification {
  #
  id: Int!

  #
  notifiable: Notifiable!

  #
  notificationName: String!

  #
  content: String!

  #
  isSent: Boolean!

  #
  bookingId: Int!

  #
  sendAt: LodgeLinkDate!
}

#
type Notifiable {
  #
  id: Int!
}

# CreditApplication input
# Form for Credit Application, used in multi-step different mutations
input CreditApplicationInput {
  # The UDID of the credit application
  creditApplicationId: String

  # Credit requested
  creditLimit: Float

  # Legal company name - Min 1, Max 100 Chars
  legalCompanyName: String

  # Trade name - Min 1, Max 100 Chars
  tradeName: String

  # Number Duns - Max 100 Chars
  dunsNum: String

  # Parent Company - Min 1, Max 100 Chars
  parentCompany: String

  # Parent Company - Max 100 Chars
  lineOfBusiness: String

  # Primary address of the business
  primaryBusinessAddress: AddressInput

  # Billing address of the business
  billingAddress: AddressInput

  # Phone number
  phone: String

  # Email for credit application
  emailAddress: EmailAddress

  # Name of AP - Min 1, Max 100 Chars
  apName: String

  # Phone number of AP
  apPhoneNumber: String

  # Signature Full Name - Max 100 Chars
  signatureFullName: String

  # Signature title - Max 100 Chars
  signatureTitle: String

  # An applications authorized organization
  authorizedOrganizationBehalf: Boolean
}

#
type CreditApplicationResponse implements MutationResponse {
  #
  message: String!

  #
  submission: CreditApplication
}

# CrewInput input
# Create or edit a Crew
input CrewInput {
  # Id of crew - Optional, present when editing, not when creating
  id: Int

  # Name of crew - Min 1, Max 100 Chars
  name: String!
}

#
type CrewMutationResponse implements MutationResponse {
  #
  message: String!

  # Returns the submitted crew
  submission: Crew
}

#
type CrewMemberMutationResponse implements MutationResponse {
  #
  message: String!

  # Returns the submitted crewMember
  submission: CrewMember
}

#
type CrewListUploadMutationResponse implements MutationResponse {
  #
  message: String!

  #
  crewList: [JSONString]

  #
  status: [JSONString]

  #
  preview: Boolean

  #
  addedCrewCount: Int

  #
  totalCrewCount: Int

  #
  totalErrors: Int

  #
  updatedCrewCount: Int

  #
  foundErrors: Boolean
}

# CrewCsvInput input
# A crew member
input CrewCsvInput {
  #
  crewMemberInput: CrewMemberInput

  #
  rowStatus: String

  #
  inputErrors: JSONString
}

#
input CrewCsvHeader {
  #
  key: String!

  #
  value: String!
}

#
type SubmitCrewMembersResponse implements MutationResponse {
  #
  message: String!

  #
  crewCSVUploadHistory: CrewCSVUploadHistory!
}

# The input necessary initiating a booking
input BookingPrepInput {
  #
  bookingBypassReasonId: Int

  #
  rooms: [BookingRoomInput]!

  # Checkin Date in format YYYY-MM-DD
  checkin: LodgeLinkDate!

  # Checkout Date in format YYYY-MM-DD
  checkout: LodgeLinkDate!

  # Property Id of the booking
  propertyId: Int!

  # Type of booking
  bookingCategory: BookingCategory
}

# The inputs for each room in an initiate booking
input BookingRoomInput {
  # Id of the room
  roomId: Int!

  # Number of rooms to book
  quantity: Int!
}

#
enum PlatformTypes {
  #
  WEB

  #
  IOS

  #
  ANDROID

  #
  ADMIN
}

#
type BookingResponse implements MutationResponse {
  #
  message: String!

  #
  booking: Booking
}

#
type BookingGuestResponse implements MutationResponse {
  #
  message: String!

  #
  guest: BookingGuest

  #
  permissions: [BookingPermission!]
}

#
type RemoveBookingGuestResponse implements MutationResponse {
  #
  message: String!

  #
  removedIds: [Int!]

  #
  estimatedTotal: Float

  #
  permissions: [BookingPermission!]
}

# The guests in a booking
input BookingGuestInput {
  #
  assigned: Boolean!

  #
  added: Boolean

  #
  complete: Boolean

  # Only filled in when editing a guest
  id: Int

  # First name of guest - Min 1, Max 100 Chars
  firstName: String

  # Last name of guest - Min 1, Max 100 Chars
  lastName: String

  # Company guest is affiliated with - Max 100 Chars
  company: String

  # Position of the guest - Max 100 Chars
  position: String

  # Reference Number of the crew member - Max 100 Chars
  referenceNumber: String

  # Whether the guest is a supervisor
  supervisor: Boolean!

  # Phone number of guest
  phone: String

  # Email address of guest
  emailAddress: EmailAddress

  # Room Id of booking
  roomId: Int!

  # Whether the guest is working a nightshift
  nightShift: Boolean!

  # Comments around the booking - Max 255 Chars
  comments: String

  # Room index - shouldn't be changed
  roomIndex: Int

  #
  isCrewSwap: Boolean
}

# AddCrewMemberToBookingInput input
# A crew member to add to a booking
input AddCrewMemberToBookingInput {
  # CrewMember Patron ID
  id: Int

  # NightShift preference of CrewMember
  nightShift: Boolean

  # If CrewMember is a supervisor
  supervisor: Boolean
}

#
input BookingGuestDayInput {
  # Date formatted in YYYY-MM-DD
  date: LodgeLinkDate!

  #
  bookingGuestId: Int!

  #
  state: BookingGuestDayState

  #
  costTrackingCodeId: Int

  # Status of the Booking Guest Day
  status: BookingGuestDayStatus

  #
  inboundRate: Float

  #
  markup: Float

  #
  taxes: Float

  #
  fees: Float

  #
  racRate: Float
}

# BookingCostTrackingCode input
input BookingCostTrackingCodeInput {
  #
  date: LodgeLinkDate!

  #
  costTrackingCodeId: Int
}

#
enum TravelRequestType {
  #
  None

  #
  Air

  #
  Ground

  #
  AirAndGround
}

#
input CalculateBookingPriceInput {
  #
  bookingId: Int!

  #
  property: CalculateBookingPricePropertyInput!

  #
  guests: [CalculateBookingPriceGuestInput!]!
}

#
input CalculateBookingPricePropertyInput {
  #
  id: Int!
}

#
input CalculateBookingPriceGuestInput {
  #
  roomIndex: Int!

  #
  room: CalculateBookingPriceRoomInput!

  #
  days: [CalculateBookingPriceDayInput!]!
}

#
input CalculateBookingPriceRoomInput {
  #
  id: Int!

  #
  roomType: CalculateBookingPriceRoomTypeInput!
}

#
input CalculateBookingPriceRoomTypeInput {
  #
  id: Int!
}

#
input CalculateBookingPriceDayInput {
  #
  date: LodgeLinkDate!

  #
  inboundRate: Float

  #
  markup: Float

  #
  taxes: Float

  #
  fees: Float

  #
  status: String
}

# PaymentCodeInput input
# Creating LodgeLink Payment Codes
input PaymentCodeInput {
  # Id of the payment code
  id: Int

  # Payment of the payment code - Min 1, Max 255 Chars
  code: String!

  # Description - Max 255 Chars
  description: String

  # Whether the payment code is active
  active: Boolean!

  # Expiry date of the payment code
  expiryDate: LodgeLinkDate

  #
  organizationId: Int
}

#
type PaymentCodeResponse implements MutationResponse {
  #
  message: String!

  #
  paymentCode: PaymentCode
}

# CostTrackingCodeInput input
# Creating LodgeLink Cost Tracking Codes
input CostTrackingCodeInput {
  # Id of the cost tracking code
  id: Int

  # Code of cost tracking code - Min 1, Max 255 Chars
  code: String!

  # Description - Max 255 Chars
  description: String

  # Whether the cost tracking code is active
  active: Boolean!

  # Expiry date of the cost tracking code
  expiryDate: LodgeLinkDate
}

#
type CostTrackingCodeResponse implements MutationResponse {
  #
  message: String!

  #
  costTrackingCode: CostTrackingCode
}

# Admin Mutation typedef
type AdminMutations {
  #
  adminCreateBooking(submission: AdminBookingCreateInput!): BookingResponse

  #
  createCeilingRate(
    propertyId: Int!
    ceilingRate: CeilingRateInput!
  ): CeilingRateMutationResponse

  #
  editCeilingRate(
    ceilingRateId: StringOrInt!
    ceilingRate: CeilingRateInput!
  ): CeilingRateMutationResponse

  #
  deactivateCeilingRate(
    ceilingRateId: StringOrInt!
  ): CeilingRateMutationResponse

  #
  reactivateCeilingRate(
    ceilingRateId: StringOrInt!
  ): CeilingRateMutationResponse

  #
  deleteCeilingRate(ceilingRateId: StringOrInt!): GenericRemoveMutationResponse

  #
  createInboundRate(
    propertyId: Int!
    rate: InboundRateInput!
  ): InboundRateMutationsResponse

  #
  editInboundRate(
    rateId: StringOrInt!
    rate: InboundRateInput!
  ): InboundRateMutationsResponse

  #
  deactivateInboundRate(rateId: StringOrInt!): InboundRateMutationsResponse

  #
  reactivateInboundRate(rateId: StringOrInt!): InboundRateMutationsResponse

  #
  deleteInboundRate(rateId: StringOrInt!): GenericRemoveMutationResponse

  #
  createMarkup(propertyId: Int!, markup: MarkupInput!): MarkupMutationsResponse

  #
  editMarkup(
    markupId: StringOrInt!
    markup: MarkupInput!
  ): MarkupMutationsResponse

  #
  deactivateMarkup(markupId: StringOrInt!): MarkupMutationsResponse

  #
  reactivateMarkup(markupId: StringOrInt!): MarkupMutationsResponse

  #
  deleteMarkup(markupId: StringOrInt!): GenericRemoveMutationResponse

  #
  createSupplierMarkup(
    orgId: Int!
    supplierId: Int!
    supplierMarkup: SupplierMarkupInput!
  ): SupplierMarkupMutationsResponse

  #
  editSupplierMarkup(
    supplierMarkupId: String!
    updatedProperties: SupplierMarkupInput!
  ): SupplierMarkupMutationsResponse

  #
  deleteSupplierMarkup(supplierMarkupId: String!): GenericRemoveMutationResponse

  #
  deactivateSupplierMarkup(
    supplierMarkupId: String!
  ): SupplierMarkupMutationsResponse

  #
  reactivateSupplierMarkup(
    supplierMarkupId: String!
  ): SupplierMarkupMutationsResponse

  #
  mutationCreateTaxFee(submission: TaxFeeCreateInput!): TaxFeeResponse

  #
  mutationEditTaxFee(submission: TaxFeeEditInput!): TaxFeeResponse

  #
  mutationDeleteTaxFee(taxFeeId: Int!): TaxFeeResponse

  #
  mutationCreateOrUpdateTaxFeeTemplate(
    submission: TaxFeeTemplateEditInput!
  ): TaxFeeTemplateResponse

  #
  mutationDeleteTaxFeeTemplate(taxFeeTemplateId: Int!): TaxFeeTemplateResponse

  #
  applyTaxFeeTemplateToProperty(
    templateId: Int!
    propertyId: Int!
  ): TaxFeeTemplateResponse

  #
  mutationBulkUpdateTaxFeeTemplates(
    submission: TaxFeeTemplateBulkUpdateInput!
  ): BulkTaxFeeTemplateResponse

  #
  confirmBooking(
    bookingUuid: String
    bookingId: Int
    confirmationMessage: String
    confirmationNumber: String
  ): BookingResponse

  #
  rejectBooking(
    bookingUuid: String
    bookingId: Int
    rejectionReason: RejectionReason
    rejectionMessage: String
  ): BookingResponse

  #
  restoreBooking(bookingId: Int): BookingResponse

  # Reconciles an individual guest day
  reconcileGuestDays(
    guestDays: [ReconcileGuestDay!]
    state: BookingGuestDayState
    reason: String
  ): BookingGuestDayResponse

  # Reconciles many guest days
  reconcileBulkGuestDays(
    submission: ReconcileBulkGuestDaysInput
  ): BookingGuestDayResponse

  #
  updateSAPCustomer(sapCustomerEdit: SapCustomerEditInput): SAPCustomerResponse

  #
  deleteSAPCustomer(submission: SapCustomerDeleteInput!): SAPCustomerResponse

  #
  updateSAPSupplier(sapSupplierEdit: SapSupplierEditInput): SAPSupplierResponse

  #
  deleteSAPSupplier(submission: SapSupplierDeleteInput!): SAPSupplierResponse

  #
  createSAPCustomer(sapCustomer: SapCustomerCreateInput): SAPCustomerResponse

  #
  createSAPSupplier(sapSupplier: SapSupplierCreateInput): SAPSupplierResponse

  #
  createSAPGeneralLedger(
    sapGeneralLedger: SAPGeneralLedgerCreateInput
  ): SAPGeneralLedgerResponse

  #
  updateSAPGeneralLedger(
    sapGeneralLedger: SAPGeneralLedgerEditInput
  ): SAPGeneralLedgerResponse

  #
  deleteSAPGeneralLedger(
    submission: SAPGeneralLedgerDeleteInput!
  ): SAPGeneralLedgerResponse

  #
  createSAPTaxCode(submission: TaxCodeCreateInput!): TaxCodeResponse

  #
  updateSAPTaxCode(submission: TaxCodeEditInput!): TaxCodeResponse

  #
  deleteSAPTaxCode(submission: TaxCodeDeleteInput!): TaxCodeResponse

  #
  createSAPItemCode(submission: SAPItemCodeCreateInput!): SAPItemCodeResponse

  #
  updateSAPItemCode(submission: SAPItemCodeEditInput!): SAPItemCodeResponse

  #
  deleteSAPItemCode(submission: SAPItemCodeDeleteInput!): SAPItemCodeResponse

  #
  batchResolveReconciliationErrors(errors: [Int!]): ReconciliationErrorResponse

  #
  createGuestDays(
    submission: BulkCreateGuestDaysInput!
  ): BookingGuestDayResponse!

  #
  editGuestDay(submission: EditBookingGuestDayInput!): BookingGuestDayResponse

  #
  editGuestNames(
    submission: EditBookingGuestNamesInput!
  ): BookingGuestDayResponse

  #
  adjustRoomNightValues(
    submission: AdjustRoomNightValuesInput
  ): EditRoomNightDaysResponse

  #
  editRoomNightDay(
    submission: EditRoomNightDayInput!
  ): EditRoomNightDayResponse!

  #
  editRoomNightDays(
    submission: EditRoomNightDaysInput!
  ): EditRoomNightDaysResponse!

  #
  adjustRoomNightAndLineItemValues(
    submission: EditRoomNightDaysInput
  ): EditRoomNightDaysResponse

  # Initiate the flow for creating an account
  initiateCreateAccount(
    emailAddress: EmailAddress!
  ): InitiateCreateAccountResponse

  #
  updateSupplier(
    orgId: Int!
    name: String!
    defaultMarkup: Int
  ): OrganizationResponse

  #
  editOrganization(
    orgId: Int!
    name: String!
    emailAddress: EmailAddress
    autoApproveMembers: Boolean
    status: OrganizationStatus
    domainSuffix: String!
    apEmailAddress: String
    apPhoneNumber: String
  ): OrganizationResponse

  #
  saveIncidentalPreferences(
    submission: IncidentalPreferencesSaveInput!
  ): IncidentalPreferencesSaveResponse

  #
  saveInvoicePreferences(
    submission: InvoicePreferencesSaveInput!
  ): InvoicePreferencesSaveResponse

  #
  saveFeeSchedulePreferences(
    submission: FeeSchedulePreferencesSaveInput!
  ): FeeSchedulePreferencesSaveResponse

  #
  changePropertySupplier(
    changePropertySupplierInput: AdminChangePropertySupplierInput!
  ): ChangePropertySupplierResponse

  #
  updateOrganizationDutyOfCareSettings(
    orgId: Int!
    subscriptionStatus: Boolean!
    primaryContactName: String
    primaryContactEmail: EmailAddress
  ): OrganizationResponse

  #
  updateOrganizationAddresses(
    id: Int
    primaryAddress: AddressInput
    billingAddress: AddressInput
  ): OrganizationResponse

  #
  createSupplier(
    supplierInput: AdminCreateSupplierInput!
    identityId: Int
  ): CreateSupplierResponse

  # Create a user from an identity
  createUser(
    identityId: Int!
    identityEmailAddress: String!
    organizationId: Int!
  ): CreateUserResponse

  #
  mutationAddUser(submission: AddUserInput!): CreateUserResponse

  # Deactivate and activate a Member
  deactivateMember(
    memberId: [Int!]
    activate: Boolean
  ): DeactivateMemberResponse

  # Remove a Member from an organization
  removeMember(
    memberId: Int!
    organizationId: Int!
  ): GenericRemoveMutationResponse

  # Edit a patron's details
  editPatron(submission: PatronEditInput!): PatronEditResponse

  # Request an admin token
  requestAdminToken(
    targetOrganizationId: Int!
    identityOnBehalf: Int!
    action: String
    reason: String
  ): Me

  # Claim an admin token
  claimAdminToken(tokenId: String!): GenericRemoveMutationResponse

  #
  approveCreditApplication(
    creditApplicationId: String!
    creditLimit: Int
  ): CreditApplicationResponse

  #
  rejectCreditApplication(
    creditApplicationId: String
  ): CreditApplicationResponse

  #
  activateCreditApplication(
    creditApplicationId: String!
    activate: Boolean!
  ): CreditApplicationResponse

  #
  adjustChargesheetAndLineItemValues(
    submission: ChargesheetAdjustValuesInput
  ): ChargesheetResponse

  #
  createChargesheet(
    submission: ChargesheetCreateFromQueriesInput!
  ): ChargesheetResponse

  #
  updateChargesheetCreditCard(
    params: UpdateChargesheetCreditCardInput!
  ): ChargesheetResponse

  #
  updateChargesheetPrices(
    priceInfo: ChargesheetPriceInput!
    reason: String
  ): ChargesheetResponse

  #
  updateChargesheets(
    update: ChargesheetUpdateInput
    search: ChargesheetSearchInput
    selected: [Int]
    excluded: [Int]
  ): ChargesheetResponse

  #
  deletePaymentCode(paymentCodeId: Int!): PaymentCodeResponse

  #
  savePaymentCode(paymentCodeInput: PaymentCodeInput!): PaymentCodeResponse

  #
  setCallForPricing(
    propertyId: Int!
    callForPricing: Boolean!
  ): PropertyMutationResponse

  #
  togglePropertyOnRateEngine(
    propertyId: Int!
    enableRateEngine: Boolean!
  ): PropertyMutationResponse

  #
  toggleSupplierPropertiesOnRateEngine(
    supplierId: Int!
    enableRateEngine: Boolean!
  ): PropertyMutationResponse

  # Create a connector
  createConnector(
    submission: ConnectorCreationInput!
  ): ConnectorMutationResponse

  # Edits folio
  editFolio(submission: FolioInput!): FolioResponse

  # Delete a folio
  deleteFolio(folioId: Int!): FolioResponse

  #
  dissociateFolio(folioId: Int!): FolioResponse

  #
  reconcileFolio(folioId: Int!, isFolioReconciled: Boolean): FolioResponse

  #
  requestFolio(params: FolioRequest): FolioMessageResponse

  #
  saveFolioCharges(submission: FolioChargeSaveInput!): FolioChargeSaveResponse!

  #
  manuallyQueueFolio(
    params: ManuallyQueueFolioInput
  ): ManuallyQueueFolioResponse

  # Create a new Note
  createNote(submission: NoteInput): NoteResponse

  # Resent Virtual Card
  resendVirtualCard(bookingId: Int!, country: String): Boolean

  # Update Virtual Card Details
  updateVirtualCard(submission: VCCStatusInput): VCCResponse

  # Create a new private note for HappyFox Ticket
  createTicketResponse(submission: TicketUpdateInput): Boolean

  # Create a new HappyFox Ticket
  createTicket(submission: TicketInput): Ticket

  # Update an existing HappyFox Ticket
  updateTicket(submission: UpdateTicketInput): Ticket

  # Update multiple existing HappyFox Tickets
  updateMultipleTickets(submission: TicketBulkInput!): BulkTicketsUpdateResponse

  # Delete multiple existing HappyFox Tickets
  deleteMultipleTickets(submission: TicketBulkInput!): BulkTicketsDeleteResponse

  # Delete an existing HappyFox Ticket
  deleteTicket(helpDeskId: Int!): DeleteTicketResponse

  #
  createLineItem(submission: LineItemCreateInput!): LineItemCreateResponse

  #
  updateLineItems(submission: LineItemUpdateInput!): LineItemUpdateResponse

  #
  createLineItemGroup(
    submission: LineItemGroupCreateInput
  ): LineItemGroupCreateResponse

  #
  deleteLineItem(submission: LineItemDeleteInput!): LineItemDeleteResponse

  #
  generateLineItems(
    submission: LineItemGroupGenerateInput!
  ): LineItemGroupGenerateResponse

  #
  recalculateLineItemAmounts(
    submission: LineItemUpdateInput!
  ): LineItemUpdateResponse

  #
  adjustLineItemValues(
    submission: AdjustLineItemValuesInput!
  ): LineItemUpdateResponse

  # Create a New connector
  createNewConnector(
    submission: ConnectorCreationInput!
  ): ConnectorMutationResponse

  # Edit a New connector
  editNewConnector(
    connectorId: Int!
    submission: ConnectorCreationInput!
  ): ConnectorMutationResponse

  # Create a connector connection
  createConnectorConnection(
    submission: ConnectorConnectionCreationInput!
  ): ConnectorConnectionMutationResponse

  # Edit/Update a connector connection
  editConnectorConnection(
    connectionId: Int!
    submission: ConnectorConnectionCreationInput!
  ): ConnectorConnectionMutationResponse

  # Assign a role to an identity
  createIdentityRole(
    roleId: Int!
    identityId: Int!
    orgId: Int!
  ): OrganizationRole

  # Create a new role
  createRole(submission: RoleInput!): RoleResponse

  # Create a new permission
  createPermission(submission: PermissionCreateInput!): PermissionResponse

  # Modify a permission
  editPermission(submission: PermissionEditInput!): PermissionResponse

  # Modify a role
  modifyRole(submission: RoleModificationInput!): RoleResponse

  # Delete a role
  deleteRole(roleId: Int!): GenericRemoveMutationResponse

  # Delete a permission
  deletePermission(permissionId: Int!): GenericRemoveMutationResponse

  #
  deleteRoleForIdentity(
    roleId: Int!
    identityId: Int!
  ): GenericRemoveMutationResponse

  # Accept an approval
  acceptApprovalRequest(acceptance: ApprovalActionInput): String

  # Reject an approval
  rejectApprovalRequest(rejection: ApprovalActionInput): String

  # Create/Edit an approval flow configuration
  createApprovalFlowConfig(
    approvalFlowConfigInput: ApprovalFlowConfigInput
  ): ApprovalConfigMutationResponse

  # Create/edit approval configuration parameters
  createApprovalConfigParams(
    approvalConfigParamsInput: ApprovalConfigParamsInput
  ): ApprovalConfigParamsMutationResponse

  # Delete approval configuration
  deleteApprovalConfig(approvalConfigId: Int!): GenericRemoveMutationResponse

  # Edit/Update a vcc backup
  editVccBackup(
    vccBackupId: Int!
    submission: VccBackupCreationInput!
  ): VccBackupMutationResponse

  # Block/Unblock an automatic vcc
  toggleVccStatus(providerCardId: Int!): VccAutomaticMutationResponse

  # Trigger VCC Update/Approval for a booking manually
  triggerVccUpdate(bookingId: Int!): VccUpdateMutationResponse

  # Attach VCC to a booking
  attachVccToBooking(bookingId: Int!): String

  #
  setVccSettings(vccSettingsInput: VccSettingsInput!): GenericMutationResponse

  #
  adminEditBooking(
    bookingId: Int!
    details: AdminEditBookingInput!
  ): BookingResponse

  #
  updateBookingOwnerInformation(
    submission: BookingOwnerInformationInput!
  ): BookingResponse

  #
  activateFeatureFlag(
    organizationId: Int!
    featureFlagId: Int!
    active: Boolean
  ): ActivateFeatureFlagResponse

  #
  updateFeatureFlagById(
    featureFlagId: Int!
    active: Boolean!
    featureName: String
    description: String
  ): UpdateFeatureFlagResponse

  #
  editPropertyMCC(input: EditPropertyMCCInput!): MCCMutationResponse

  #
  updateVccUsageLimit(
    input: UpdateVccUsageLimitInput!
  ): UpdateVccUsageLimitResponse!

  #
  insertCardMCC(input: InsertCardMCCInput!): InsertCardMCCResponse

  #
  removeCardMCC(input: RemoveCardMCCInput!): String!

  #
  saveTrackingCode(
    trackingCodeInput: CostTrackingCodeInput!
  ): CostTrackingCodeResponse

  #
  deleteTrackingCode(trackingCodeId: Int!): CostTrackingCodeResponse
}

#
input AdminBookingCreateInput {
  #
  checkin: LodgeLinkDate!

  #
  checkout: LodgeLinkDate!

  #
  propertyId: Int!

  #
  rooms: [RoomInput!]

  #
  ownerId: Int!

  #
  organizationId: Int!

  #
  guests: [EditBookingGuestInput!]!

  #
  paymentMethod: PaymentMethod!

  #
  paymentCodeId: Int!

  #
  creditCard: CreditCardInput
}

#
input CreditCardInput {
  #
  newCard: Boolean

  #
  cardNickname: String

  #
  stripeToken: String
}

# The input necessary for adding / editing ceiling rates
input CeilingRateInput {
  #
  ceilingRateName: String!

  #
  active: Boolean!

  #
  startDate: DateTime!

  #
  endDate: DateTime!

  #
  value: Float!

  #
  roomTypeId: Int!

  #
  percentageMaxMarkup: Float!

  #
  percentageToTriggerMax: Float!

  #
  percentageOnGDS: Float!

  #
  organizationId: Int!
}

#
type CeilingRateMutationResponse implements MutationResponse {
  #
  message: String!

  #
  ceilingRate: CeilingRate
}

# The input necessary for adding/ editing inbound rates
input InboundRateInput {
  # Whether inbound rate is active
  active: Boolean!

  # Name of inbound rate - Min 1, Max 100 Chars
  planName: String!

  # Start date of inbound rate
  startDate: DateTime!

  # End date of inbound rate
  endDate: DateTime!

  # Value of inbound rate
  value: Float!

  # Rate type of inbound rate
  rateType: RateType!

  # Room type of inbound rate
  roomTypeId: Int!

  # Organization affiliated with the inbound rate
  organizationId: Int

  # Whether rate is the best available rate
  bestAvailableRate: Boolean

  # Days of inbound rate
  days: [InboundRateDayInput!]

  # Do we need to save the days?
  daysChanged: Boolean

  # Do we need to save restrictions?
  restrictionsChanged: Boolean

  # Are there restrictions?
  restrictions: [LodgeLinkDate!]
}

# The input necessary for adding/ editing inbound rate days
input InboundRateDayInput {
  # Day of week of inbound rate day
  dayOfWeek: Int!

  # Difference of inbound rate day
  difference: Float!
}

#
type InboundRateMutationsResponse implements MutationResponse {
  #
  message: String!

  #
  inboundRate: InboundRate
}

# The input necessary for adding/ editing inbound rates
input MarkupInput {
  # Is Markup active?
  active: Boolean!

  # Start date of Markup
  startDate: DateTime!

  # End date of Markup
  endDate: DateTime!

  # Value of Markup
  value: Float!

  # Rate type of Markup
  rateType: MarkupType!

  # Organization affiliated with the Markup
  organizationId: Int
}

#
type MarkupMutationsResponse implements MutationResponse {
  #
  message: String!

  #
  markup: Markup
}

# The input for adding/editing  supplier level markups
input SupplierMarkupInput {
  # Is Markup active?
  active: Boolean!

  # Start date of Markup
  startDate: DateTime!

  # End date of Markup
  endDate: DateTime!

  # Value of Markup
  value: Float!

  # Rate type of Markup
  rateType: MarkupType!
}

#
type SupplierMarkupMutationsResponse implements MutationResponse {
  #
  message: String!

  #
  supplierMarkup: SupplierMarkup
}

#
input TaxFeeCreateInput {
  #
  name: String!

  #
  description: String

  #
  category: TaxFeeCategory!

  #
  taxFeeType: TaxFeeType!

  #
  amount: Float!

  #
  appliedTo: TaxFeeAppliedTo!

  #
  calculatedOn: TaxFeeCalculatedOn!

  #
  maxDays: Int!

  #
  jurisdiction: LocationJurisdiction

  #
  locationId: Int

  #
  effectiveDate: LodgeLinkDate

  #
  expiryDate: LodgeLinkDate

  #
  applyToAll: Boolean
}

#
type TaxFeeResponse implements MutationResponse {
  #
  message: String!

  #
  taxFee: TaxFee
}

#
input TaxFeeEditInput {
  #
  id: Int!

  #
  name: String!

  #
  description: String

  #
  category: TaxFeeCategory!

  #
  taxFeeType: TaxFeeType!

  #
  amount: Float!

  #
  appliedTo: TaxFeeAppliedTo!

  #
  calculatedOn: TaxFeeCalculatedOn!

  #
  maxDays: Int!

  #
  jurisdiction: LocationJurisdiction

  #
  locationId: Int

  #
  effectiveDate: LodgeLinkDate

  #
  expiryDate: LodgeLinkDate
}

#
input TaxFeeTemplateEditInput {
  #
  id: Int

  #
  name: String!

  #
  description: String

  #
  taxesAndFees: [TaxesAndFeesInput!]

  #
  deletedTaxesAndFees: [Int!]
}

#
input TaxesAndFeesInput {
  #
  order: Int!

  #
  taxFeeId: Int!

  #
  createdAt: LodgeLinkDate
}

#
input TaxFeeTemplateBulkUpdateInput {
  #
  selected: [Int!]

  #
  excluded: [Int!]

  #
  searchParameters: TaxFeeTemplateSearchInput!

  #
  taxesAndFees: [BulkUpdateTemplateTaxFeeInput!]!
}

#
input BulkUpdateTemplateTaxFeeInput {
  #
  id: Int!

  #
  order: Int!

  #
  applyToAll: Boolean!

  #
  removeFromAll: Boolean!
}

#
type BulkTaxFeeTemplateResponse implements MutationResponse {
  #
  message: String!
}

# ReconcileGuestDay input
input ReconcileGuestDay {
  #
  bookingGuestId: Int!

  #
  date: LodgeLinkDate!

  #
  inboundRate: Float

  #
  markup: Float

  #
  markupType: ReconciliationMarkupType

  #
  calculationType: ReconciliationCalculationType

  #
  taxes: Float

  #
  fees: Float

  #
  roomId: Int

  #
  costTrackingCodeId: Int
}

#
enum ReconciliationMarkupType {
  #
  percentage

  #
  value
}

#
enum ReconciliationCalculationType {
  #
  rounded

  #
  unrounded
}

#
type BookingGuestDayResponse implements MutationResponse {
  #
  message: String!

  #
  guestDays: [BookingGuestDay!]
}

# ReconcileBulkGuestDays input
# Updating many Guest Days
input ReconcileBulkGuestDaysInput {
  #
  search: GuestDaySearchInput!

  #
  inboundRate: Float

  #
  markup: Float

  #
  taxes: Float

  #
  fees: Float

  #
  roomId: Int

  #
  costTrackingCodeId: Int

  #
  state: BookingGuestDayState

  #
  reason: String

  #
  selected: [Int!]

  #
  excluded: [Int!]

  #
  selectedRooms: [Int!]
}

# sapCustomerEdit input
# Updating specific sap customer
input SapCustomerEditInput {
  #
  sapCustomerId: Int

  #
  updatedSAPCustomer: SAPCustomerInput
}

# SAPCustomer input type
input SAPCustomerInput {
  #
  customerNumber: String

  #
  countryCode: CountryCode

  #
  paymentTerms: String

  #
  organizationId: Int
}

#
type SAPCustomerResponse implements MutationResponse {
  #
  message: String!

  #
  sapCustomer: SAPCustomer
}

#
input SapCustomerDeleteInput {
  #
  sapCustomerId: Int!
}

# sapSupplierEdit input
# Updating specific sap supplier
input SapSupplierEditInput {
  #
  sapSupplierId: Int

  #
  updatedSAPSupplier: SAPSupplierInput
}

# SAPSupplier input type
input SAPSupplierInput {
  #
  projectNumber: String

  #
  warehouseCode: String

  #
  vendorNumber: String

  #
  propertyId: Int
}

#
type SAPSupplierResponse implements MutationResponse {
  #
  message: String!

  #
  sapSupplier: SAPSupplier
}

#
input SapSupplierDeleteInput {
  #
  sapSupplierId: Int!
}

# SapCustomerCreateInput
# For creating new sap customer's
input SapCustomerCreateInput {
  #
  sapCustomer: SAPCustomerInput
}

# SapSupplierCreateInput
# For creating new sap suppliers's
input SapSupplierCreateInput {
  #
  sapSupplier: SAPSupplierInput
}

# SAPGeneralLedgerCreateInput
# For creating new sap gl codes
input SAPGeneralLedgerCreateInput {
  #
  sapGeneralLedger: SAPGeneralLedgerInput
}

# SAPGeneralLedger input type
input SAPGeneralLedgerInput {
  #
  country: String

  #
  propertyType: String

  #
  propertyPaymentMethod: PropertyPaymentMethod

  #
  vccProvider: VccProvider

  #
  type: LineItemType

  #
  accountNumber: String

  #
  clearingAccountNumber: String

  #
  description: String

  #
  propertyId: Int

  #
  taxFeeId: Int
}

#
type SAPGeneralLedgerResponse implements MutationResponse {
  #
  message: String!

  #
  sapGeneralLedger: SAPGeneralLedger
}

# SAPGeneralLedgerEditInput
# For editing sap gl codes
input SAPGeneralLedgerEditInput {
  #
  sapGeneralLedgerId: Int

  #
  updatedSAPGeneralLedger: SAPGeneralLedgerInput
}

# SAPGeneralLedgerDeleteInput
# For deleting sap GL codes
input SAPGeneralLedgerDeleteInput {
  #
  sapGeneralLedgerId: Int!
}

#
input TaxCodeCreateInput {
  #
  taxCode: String!

  #
  warehouseCode: WarehouseCode!

  #
  description: String
}

#
type TaxCodeResponse implements MutationResponse {
  #
  message: String!

  #
  taxCode: TaxCode
}

#
input TaxCodeEditInput {
  #
  id: Int!

  #
  taxCode: String!

  #
  warehouseCode: WarehouseCode!

  #
  description: String
}

#
input TaxCodeDeleteInput {
  #
  taxCodeId: Int!
}

# SAPItemCodeCreateInput
# For creating new sap item codes
input SAPItemCodeCreateInput {
  #
  sapItemCode: SAPItemCodeInput
}

# SAPItemCode input type
input SAPItemCodeInput {
  #
  country: String

  #
  propertyType: String

  #
  itemType: LineItemType

  #
  propertyId: Int

  #
  taxFeeId: Int

  #
  itemCode: String

  #
  taxExempt: Boolean
}

#
type SAPItemCodeResponse implements MutationResponse {
  #
  message: String!

  #
  sapItemCode: SAPItemCode
}

# SAPItemCodeEditInput
# For editing sap item codes
input SAPItemCodeEditInput {
  #
  sapItemCodeId: Int

  #
  updatedSAPItemCode: SAPItemCodeInput
}

# SAPItemCodeDeleteInput
# For deleting sap item codes
input SAPItemCodeDeleteInput {
  #
  itemCodeId: Int!
}

#
type ReconciliationErrorResponse implements MutationResponse {
  #
  message: String!

  #
  errors: [ReconciliationError!]

  #
  resolved: ReconciliationErrorResolved
}

# ReconciliationErrorResolved typedef
# Resolved from reconciliation error.
type ReconciliationErrorResolved {
  #
  propertyName: String

  #
  bookingNumber: String

  #
  guestDayStay: LodgeLinkDate

  #
  roomName: String

  #
  finalGuestDayStatus: String
}

# BookingGuestDay input
# Updating a Guest Day
input EditBookingGuestDayInput {
  #
  date: LodgeLinkDate!

  #
  bookingGuestId: Int!

  #
  firstName: String

  #
  lastName: String

  #
  patronId: Int

  #
  phoneNumber: String

  #
  company: String

  #
  position: String

  #
  referenceNumber: String

  #
  roomId: Int

  #
  inboundRate: Float

  #
  markup: Float

  #
  taxes: Float

  #
  fees: Float

  #
  status: BookingGuestDayStatus

  #
  state: BookingGuestDayState

  #
  costTrackingCodeId: Int

  #
  reason: String
}

#
input EditBookingGuestNamesInput {
  #
  selectedGuests: [SelectedGuests]

  #
  selectedDaysIdAndGuestId: [SelectedDaysIdAndGuestId!]!

  #
  selectedGuestIdsByRoomNight: [[Int!]]!

  #
  organizationId: Int
}

#
input SelectedGuests {
  #
  guestName: String

  #
  patronId: Int

  #
  crewId: Int
}

#
input SelectedDaysIdAndGuestId {
  #
  guestId: Int!

  #
  guestDayIds: [Int]!
}

#
input AdjustRoomNightValuesInput {
  #
  search: GuestDaySearchInput!

  #
  selectedRooms: [Int!]

  #
  selected: [Int!]

  #
  excluded: [Int!]

  #
  roomId: Int

  #
  inboundRate: Float!

  #
  markup: Float!

  #
  costTrackingCodeId: Int

  #
  reason: String
}

#
type EditRoomNightDaysResponse {
  #
  message: String!

  #
  roomNightDays: [RoomNightDay!]
}

#
input EditRoomNightDayInput {
  #
  organizationId: Int

  #
  bookingGuests: [GuestEditInput!]

  #
  date: LodgeLinkDate!

  #
  state: BookingGuestDayState

  #
  inboundRate: Float

  #
  markup: Float

  #
  taxes: Float

  #
  fees: Float

  #
  roomId: Int

  #
  costTrackingCodeId: Int

  #
  reason: String
}

#
input GuestEditInput {
  #
  id: Int!

  #
  guestName: String!

  #
  patronId: Int

  #
  crewId: Int
}

#
type EditRoomNightDayResponse {
  #
  message: String!

  #
  roomNightDay: RoomNightDay
}

#
input EditRoomNightDaysInput {
  #
  search: GuestDaySearchInput!

  #
  selected: [Int!]!

  #
  excluded: [Int!]!

  #
  selectedRooms: [Int!]!

  #
  roomId: Int

  #
  costTrackingCodeId: Int

  #
  inboundRate: Float

  #
  markup: Float

  #
  taxes: Float

  #
  fees: Float

  #
  state: BookingGuestDayState

  #
  reason: String

  #
  cancellationState: String

  #
  cancellationReason: String

  #
  averageLineItem: AverageLineItem
}

#
input AverageLineItem {
  #
  children: [AverageLineItem!]

  #
  type: LineItemType!

  #
  debit: Float

  #
  credit: Float

  #
  currencyCode: CurrencyCode

  #
  description: String

  #
  taxFee: LineItemTaxFee

  #
  order: Int
}

#
input LineItemTaxFee {
  #
  id: Int
}

#
type InitiateCreateAccountResponse implements MutationResponse {
  #
  message: String!

  #
  emailAddress: EmailAddress

  #
  tokenId: String
}

#
input IncidentalPreferencesSaveInput {
  #
  organizationId: Int!

  #
  acceptsIncidentals: Boolean!

  #
  markupFromProperty: Boolean!

  #
  markupPercent: Float
}

#
type IncidentalPreferencesSaveResponse {
  #
  message: String!

  #
  incidentalPreferences: IncidentalPreferences!
}

#
input InvoicePreferencesSaveInput {
  #
  organizationId: Int

  #
  invoiceType: InvoiceType

  #
  crewList: Boolean

  #
  jurisdiction: LocationJurisdiction
}

#
type InvoicePreferencesSaveResponse {
  #
  message: String!

  #
  invoicePreferences: InvoicePreferences
}

#
input FeeSchedulePreferencesSaveInput {
  #
  organizationId: Int

  #
  assistedBookings: Boolean

  #
  advancedOnboarding: Boolean

  #
  customReporting: Boolean
}

#
type FeeSchedulePreferencesSaveResponse {
  #
  message: String!

  #
  feeSchedulePreferences: FeeSchedulePreferences
}

# AdminChangePropertySupplierInput input
# Changing the Property Supplier from one to another
input AdminChangePropertySupplierInput {
  #
  propertyId: Int!

  #
  supplierId: Int!

  # Reason for this change
  reason: String
}

#
type ChangePropertySupplierResponse implements MutationResponse {
  #
  message: String!

  #
  property: Property

  #
  supplier: SupplierInfo
}

# AdminCreateSupplierInput input
# Updating the Supplier informaiton for a supplier
input AdminCreateSupplierInput {
  #
  organizationName: String!

  #
  companyEmail: EmailAddress!

  #
  supplierDescription: String

  #
  brand: String!

  # Size of the Organization
  companySize: CompanySize

  # Primary address of the organization
  primaryAddress: AddressInput

  # Billing address of the organization
  billingAddress: AddressInput

  #
  localeId: Int!

  #
  masterServiceAgreed: Boolean!
}

#
type CreateSupplierResponse implements MutationResponse {
  #
  message: String!

  #
  supplier: SupplierInfoFull
}

#
type CreateUserResponse implements MutationResponse {
  #
  message: String!

  #
  user: User
}

#
input AddUserInput {
  #
  organizationId: Int!

  #
  organizationName: String!

  #
  firstName: String!

  #
  lastName: String!

  #
  emailAddress: String!
}

#
type DeactivateMemberResponse implements MutationResponse {
  #
  message: String!

  #
  member: [OrganizationMember!]
}

# PatronEditInput input
# Editing a patron's details
input PatronEditInput {
  #
  patronId: Int!

  #
  firstName: String!

  #
  lastName: String!

  #
  company: String

  #
  position: String

  #
  phoneNumber: String
}

# PatronEditResponse Response
# Editing a patron's details
type PatronEditResponse {
  #
  message: String!

  #
  patron: Patron
}

#
input ChargesheetAdjustValuesInput {
  #
  chargesheetId: Int

  #
  reason: String

  #
  summedLineItem: SummedLineItem
}

#
input SummedLineItem {
  #
  children: [SummedLineItem!]

  #
  type: LineItemType!

  #
  debit: Float

  #
  credit: Float

  #
  currencyCode: CurrencyCode

  #
  description: String
}

# ChargesheetResponse typedef
# Defines a Customer and their information.
type ChargesheetResponse {
  #
  message: String

  #
  chargesheet: Chargesheet

  #
  exceptionalBookingIds: [Int!]
}

#
input ChargesheetCreateFromQueriesInput {
  #
  selectionQueries: [ChargesheetCreateFromRoomNightsInput!]!

  #
  propertyId: Int
}

#
input UpdateChargesheetCreditCardInput {
  #
  chargesheetId: Int!

  #
  paymentInformation: BookingPaymentInput!
}

# ChargesheetPrice input
input ChargesheetPriceInput {
  #
  chargesheetId: Int!

  #
  gst: Float!

  #
  creditCardFee: Float!

  #
  otherFees: Float!

  #
  total: Float!
}

# Chargesheet Update input
# Updating multiple chargesheets
input ChargesheetUpdateInput {
  #
  chargesheetStatus: ChargesheetStatus!

  #
  chargeCreditCard: Boolean!
}

#
type PropertyMutationResponse implements MutationResponse {
  #
  message: String!

  #
  submission: Property
}

# ConnectorCreationInput Mutation
input ConnectorCreationInput {
  # Name of the connector being created
  name: String

  # URL of the connector
  url: String

  # Connection Type for connector
  connectionTypeId: Int
}

#
type ConnectorMutationResponse implements MutationResponse {
  #
  message: String!

  #
  submission: Connector
}

#
type FolioResponse implements MutationResponse {
  #
  message: String!

  #
  folio: Folio
}

#
input FolioRequest {
  #
  bookingId: Int!

  #
  subject: String!

  #
  message: String!
}

#
type FolioMessageResponse implements MutationResponse {
  #
  message: String!

  #
  notification: Notification
}

#
input FolioChargeSaveInput {
  #
  folioId: Int!

  #
  folioCharges: [FolioChargeInput!]!
}

#
input FolioChargeInput {
  #
  id: Int

  #
  date: LodgeLinkDate

  #
  cardNumber: String

  #
  amount: Float

  #
  provider: String
}

#
type FolioChargeSaveResponse {
  #
  message: String!

  #
  folioCharges: [FolioCharge!]
}

#
input ManuallyQueueFolioInput {
  #
  folioFormatId: Int!

  #
  queueFolioManually: FolioManuallyQueueInput!
}

#
input FolioManuallyQueueInput {
  #
  id: Int!

  #
  fileName: String

  #
  filePath: String
}

#
type ManuallyQueueFolioResponse implements MutationResponse {
  #
  message: String!
}

# The input needed to create or update a Note
input NoteInput {
  #
  id: Int

  #
  name: String!

  #
  body: String!

  # The Organization that this note is affiliated with
  organizationId: Int!
}

#
type NoteResponse implements MutationResponse {
  #
  message: String!

  #
  Note: Note
}

# The input needed to update a VCC Status
input VCCStatusInput {
  #
  bookingNumber: String!

  #
  bookingId: Int!
}

# VCCResponse typedef
type VCCResponse {
  #
  vcc: VCC

  #
  vccActivity: [VCCActivity]
}

# The input needed to create a note for a happyfox ticket
input TicketUpdateInput {
  #
  id: Int

  #
  message: String!
}

# The input needed to create a new happyfox ticket
input TicketInput {
  #
  subject: String

  #
  text: String

  #
  bookingNumber: String

  #
  category: TicketCategory
}

# The input needed to update an existing HappyFox ticket
input UpdateTicketInput {
  #
  subject: String

  #
  helpDeskId: Int!

  #
  bookingNumber: String

  #
  status: TicketStatus
}

# The input needed to perform bulk operations on HappyFox tickets
input TicketBulkInput {
  #
  subject: String

  #
  bookingNumber: String

  #
  status: TicketStatus

  #
  selected: [Int!]

  #
  excluded: [Int!]

  #
  search: TicketSearchInput
}

# BulkTicketsUpdateResponse typedef
type BulkTicketsUpdateResponse {
  #
  updateSuccessful: Boolean

  #
  successfulUpdates: [Int!]

  #
  failedUpdates: [Int!]
}

# BulkTicketsDeleteResponse typedef
type BulkTicketsDeleteResponse {
  #
  deleteSuccessful: Boolean

  #
  successfulDeletes: [Int!]

  #
  failedDeletes: [Int!]
}

# DeleteTicketResponse typedef
type DeleteTicketResponse {
  #
  deleted: Boolean
}

#
input LineItemCreateInput {
  #
  id: Int

  #
  group: LineItemGroupInput

  #
  parent: LineItemInput

  #
  children: [LineItemInput!]

  #
  bookingGuestIds: [Int!]!

  #
  guestDayIds: [Int!]

  #
  date: LodgeLinkDate!

  #
  order: Int

  #
  type: LineItemType!

  #
  debit: Float

  #
  credit: Float

  #
  currencyCode: CurrencyCode

  #
  description: String

  #
  taxFee: LineItemTaxFee
}

#
input LineItemGroupInput {
  #
  id: Int

  #
  folio: FolioInput

  #
  lineItems: [LineItemInput!]
}

#
input LineItemInput {
  #
  id: Int

  #
  group: LineItemGroupInput

  #
  parent: LineItemInput

  #
  children: [LineItemInput!]

  #
  bookingGuestIds: [Int!]!

  #
  guestDayIds: [Int!]

  #
  date: LodgeLinkDate!

  #
  order: Int

  #
  type: LineItemType!

  #
  debit: Float

  #
  credit: Float

  #
  currencyCode: CurrencyCode

  #
  description: String

  #
  taxFee: LineItemTaxFee
}

#
type LineItemCreateResponse {
  #
  message: String!

  #
  lineItem: LineItem!
}

#
input LineItemUpdateInput {
  #
  recalculateCost: Boolean

  #
  count: Int

  #
  lineItems: [LineItemInput!]
}

#
type LineItemUpdateResponse {
  #
  message: String!

  #
  lineItems: [LineItem!]!
}

#
input LineItemGroupCreateInput {
  #
  id: Int

  #
  folio: FolioInput

  #
  lineItems: [LineItemInput!]

  #
  markAsReconciled: Boolean
}

#
type LineItemGroupCreateResponse {
  #
  message: String

  #
  lineItemGroup: LineItemGroup
}

#
input LineItemDeleteInput {
  #
  lineItemIds: [Int!]!
}

#
type LineItemDeleteResponse {
  #
  message: String!
}

#
input LineItemGroupGenerateInput {
  #
  id: Int
}

#
type LineItemGroupGenerateResponse {
  #
  message: String

  #
  lineItemGroup: LineItemGroup
}

#
input AdjustLineItemValuesInput {
  #
  chargesheetId: Int

  #
  search: GuestDaySearchInput

  #
  selectedRooms: [Int!]

  #
  selected: [Int!]

  #
  excluded: [Int!]

  #
  roomId: Int

  #
  costTrackingCodeId: Int

  #
  totalLineItem: AverageLineItem

  #
  markAsReconciled: Boolean

  #
  reason: String
}

# ConnectorConnectionCreationInput Mutation
input ConnectorConnectionCreationInput {
  #
  active: Boolean!

  #
  connectorId: Int!

  #
  entityTypeId: Int!

  #
  entityId: Int!

  #
  connectionTypeId: Int!

  #
  chainCode: String

  #
  connectionPropertyCode: String

  #
  primaryRoomCode: Boolean
}

#
type ConnectorConnectionMutationResponse implements MutationResponse {
  #
  message: String!

  #
  submission: ConnectorConnection
}

#
type RoleResponse implements MutationResponse {
  #
  message: String!

  #
  role: Role!
}

# Permission creation input
input PermissionCreateInput {
  # Title of the permission to be created
  title: String

  #
  description: String
}

#
type PermissionResponse implements MutationResponse {
  #
  message: String!

  #
  permission: Permission!
}

# Permission edit input
input PermissionEditInput {
  #
  id: Int!

  #
  title: String

  #
  description: String
}

# Role modification input
input RoleModificationInput {
  # Role ID
  id: Int!

  # Permission IDs for permissions to be added/removed
  permissionIds: [Int!]
}

# ApprovalAction input
input ApprovalActionInput {
  #
  id: Int!

  #
  action: ApprovalAction!

  #
  comments: String
}

#
enum ApprovalAction {
  #
  Approve

  #
  Reject
}

# ApprovalFlowConfig input
# Creating/Updating the config for an approval flow
input ApprovalFlowConfigInput {
  #
  config: String!
}

#
type ApprovalConfigMutationResponse implements MutationResponse {
  #
  message: String!

  #
  approvalFlowConfig: ApprovalFlowConfig
}

# ApprovalConfigParamsInput input
# Creating/Updating the parameters for an approval flow configuration.
input ApprovalConfigParamsInput {
  #
  params: String!
}

#
type ApprovalConfigParamsMutationResponse implements MutationResponse {
  #
  message: String!

  #
  approvalConfigParams: ApprovalConfigParams
}

# VccBackupCreationInput Mutation
input VccBackupCreationInput {
  #
  active: Boolean!

  #
  expirationMMYY: String!

  #
  amount: String!

  #
  country: String

  #
  limitStartDate: String

  #
  limitEndDate: String
}

#
type VccBackupMutationResponse implements MutationResponse {
  #
  message: String!

  #
  submission: VCCBackup
}

#
type VccAutomaticMutationResponse implements MutationResponse {
  #
  message: String!

  #
  providerCardId: Int
}

# VccUpdateMutationResponse typedef
type VccUpdateMutationResponse {
  #
  vccUpdatedAmount: Float!

  #
  bookingNumber: String!

  #
  approvalRequired: Boolean!
}

# VccSettingsInput typedef
input VccSettingsInput {
  #
  roomDeposit: Int

  #
  bufferPercentage: Int

  #
  maxBackupVcc: Int
}

# AdminEditBooking input
# Updating specific booking info
input AdminEditBookingInput {
  #
  bookingOrigin: String

  #
  confirmationNumber: String

  #
  confirmationMessage: String

  #
  cancellationMessage: String

  #
  newBookingStatus: BookingStatus
}

# BookingOwnerInformationInput
# Update the owner information for a booking from the Admin Portal
input BookingOwnerInformationInput {
  #
  bookingId: Int!

  #
  bookingOwner: Int!

  #
  bookingCompany: Int!

  #
  paymentCodeId: Int!
}

#
type ActivateFeatureFlagResponse implements MutationResponse {
  #
  message: String!
}

#
type UpdateFeatureFlagResponse implements MutationResponse {
  #
  message: String!
}

# EditPropertyMCCInput typedef
input EditPropertyMCCInput {
  #
  propertyId: Int!

  #
  addedMCCs: [String!]

  #
  removedMCCs: [String!]
}

#
type MCCMutationResponse {
  #
  addedPropertyMCCs: [PropertyMCC]!

  #
  removedPropertyMCCs: [PropertyMCC]!
}

#
input UpdateVccUsageLimitInput {
  #
  bookingNumber: String!

  #
  usageLimit: Float!

  #
  limitStartDate: String

  #
  limitEndDate: String
}

#
type UpdateVccUsageLimitResponse {
  #
  providerCardId: Int!
}

# InsertCardMCCInput typedef
input InsertCardMCCInput {
  #
  bookingId: Int!

  #
  mcc: [String!]!
}

#
type InsertCardMCCResponse {
  #
  CardId: Int

  #
  CardTokenNumber: String

  #
  MCC: [String]
}

# RemoveCardMCCInput typedef
input RemoveCardMCCInput {
  #
  bookingId: Int!

  #
  mcc: [String!]!
}

# Supplier Mutation typedef
type SupplierMutations {
  # Edit supplier
  editSupplier(supplierInput: EditSupplierInput): SupplierInfoResponse

  # Edit a Property - TBI
  editProperty(propertyForm: EditPropertyInput): PropertyMutationResponse

  # Create a Property - TBI
  addProperty(propertyForm: AddPropertyInput): PropertyMutationResponse

  # Removes a Property -TBI
  removeProperty(propertyId: Int!): PropertyMutationResponse

  #
  archiveProperty(propertyId: Int!): PropertyMutationResponse

  #
  publishProperty(propertyId: Int!): PropertyMutationResponse

  # Connected rates
  createConnectedRate(
    submission: ConnectedRateInput!
  ): ConnectedRateMutationResponse

  #
  editConnectedRate(
    id: Int!
    submission: ConnectedRateInput!
  ): ConnectedRateMutationResponse

  #
  deleteConnectedRate(id: Int!): ConnectedRateMutationResponse

  #
  findOrCreateCountry(
    submission: LodgeLinkCountryInput!
  ): LodgeLinkCountryMutationResponse

  #
  findOrCreateRegion(
    submission: LodgeLinkRegionInput!
  ): LodgeLinkRegionMutationResponse

  #
  findOrCreateCounty(
    submission: LodgeLinkCountyInput!
  ): LodgelinkCountyMutationResponse

  #
  findOrCreateLocation(
    submission: LodgeLinkLocationInput!
  ): LodgeLinkLocationMutationResponse

  #
  addPlace(submission: LodgeLinkPlaceInput!): LodgeLinkPlaceMutationResponse

  # toggle a property connection active status
  togglePropertyConnection(propertyId: Int!): [Connection!]

  # change property payment method at single property level
  changePropertyPaymentMethod(
    propertyId: Int!
    paymentMethod: String!
  ): PropertyPaymentChangeResponse

  # change property payment method for all properties under a single supplier
  changeSupplierPropertyPaymentMethod(
    supplierId: Int!
    paymentMethod: String!
  ): PropertyPaymentChangeResponse
}

# EditSupplierInput input
# Updating the Supplier informaiton for a supplier
input EditSupplierInput {
  #
  companyEmail: EmailAddress

  #
  brand: String

  # Size of the Organization
  companySize: CompanySize

  # Primary address of the organization
  primaryAddress: AddressInput

  # Billing address of the organization
  billingAddress: AddressInput
}

#
type SupplierInfoResponse implements MutationResponse {
  #
  message: String!

  # Returns the submitted Supplier
  supplier: SupplierInfo
}

# EditPropertyInput Mutation
input EditPropertyInput {
  # Id of the property to update
  id: Int!

  # Name of the property - Min 1, Max 100 Chars
  name: String

  # Property slug, hyphenated name - Min 1, Max 50 Chars
  slug: String

  # Email of the property
  emailAddress: String

  # Property Type
  typeId: Int

  # Amenities to add or update
  amenities: [PropertyAmenityInput]

  # Property Images
  propertyImages: [PropertyImageInput]

  # Property Image id's to Delete
  deletedPropertyImages: [Int]

  # Address of the Property - Max 255 Chars
  address: String

  # Availability of Property
  availability: String

  # Link to video tour - Max 100 Chars
  tourLink: String

  # Description of the Property - Max 255 Chars
  description: String

  # Short description of the Property - Max 255 Chars
  shortDescription: String

  # Flag determining if property is published
  published: Boolean

  # Latitude and longitude coordinates of a location
  geo: GeoInput

  # Postal Code of the property - Max 10 Chars
  postalCode: String

  # Currency Type
  currency: String

  # Rooms on a property to add/ edit
  rooms: [EditRoomsInput!]

  # Rooms on a property to delete
  deletedRooms: [Int!]

  # Affiliations linked to a Property
  affiliations: [Int!]

  # Sets stand by options for a property
  standBy: Boolean

  #
  phoneNumber: String

  #
  totalCapacity: Int

  #
  gdsParams: [ConnectionCreationInput]

  #
  policyParams: PropertyPolicyInput

  # Property Folio Format
  folioFormat: FolioFormatInput

  # city of the property
  city: String

  # County of the property
  county: String

  # region of the property
  region: String

  # country of the property
  country: String

  # region abbreviation of the property
  regionAbbreviation: String

  # country abbreviation of the property
  countryAbbreviation: String
}

# PropertyAmenity input
input PropertyAmenityInput {
  # ID of Amenity details to update
  id: Int

  # Determines if an amenity is a top amentiy
  topAmenity: Boolean

  # Link to the Amenity
  amenityId: Int

  # Order in which the property orders it's amenities
  sortOrder: Int
}

# Property Image Input
input PropertyImageInput {
  # Id of the Image to edit
  id: Int

  # Link to file
  href: String

  # Order of Property Image
  priorityOrder: Int

  # ThumbHref of Property Image
  retinaHref: String

  # This image is a card image
  card: Boolean

  # Title of image
  title: String

  # Description of image
  description: String

  # Filetype image
  fileType: String
}

# The input necessary for adding/ editing rooms on properties
input EditRoomsInput {
  # ID of the room to update
  id: Int

  # Name of the room - Min 1, Max 100 Chars
  name: String

  # Short descriptions of the room
  description: String

  # Total rooms available
  availableRooms: Int

  # Capacity of the room
  guestsPerRoom: Int

  # Is this available to book?
  available: Boolean

  # Number of bathrooms in a room
  bathrooms: Int

  # Room Type
  roomTypeId: Int

  # Is this room active? Default false
  active: Boolean

  # extra fields if this is a connected room type
  connectionData: ConnectedRoomTypeInput
}

# Connected room type mutation input
input ConnectedRoomTypeInput {
  #
  connectionRoomTypeCode: String
}

# ConnectionCreationInput Mutation
input ConnectionCreationInput {
  #
  connectorId: Int!

  #
  connectionPropertyCode: String!

  #
  chainCode: String!

  #
  active: Boolean!

  #
  primaryRoomCode: Boolean!
}

# PropertyPolicyInput Mutation
input PropertyPolicyInput {
  #
  checkin: DateTime

  #
  checkout: DateTime

  #
  hoursToCancel: Int

  #
  propertyId: Int
}

# FolioFormat input
input FolioFormatInput {
  # ID of Folio Format to update
  id: Int

  # Name of Folio Format
  name: String

  # Folio Format label
  label: String
}

# AddPropertyInput input
input AddPropertyInput {
  # Name of the property - Min 1, Max 100 Chars
  name: String!

  # Property slug, hyphenated name - Min 1, Max 50 Chars
  slug: String!

  # Email of the property
  emailAddress: EmailAddress!

  # Postal Code of the property - Max 10 Chars
  postalCode: String

  # Property Type
  typeId: Int!

  # Latitude and longitude coordinates of a location
  geo: GeoInput!

  # All amenities for a property
  amenities: [PropertyAmenityInput]

  # Property Images
  propertyImages: [PropertyImageInput]

  # Address of the Property - Max 255 Chars
  address: String

  # Availability of Property
  availability: String

  # Link to video tour
  tourLink: String

  # Description of the Property - Max 255 Chars
  description: String

  # Short description of the Property - Max 255 Chars
  shortDescription: String

  # Flag determining if property is published
  published: Boolean

  # Currency Type - Min 1, Max 50 Chars
  currency: String

  # Rooms on a property to add/ edit
  rooms: [EditRoomsInput!]

  # Affiliations linked to a Property
  affiliations: [Int!]

  # Property phone number
  phoneNumber: String

  # Property total capacity
  totalCapacity: Int

  # GDS Params
  gdsParams: [ConnectionCreationInput]

  # property policy input
  policyParams: PropertyPolicyInput

  # Business registration number
  businessRegistrationNumber: String

  # Tax Identification Number
  tin: String

  # Legal entity name
  legalEntityName: String

  # GST number
  gstNumber: String

  # PST number
  pstNumber: String

  # city of the property
  city: String

  # County of the property
  county: String

  # region of the property
  region: String

  # country of the property
  country: String

  # region abbreviation of the property
  regionAbbreviation: String

  # country abbreviation of the property
  countryAbbreviation: String
}

# Connected rate mutation input
input ConnectedRateInput {
  #
  rateCode: String

  #
  rateName: String!

  #
  ratePlanType: String!

  #
  connectionId: Int!

  #
  organizationId: Int

  #
  active: Boolean!
}

#
type ConnectedRateMutationResponse implements MutationResponse {
  #
  message: String!

  #
  submission: ConnectedRate
}

# LodgeLinkCountryInput Mutation
input LodgeLinkCountryInput {
  #
  name: String!

  #
  abbreviation: String!

  #
  active: Boolean!
}

#
type LodgeLinkCountryMutationResponse {
  #
  country: LodgeLinkCountry
}

# LodgeLinkRegionInput Mutation
input LodgeLinkRegionInput {
  #
  name: String!

  #
  abbreviation: String!

  #
  countryId: Int!

  #
  active: Boolean!
}

#
type LodgeLinkRegionMutationResponse {
  #
  region: LodgeLinkRegion
}

# LodgeLinkCountyInput Mutation
input LodgeLinkCountyInput {
  #
  name: String!

  #
  regionId: Int!
}

#
type LodgelinkCountyMutationResponse {
  #
  county: LodgeLinkCounty
}

#
type LodgeLinkCounty {
  #
  id: Int!

  #
  name: String!

  #
  region: LodgeLinkRegion
}

# LodgeLinkLocationInput Mutation
input LodgeLinkLocationInput {
  #
  name: String!

  #
  type: String!

  #
  regionId: Int!

  #
  latitude: Int

  #
  longitude: Int
}

#
type LodgeLinkLocationMutationResponse {
  #
  location: LodgeLinkLocation
}

# LodgeLinkPlaceInput Mutation
input LodgeLinkPlaceInput {
  #
  locationName: String!

  #
  countyName: String!

  #
  regionName: String!

  #
  countryName: String!

  #
  regionAbbreviation: String!

  #
  countryAbbreviation: String!

  #
  latitude: Float

  #
  longitude: Float
}

#
type LodgeLinkPlaceMutationResponse {
  #
  locationId: Int!

  #
  countyId: Int
}

# PropertyPaymentChangeResponse response
# Response for mutations relating to a change in a Property Payment Method
type PropertyPaymentChangeResponse implements MutationResponse {
  # Message returned from mutation
  message: String!
}

#
type UserJoinRequestResponse implements MutationResponse {
  #
  message: String!

  #
  userJoinRequest: UserJoinRequest
}

#
type PartnerHubMutations {
  #
  initiatePartnerAuthentication(
    emailAddress: String!
  ): PartnerInitiateAuthenticationResponse

  #
  generatePartnerMagicLink(input: GeneratePartnerMagicLinkInput!): String
}

# PartnerInitiateAuthenticationResponse
# Response for the initiateAuthentication mutation
type PartnerInitiateAuthenticationResponse implements MutationResponse {
  #
  message: String!

  #
  properties: [Property]!
}

# GeneratePartnerMagicLink Input
input GeneratePartnerMagicLinkInput {
  # Property id
  propertyId: Int!

  # Email Address of the requester
  emailAddress: String!
}

# AuthenticateOTP Input
input AuthenticateOTPInput {
  # Encrypted details related to the OTP
  verificationCode: String!

  # 6 digit OTP code
  otp: String!

  # Email Address of the requester
  emailAddress: String!

  # Initialization vector for the decryption
  iv: String!
}

# PaymentChangeResponse response
# Response for mutations, includes an http code and a list of errors
type PaymentChangeResponse implements MutationResponse {
  # Message returned from mutation
  message: String!
}

#
type CreateCustomCategoryResponse implements MutationResponse {
  #
  customCategory: CustomCategory

  #
  message: String!
}

#
type CreateSubCustomCategoriesResponse implements MutationResponse {
  #
  customSubCategories: [CustomSubCategory!]

  #
  customCategory: CustomCategory

  #
  message: String!
}

#
type UpdateCustomCategoriesResponse implements MutationResponse {
  #
  customCategory: CustomCategory

  #
  message: String!
}

#
type UpdateCustomSubCategoriesResponse implements MutationResponse {
  #
  customSubCategory: CustomSubCategory

  #
  message: String!
}

#
enum AccountStatus {
  #
  Available

  #
  Unavailable
}

#
input BookingGuestSearchInput {
  #
  bookingId: Int

  #
  orgId: Int

  #
  guestName: String

  #
  dateRange: CheckinCheckout

  #
  top: Int!

  #
  skip: Int!
}

# LocationType typedef
type LocationType {
  #
  id: Int

  # Name of LocationType
  name: String!
}

#
enum UniqueCrewIdentifierValue {
  #
  employeeID

  #
  emailAddress
}

# ChargesheetProject typedef
type ChargesheetProject {
  #
  projectName: String

  #
  projectCode: String

  #
  projectOwner: String
}

# ChargesheetDay input
input ChargesheetDay {
  #
  guestDayId: Int!

  #
  bookingGuestId: Int!

  #
  bookingGuestDayState: BookingGuestDayState

  #
  date: LodgeLinkDate!

  #
  inbound: Float!

  #
  markup: Float!
}

#
enum CurrencyName {
  #
  CAD

  #
  USD
}

#
input ChargesheetCreateInput {
  #
  guestDays: [ChargesheetDay!]

  #
  propertyId: Int
}

# InputError
# Input Errors for mutation responses
type InputError {
  # The input that threw an error
  key: String!

  # A reason for the error
  message: String!
}

# InvoiceEntry typedef
type InvoiceEntry {
  #
  bookingCustomerId: Int

  #
  bookingId: Int

  #
  bookingNumber: String

  #
  chargesheetId: Int

  #
  costTrackingCode: String

  #
  countryCode: String

  #
  customerId: Int

  #
  date: DateTime

  #
  dateInPropertyTimeZone: String

  #
  description: String

  #
  esbBatchId: String

  #
  esbBatchLineCount: Int

  #
  folioId: Int

  #
  guestNames: String

  #
  inbound: Float

  #
  invoiceNumber: String

  #
  lineItemId: Int

  #
  lineItemType: String

  #
  outbound: Float

  #
  parentId: Int

  #
  paymentCode: String

  #
  propertyId: Int

  #
  propertyTimeZone: String

  #
  propertyType: String

  #
  roomIndex: Int

  #
  roomNightState: BookingGuestDayState

  #
  roomType: String

  #
  stripeChargeId: String

  #
  taxFeeId: Int

  #
  taxFeeRate: Float

  #
  vccProvider: String
}

#
type InvoicePayload {
  #
  invoiceEntries: [InvoiceEntry]
}

#
input LineItemGroupDeleteInput {
  #
  id: Int!
}

#
type LineItemGroupDeleteResponse {
  #
  message: String!
}

#
type LineItemAverageAmounts {
  #
  averageDebitAmount: Int

  #
  averageCreditAmount: Int
}

#
type LineItemTotalAmounts {
  #
  totalDebitAmount: Int

  #
  totalCreditAmount: Int
}

#
input GetRoomsInput {
  #
  propertyId: Int!
}

#
input TaxFeeTemplateCreateInput {
  #
  name: String!

  #
  description: String

  #
  taxesAndFees: [TaxesAndFeesInput!]
}

# BookingGuestDaySearchInput typedef
input BookingGuestDaySearchInput {
  #
  date: LodgeLinkDate

  #
  bookingGuestId: Int
}

# CustomerInfoFull typedef
# Defines a Customer and their information.
type CustomerInfoFull {
  #
  id: Int!

  #
  name: String!

  #
  domainSuffix: String!

  #
  primaryEmailAddress: String!

  #
  companySize: CompanySize

  #
  users: OrganizationUsers

  #
  creditApplications: [CreditApplication!]

  #
  paymentCodes: [PaymentCode!]

  #
  notes: [Note]

  #
  primaryBusinessAddress: Address

  #
  billingAddress: Address

  #
  masterServiceAgreementVersion: String

  #
  masterServiceAgreement: MasterServiceAgreement

  #
  customMSA: Boolean

  #
  industry: Industry

  #
  annualAccommodationExpense: AnnualAccommodationExpense

  #
  dutyOfCareSettings: OrganizationDutyOfCareSettings

  #
  status: String

  #
  autoApproveMembers: Boolean

  #
  featureFlagMapping: [FeatureFlagMapping!]

  #
  featureFlagMappingCount: Int

  #
  featureFlags: [FeatureFlag]
}

#
type BookingRiskRating {
  #
  id: Int!

  #
  bookingId: Int!

  #
  riskRating: RiskRating!

  #
  logMessageAccount: String

  #
  logMessageBalance: String

  #
  logMessagePaymentDSO: String

  #
  payingOrganization: OrganizationCondensed!

  #
  pastDue30D: Float!

  #
  totalAmountOwing: Float!

  #
  sapCreditLimit: Float!

  #
  withinDSO: Boolean!

  #
  paymentHistory90D: Boolean!

  #
  currency: CurrencyCode!

  #
  dso: Int!

  #
  paymentTerms: String!

  #
  tier: String!
}

#
type OrganizationRiskAssessment {
  #
  id: Int!

  #
  payingOrganization: OrganizationCondensed!

  #
  balancePastDue30D: Float!

  #
  totalAmountOwing: Float!

  #
  sapCreditLimit: Float!

  #
  withinDSO: Boolean!

  #
  paymentHistory90D: Boolean!

  #
  currency: CurrencyCode!

  #
  uninvoicedSpend: Float!

  #
  dso: Int!

  #
  paymentTerms: String!

  #
  tier: String!
}

#
type Queue {
  #
  id: Int

  #
  pnrLocator: String

  #
  bookingId: Int

  #
  currentQueueNumber: Int

  #
  connected: Int

  #
  createdAt: LodgeLinkDate!

  #
  updatedAt: LodgeLinkDate

  #
  status: String

  #
  queueFailureReason: QueueFailureReason
}

#
enum QueueFailureReason {
  #
  SABRE_API_ERROR

  #
  API_RESPONSE_FAILURE

  #
  OTHER_ERROR

  #
  SUCCESS
}

# TaxFeeCalculationTotal typedef
type TaxFeeCalculationTotal {
  # List of the taxes and fees and their calculated values for given value
  taxCalculations: [TaxFeeCalculation!]

  #
  total: Currency!
}

# TaxFeeCalculation typedef
type TaxFeeCalculation {
  # Name of the Tax or Fee
  name: String!

  # Rate amount (5%, $50)
  value: String!

  # Calculated Amount
  amount: Float!

  # Category of the taxfee
  category: TaxFeeCategory
}

# Financial Admin typedef
# Defines a Lodgelink financial admin
type LodgeLinkFinancialAdmin {
  #
  id: Int!

  #
  identity: Identity!

  #
  role: Role!
}

# WorkFlow typedef
type WorkFlow {
  #
  id: Int!

  #
  slug: String!

  #
  description: String!
}

# VccTransactionResponse typedef
type VccTransactionResponse {
  #
  vccNumberOfPage: Int

  #
  vccNumberOfRecord: Int

  #
  vccTransactions: [VccTransaction!]
}

# Virtual Credit Card Transactions typedef
type VccTransaction {
  #
  id: Int!

  #
  cardId: Int

  #
  maskedCardNumber: String

  #
  transactionDate: LodgeLinkDate

  #
  transactionAmount: Float

  #
  transactionCurrencyCode: CurrencyCode

  #
  transactionTypeDesc: String

  #
  transactionType: String

  #
  transactionTypeId: Int

  #
  transactionTypeCode: String

  #
  settlementAmount: Float

  #
  settlementCurrencyCode: CurrencyCode

  #
  settlementDate: LodgeLinkDate

  #
  settlementStatus: String

  #
  description: String

  #
  referenceNumber: String

  #
  channelName: String

  #
  cardOwnerName: String

  #
  cardTransactionSource: String

  #
  terminalType: String

  #
  errorCode: String

  #
  errorDescription: String

  #
  merchant: String

  #
  merchantCity: String

  #
  feeAmount: Float

  #
  responseCode: String

  #
  responseDescription: String

  #
  mcc: String

  #
  isReversed: Boolean

  #
  reversalType: String

  #
  reversedDateTime: String
}

# GdsError typedef
# Defines the error properties of GDS API call
type GdsError {
  #
  code: String

  #
  message: String!
}

# GdsRoom typedef
# Defines the booked rooms with GDS
type GdsRoom {
  #
  roomIndex: String!

  #
  confirmationNumber: String!

  #
  locator: String!

  #
  productId: String!

  #
  roomTypeCode: String!

  #
  productCode: String!

  #
  taxes: GdsTaxes

  #
  fees: GdsTaxes

  #
  ratesPerDay: [GdsRatesPerDay]
}

# GdsTaxes typedef
# Defines the taxes and fees properties of GDS API call
type GdsTaxes {
  #
  amount: Int!

  #
  enumeration: [Int]
}

# GdsRatesPerDay typedef
# Defines room wize rates per day properties of GDS API call
type GdsRatesPerDay {
  #
  startDate: String!

  #
  endDate: String!

  #
  amountBeforeTax: String!
}

#
type GdsErrorResponse implements GdsResponse {
  #
  success: Boolean!

  #
  locator: String!

  #
  updateToken: String

  #
  error: GdsError
}

# GdsResponse - An interface for what a GDS response should look like
interface GdsResponse {
  # The response of GDS API call
  success: Boolean

  #
  locator: String

  #
  updateToken: String
}

#
type GdsUpdateResponse implements GdsResponse {
  #
  success: Boolean

  #
  locator: String

  #
  updateToken: String

  #
  restOfBookedRooms: [GdsRoom!]

  #
  bookedRooms: [GdsRoom!]

  #
  taxes: GdsTaxes

  #
  fees: GdsTaxes

  #
  error: GdsError
}

#
type QueueServiceResponse {
  #
  success: Boolean

  #
  status: Int

  #
  message: String
}

#
enum OrganizationPermission {
  #
  ADM_BOOKING_CREATE

  #
  ADM_DASH_VIEW

  #
  ADM_CUST_MGMT_VIEW

  #
  ADM_CUST_REQ_VIEW

  #
  ADM_SUPP_MGMT_VIEW

  #
  ADM_RATE_CARD_VIEW

  #
  ADM_TAX_TMPL_VIEW

  #
  ADM_USER_MGMT_VIEW

  #
  ADM_BOOK_MGMT_VIEW

  #
  ADM_GUEST_DAYS_VIEW

  #
  ADM_RECON_VIEW

  #
  ADM_FOLIO_VIEW

  #
  ADM_PAYMENT_VIEW

  #
  ADM_VCC_VIEW

  #
  ADM_TICKET_VIEW

  #
  ADM_INVOICE_VIEW

  #
  ADM_APPROVAL_VIEW

  #
  ADM_CONN_MGMT_VIEW

  #
  ADM_ROLE_MGMT_VIEW

  #
  ADM_CUST_MGMT_EDIT

  #
  ADM_CUST_REQ_EDIT

  #
  ADM_SUPP_MGMT_EDIT

  #
  ADM_RATE_CARD_EDIT

  #
  ADM_TAX_TMPL_EDIT

  #
  ADM_USER_MGMT_EDIT

  #
  ADM_BOOK_MGMT_EDIT

  #
  ADM_GUESTDAYS_EDIT

  #
  ADM_RECON_EDIT

  #
  ADM_FOLIO_EDIT

  #
  ADM_PAYMENT_EDIT

  #
  ADM_VCC_EDIT

  #
  ADM_TICKET_EDIT

  #
  ADM_INVOICE_EDIT

  #
  ADM_APPROVAL_EDIT

  #
  ADM_CONN_MGMT_EDIT

  #
  ADM_ROLE_MGMT_EDIT

  #
  ADM_FLAG_MGMT_VIEW

  #
  ADM_FLAG_MGMT_EDIT

  #
  CREATE_BOOKING

  #
  CREATE_CREDIT_APPLICATION

  #
  EDIT_BOOKING

  #
  EDIT_CREW

  #
  EDIT_CREDIT_APPLICATION

  #
  EDIT_ORGANIZATION

  #
  EDIT_ORGANIZATION_CONTACTS

  #
  FINALIZE_CREDIT_APPLICATION

  #
  GET_CREW

  #
  INVITE_ORGANIZATION_MEMBERS

  #
  MANAGE_COST_TRACKING_CODES

  #
  MANAGE_PAYMENT_CODES

  #
  SHARE_PAYMENT_CODES

  #
  VIEW_BOOKING

  #
  VIEW_PAYMENT_CODES

  #
  VIEW_COST_TRACKING_CODES

  #
  VIEW_REPORTS

  #
  ADM_APPROVAL_CONFIG_VIEW

  #
  ADM_APPROVAL_CONFIG_EDIT

  #
  ADM_CARD_MGMT_VIEW

  #
  ADM_CARD_MGMT_EDIT

  #
  ADM_ACC_MGMT_VIEW

  #
  ADM_ACC_MGMT_EDIT

  #
  ADM_ACC_MGMT_CONFIG_VIEW

  #
  ADM_ACC_MGMT_CONFIG_EDIT

  #
  ADM_VCC_DETAILS_COPY

  #
  PROPERTY_LOCAL_TIME

  #
  ADM_PAYMENT_ID_EDIT

  #
  ADM_CREATE_PAYMENT_ID
}

#
type PassiveSegment {
  #
  id: Int

  #
  createdAt: LodgeLinkDate!

  #
  updatedAt: LodgeLinkDate!

  #
  pnrLocator: String

  #
  bookingId: Int

  #
  bookingGuestId: Int

  #
  orgId: String

  #
  guestFirstName: String

  #
  guestLastName: String

  #
  confirmationNumber: String

  #
  checkin: String

  #
  checkout: String

  #
  estimatedInboundRate: Int

  #
  guestEmail: String

  #
  guestPhoneNumber: String

  #
  propertyName: String

  #
  propertyPhoneNumber: String

  #
  propertyEmail: String

  #
  address: String

  #
  postalCode: String

  #
  city: String

  #
  province: String

  #
  country: String

  #
  bookingStatus: BookingStatus!

  #
  sentToQueue: Boolean

  #
  currentQueueNumber: Int

  #
  connected: Int

  #
  queueStatus: String

  #
  queueFailureReason: QueueFailureReason
}

# PropertyRacRate Typedef
# Defines the RAC rate information of a connected property
type PropertyRacRate {
  #
  id: Int!

  #
  property: Property!

  #
  racData: String!
}

# LayerInput typedef
input LayerInput {
  #
  id: Int

  # User-facing Id of Layer
  layerId: String
}

# PropertyMapping typedef
# Defines a PropertyMapping and all information it contains //
type PropertyMapping {
  #
  id: Int

  # Hilton hotel code
  hiltonPropertyCode: String

  # Sabre hotel code
  sabrePropertyCode: String

  # Hilton chain code
  hiltonBrandCode: String

  # Sabre chain code
  GDSChainCode: String

  # Connection id - foriegn key to connection
  connectionId: Int
}

#
enum BookingType {
  #
  Create

  #
  Edit

  #
  Cancel
}

# ApprovalRequest input
input ApprovalRequestInput {
  # Approval id
  id: Int

  # Booking id
  bookingId: Int
}

# ApprovalRequest response
type ApprovalRequestResponse {
  #
  id: String!

  #
  status: String!
}

# ApprovalUpdate input
input ApprovalUpdateInput {
  #
  approvalId: String!

  #
  update: ApprovalUpdatePayload!

  #
  postbackUrl: String!
}

# ApprovalUpdate payload interface
input ApprovalUpdatePayload {
  #
  status: ApprovalRequestStatus!

  #
  actionedBy: Int!

  #
  comments: String
}

# The fields needed to store a Folio file
input FolioFileInput {
  #
  fileName: String!

  #
  fileExt: FolioFileTypes!

  #
  content: String!
}

#
enum FolioFileTypes {
  #
  pdf

  #
  jpg

  #
  jpeg

  #
  png

  #
  xlsx

  #
  csv
}

# LodgeLinkPolicyInput Mutation
input LodgeLinkPolicyInput {
  #
  checkin: DateTime!

  #
  checkout: DateTime!

  #
  hoursToCancel: Int!
}

#
type MasterServiceAgreementResponse implements MutationResponse {
  #
  message: String!

  #
  msa: MasterServiceAgreement
}

#
enum OverrideMarkupType {
  #
  percentage

  #
  value
}

#
enum OverrideCalculationType {
  #
  rounded

  #
  unrounded
}

#
input ReconciliationErrorInput {
  #
  id: Int!

  # First name of guest - Min 1, Max 100 Chars
  firstName: String!

  # Last name of guest - Min 1, Max 100 Chars
  lastName: String!

  # Company guest is affiliated with - Max 100 Chars
  employer: String

  #
  stayDate: LodgeLinkDate!

  #
  roomName: String!

  #
  subcontractor: String

  #
  shift: String

  #
  checkin: LodgeLinkDate

  #
  checkout: LodgeLinkDate

  #
  paymentCode: String
}

#
input ReconciliationRowInput {
  # First name of guest - Min 1, Max 100 Chars
  firstName: String

  # Last name of guest - Min 1, Max 100 Chars
  lastName: String

  # Company guest is affiliated with - Max 100 Chars
  employer: String

  #
  stayDate: LodgeLinkDate

  #
  subcontractor: String

  #
  roomName: String

  #
  shift: String

  #
  resNum: String

  #
  checkin: LodgeLinkDate

  #
  checkout: LodgeLinkDate

  #
  paymentCode: String
}

# TaxesFeesInTemplate input
input TaxesFeesInTemplateInput {
  # Tax or Fee
  taxFeeId: Int

  # Order to apply taxes and fees from template
  order: Int
}

# TaxFeeInput input
input TaxFeeInput {
  # Name of tax or fee - Min 1, Max 100 Chars
  name: String!

  # Description of the tax or fee - Max 255 Chars
  description: String

  # The tax/fee amount
  amount: Float!

  # Percent or Flat
  taxFeeType: TaxFeeType!

  # Tax vs Fee
  category: TaxFeeCategory!

  # Tax fee gets applied to
  appliedTo: TaxFeeAppliedTo!

  # Whether the tax fee was calculated inline
  calculatedOn: TaxFeeCalculatedOn!

  # Max number of days a tax/fee should apply to. If limit is passed the tax/fee is ignored
  maxDays: Int
}

# TaxFeeTemplate input
input TaxFeeTemplateInput {
  # Name of the template - Min 1, Max 100 Chars
  name: String!

  # Description - Max 255 Chars
  description: String
}

# VccAutomaticCreationInput Mutation
input VccAutomaticCreationInput {
  #
  active: Boolean

  #
  expiryDate: String

  #
  amount: String

  #
  country: String

  #
  limitStartDate: String

  #
  limitEndDate: String
}

#
input UpdateGuestDayAmountsInput {
  #
  lineItemGroupId: Int!

  #
  folioId: Int!

  #
  markAsReconciled: Boolean
}

#
input AuditInput {
  #
  auditedService: AuditedService

  #
  targetDataId: String

  #
  oldData: String

  #
  newData: String

  #
  auditReason: String

  #
  identityId: Int

  #
  adminActionId: Int
}

#
enum AuditedService {
  #
  AdminEditBooking

  #
  AdminEditCreditApplication

  #
  EditChargesheetTotals

  #
  EditGuestDayRates

  #
  AdminAddGuestDays

  #
  AdminEditFolio

  #
  FolioResultService
}

# DailyRate typedef
type DailyRate {
  #
  guestId: Int

  #
  roomIndex: Int

  #
  date: String!

  #
  inboundRate: Float

  #
  markup: Float

  #
  taxes: Float

  #
  fees: Float

  #
  racRate: Float

  #
  outboundRate: Float
}

#
input ValueInput {
  #
  value: Int
}

# CrewListUploadMutationStatus typedef
type CrewListUploadMutationStatus {
  #
  rowStatus: String

  #
  inputErrors: InputErrorsMutationStatus
}

# InputErrorsMutationStatus typedef
type InputErrorsMutationStatus {
  #
  firstName: [String]

  #
  lastName: [String]

  #
  company: [String]

  #
  position: [String]

  #
  referenceNumber: [String]

  #
  phoneNumber: [String]

  #
  emailAddress: [String]
}

#
enum ReconciliationErrorCode {
  #
  ERR1000

  #
  ERR2000

  #
  ERR3000
}

#
type RoomTypeResponse implements MutationResponse {
  #
  message: String!

  #
  roomType: RoomType
}

# PropertyTypeInput typedef
input PropertyTypeInput {
  #
  id: Int!

  # Property Type - Min 1, Max 100 Chars
  name: String

  # Description of the property type - Min 1, Max 255 Chars
  description: String
}

# ReviewPropertyStatus input
input ReviewPropertyStatusInput {
  # ID of Property to approve/ reject
  id: Int

  # New status of property
  status: PropertyStatus

  # Description of status change - Max 255 Chars
  statusDescription: String
}

# CrewCSVUploadHistoryInput input
# Create  a CrewCSVUploadHistoryInput
input CrewCSVUploadHistoryInput {
  #
  id: Int

  #
  csvErrorCount: Int!

  #
  staticCrewCount: Int!

  #
  updatedCrewCount: Int!

  #
  addedCrewCount: Int!

  #
  submittedCrewCount: Int!

  #
  totalCrewCount: Int!

  #
  csvURL: String

  #
  csvUploadStatus: String!

  #
  fileName: String

  #
  fileType: String!

  #
  preview: Boolean

  #
  blob: String!

  #
  csvHistoryId: Int
}

#
enum CrewRoleName {
  #
  CrewMember

  #
  CrewSelfBooker

  #
  CrewBooker
}

#
enum CacheControlScope {
  #
  PUBLIC

  #
  PRIVATE
}

# The `Upload` scalar type represents a file upload.
scalar Upload
